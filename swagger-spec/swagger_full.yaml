swagger: '2.0'
info:
  title: OSF APIv2 Documentation
  version: '2.0'
  description: >-
    Welcome to the V2 Open Science Framework API. With this API you can access
    users, projects, components, registrations, preprints, logs, and files on
    the Open Science Framework.
  contact:
    name: OSF
    email: support@osf.io
    url: 'https://osf.io/support'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'localhost:8000'
basePath: /v2
paths:
  '/{version})/':
    get:
      description: >-
        Welcome to the V2 Open Science Framework API. With this API you can
        access users, projects, components, logs, and files

        from the [Open Science Framework](https://osf.io/). The Open Science
        Framework (OSF) is a free, open-source service

        maintained by the [Center for Open Science](http://cos.io/).


        The OSF serves as a repository and archive for study designs, materials,
        data, manuscripts, or anything else

        associated with your research during the research process. Every project
        and file on the OSF has a permanent unique

        identifier, and every registration (a permanent, time-stamped version of
        your projects and files) can be assigned a

        DOI/ARK. You can use the OSF to measure your impact by monitoring the
        traffic to projects and files you make

        public. With the OSF you have full control of what parts of your
        research are public and what remains private.


        Beta notice: This API is currently a beta service.  You are encouraged
        to use the API and will receive support

        when doing so, however, while the API remains in beta status, it may
        change without notice as a result of

        product updates. The temporary beta status of the API will remain in
        place while it matures. In a future

        release, the beta status will be removed, at which point we will provide
        details on how long we will support

        the API V2 and under what circumstances it might change.


        #General API Usage


        The OSF API generally conforms to the [JSON-API v1.0
        spec](http://jsonapi.org/format/1.0/).  Where exceptions

        exist, they will be noted.  Each endpoint will have its own
        documentation, but there are some general principles.


        Assume undocumented routes/features/fields are unstable.


        ##Requests


        ###Canonical URLs


        All canonical URLs have trailing slashes.  A request to an endpoint
        without a trailing slash will result in a 301

        redirect to the canonical URL.  There are some exceptions when working
        with the Files API, so if a URL in a response

        does not have a slash, do not append one.


        ###Plurals


        Endpoints are always pluralized.  `/users/`, not `/user/`, `/nodes/`,
        not `/node/`.


        ###Common Actions


        Every endpoint in the OSF API responds to `GET`, `HEAD`, and `OPTION`
        requests.  You must have adequate permissions

        to interact with the endpoint.  Unauthorized use will result in 401
        Unauthorized or 403 Forbidden responses.  Use

        `HEAD` to probe an endpoint and make sure your headers are well-formed. 
        `GET` will return a representation of the

        entity or entity collection referenced by the endpoint.  An `OPTIONS`
        request will return a JSON object that describes the

        endpoint, including the name, a description, the acceptable request
        formats, the allowed response formats, and any

        actions available via the endpoint.


        ###Versioning

        Versioning can be specified in three different ways:


        1. URL Path Versioning, e.g. `/v2/` or `/v3/`


        + A version specified via the URL path is a **required** part of the
        URL.


        + Only a major version can be specified via the URL path, i.e.
        `/v2.0.6/` is invalid,

        additionally, paths such as `/v2.0/` are invalid.


        + If the default version of the API is within the major version
        specified in the URL path,

        the default version will be applied (i.e. if the default version is
        `2.3` and the URL path is `/v2/`,

        then version returned will be `2.3`).


        + If the default version of the API is not within the major version
        specified in the URL path,

        the URL path version will be applied (i.e. if the default version is
        `3.0` and the URL path is `/v2/`,

        then the version returned will be `2.0`)


        2. Query Parameter Versioning, e.g. `/v2/nodes/?version=2.1.6`


        + Pinning to a specific version via a query parameter is **optional**.


        + A specific version (major, minor, or patch) for a single request can
        be specified via the `version`

        query parameter, as long as it is an allowed version.


        + If the version specified in the query parameter does not fall within
        the same major version

        specified in the URL path, i.e `/v2/nodes/?version=3.1.4` a `409
        Conflict` response will be returned.


        3.  Header Versioning, e.g.
        `Accept-Header=application/vnd.api+json;version=3.0.1`


        + Pinning to a specific version via request header is **optional**.


        + A specific version (major, minor, or patch) for a single request can
        be specified

        via the `Accept Header` of the request, as long as it is an allowed
        version.


        + If the version specified in the header does not fall within the same
        major version specified

        in the URL path a `409 Conflict` response will be returned.


        + If both a header version and query parameter version are specified,
        the versions must match exactly

        or a `409 Conflict` response will be returned (i.e. one does not take
        precedence over the other).


        ###Filtering


        Entity collections can be filtered by adding a query parameter in the
        form:


        filter[<fieldname>]=<matching information>


        String queries are filtered using substring matching. For example, if
        you were trying to find [Lise

        Meitner](http://en.wikipedia.org/wiki/Lise_Meitner):


        /users/?filter[full_name]=meitn


        You can filter on multiple fields, or the same field in different ways,
        by &-ing the query parameters together.


        /users/?filter[full_name]=lise&filter[family_name]=mei


        Boolean fields should be queried with `true` or `false`.


        /nodes/?filter[registered]=true


        You can request multiple resources by filtering on id and placing
        comma-separated values in your query parameter.


        /nodes/?filter[id]=aegu6,me23a


        You can filter with case-sensitivity or case-insensitivity by using
        `contains` and `icontains`, respectively.


        /nodes/?filter[tags][icontains]=help


        ###Embedding


        All related resources that appear in the `relationships` attribute are
        embeddable, meaning that

        by adding a query parameter like:


        /nodes/?embed=contributors


        it is possible to fetch a Node and its contributors in a single request.
        The embedded results will have the following
      summary: >-
        Welcome to the V2 Open Science Framework API. With this API you can
        access users, projects, components, logs, and files
      responses:
        '200':
          description: ''
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
      operationId: read
  '/{version})/addons/':
    get:
      description: >-
        List of addons configurable with the OSF *Read-only*.


        Paginated list of addons associated with third-party services


        ##Permissions


        No restrictions.


        ## <Addon> Attributes


        OSF <Addon\> entities have the "addons" `type`, and their `id` indicates
        the

        `short_name` of the associated service provider (eg. `box`,
        `googledrive`, etc).


        name        type        description

        ======================================================================================================

        url         string      Url of this third-party service

        name        string      `full_name` of third-party service provider

        description string      Description of this addon

        categories  list        List of categories this addon belongs to


        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - addons
      summary: List of addons configurable with the OSF *Read-only*.
      operationId: addons_list
      responses:
        '200':
          description: ''
  '/{version})/applications/':
    get:
      description: Get a list of API applications (eg OAuth2) that the user has registered
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - applications
      summary: Get a list of API applications (eg OAuth2) that the user has registered
      operationId: applications_list
      responses:
        '200':
          description: ''
    post:
      description: Get a list of API applications (eg OAuth2) that the user has registered
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            required:
              - type
              - name
              - home_url
              - callback_url
            type: object
            properties:
              callback_url:
                type: string
                description: >-
                  The callback URL for this application (refer to OAuth
                  documentation)
              home_url:
                type: string
                description: The full URL to this application's homepage.
              type:
                type: string
                description: ''
              name:
                type: string
                description: 'A short, descriptive name for this application'
              description:
                type: string
                description: >-
                  An optional description displayed to all users of this
                  application
          name: data
          in: body
      tags:
        - applications
      summary: Get a list of API applications (eg OAuth2) that the user has registered
      operationId: applications_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/applications/{client_id}/':
    get:
      description: >-
        Get information about a specific API application (eg OAuth2) that the
        user has registered


        Should not return information if the application belongs to a different
        user
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: client_id
          in: path
      tags:
        - applications
      summary: >-
        Get information about a specific API application (eg OAuth2) that the
        user has registered
      operationId: applications_read
      responses:
        '200':
          description: ''
    put:
      description: >-
        Get information about a specific API application (eg OAuth2) that the
        user has registered


        Should not return information if the application belongs to a different
        user
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: client_id
          in: path
        - schema:
            required:
              - id
              - type
              - name
              - home_url
              - callback_url
            type: object
            properties:
              home_url:
                type: string
                description: The full URL to this application's homepage.
              description:
                type: string
                description: >-
                  An optional description displayed to all users of this
                  application
              callback_url:
                type: string
                description: >-
                  The callback URL for this application (refer to OAuth
                  documentation)
              type:
                type: string
                description: ''
              id:
                type: string
                description: The client ID for this application (automatically generated)
              name:
                type: string
                description: 'A short, descriptive name for this application'
          name: data
          in: body
      tags:
        - applications
      summary: >-
        Get information about a specific API application (eg OAuth2) that the
        user has registered
      operationId: applications_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Get information about a specific API application (eg OAuth2) that the
        user has registered


        Should not return information if the application belongs to a different
        user
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: client_id
          in: path
        - schema:
            type: object
            properties:
              home_url:
                type: string
                description: The full URL to this application's homepage.
              description:
                type: string
                description: >-
                  An optional description displayed to all users of this
                  application
              callback_url:
                type: string
                description: >-
                  The callback URL for this application (refer to OAuth
                  documentation)
              type:
                type: string
                description: ''
              id:
                type: string
                description: The client ID for this application (automatically generated)
              name:
                type: string
                description: 'A short, descriptive name for this application'
          name: data
          in: body
      tags:
        - applications
      summary: >-
        Get information about a specific API application (eg OAuth2) that the
        user has registered
      operationId: applications_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    delete:
      description: >-
        Get information about a specific API application (eg OAuth2) that the
        user has registered


        Should not return information if the application belongs to a different
        user
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: client_id
          in: path
      tags:
        - applications
      summary: >-
        Get information about a specific API application (eg OAuth2) that the
        user has registered
      operationId: applications_delete
      responses:
        '204':
          description: ''
  '/{version})/applications/{client_id}/reset/':
    post:
      description: >-
        Resets client secret of a specific API application (eg OAuth2) that the
        user has registered


        Should not perform update or return information if the application
        belongs to a different user
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: client_id
          in: path
        - schema:
            required:
              - id
              - type
              - name
              - home_url
              - callback_url
            type: object
            properties:
              home_url:
                type: string
                description: The full URL to this application's homepage.
              description:
                type: string
                description: >-
                  An optional description displayed to all users of this
                  application
              callback_url:
                type: string
                description: >-
                  The callback URL for this application (refer to OAuth
                  documentation)
              type:
                type: string
                description: ''
              id:
                type: string
                description: The client ID for this application (automatically generated)
              name:
                type: string
                description: 'A short, descriptive name for this application'
          name: data
          in: body
      tags:
        - applications
      summary: >-
        Resets client secret of a specific API application (eg OAuth2) that the
        user has registered
      operationId: applications_reset_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/citations/styles/':
    get:
      description: >-
        List of standard citation styles available for rendering citations.
        *Read-only*


        ##Note

        **This API endpoint is under active development, and is subject to
        change in the future**


        ##Citation Attributes


        name           type               description

        =========================================================================

        date_parsed        string             date the citation style was first
        added to the database

        summary            string             summary of the citation style

        short_title        string             a short name or nickname for the
        citation style

        title              string             official name of the citation
        style



        Citation style may be filtered by their 'title', 'short_title',
        'summary', and 'id'
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - citations
      summary: >-
        List of standard citation styles available for rendering citations.
        *Read-only*
      operationId: citations_styles_list
      responses:
        '200':
          description: ''
  '/{version})/citations/styles/{citation_id}/':
    get:
      description: >-
        Detail for a citation style *Read-only*


        ##Note

        **This API endpoint is under active development, and is subject to
        change in the future**


        ##Citation Attributes


        name           type               description

        =========================================================================

        date_parsed        string             date the citation style was first
        added to the database

        summary            string             summary of the citation style

        short_title        string             a short name or nickname for the
        citation style

        title              string             official name of the citation
        style
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: citation_id
          in: path
      tags:
        - citations
      summary: Detail for a citation style *Read-only*
      operationId: citations_styles_read
      responses:
        '200':
          description: ''
  '/{version})/collections/':
    get:
      description: >-
        Organizer Collections organize projects and components. *Writeable*.


        Paginated list of Project Organizer Collections ordered by their
        `date_modified`.

        Each resource contains the full representation of the project organizer
        collection, meaning additional

        requests to an individual Organizer Collection's detail view are not
        necessary.


        The Project Organizer is a tool to allow the user to make Collections of
        projects, components, and registrations

        for whatever purpose the user might want to organize them. They make
        node_links to any Node that a user has

        read access to. Collections through this API do not nest. Currently
        Collections are private to any individual user,

        though that could change one day.


        ##Collection Attributes


        OSF Organizer Collection entities have the "nodes" `type`.


        name           type               description

        =================================================================================

        title          string             title of Organizer Collection

        date_created   iso8601 timestamp  timestamp that the collection was
        created

        date_modified  iso8601 timestamp  timestamp when the collection was last
        updated



        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        ###Creating New Organizer Collections
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - collections
      summary: Organizer Collections organize projects and components. *Writeable*.
      operationId: collections_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        Organizer Collections organize projects and components. *Writeable*.


        Paginated list of Project Organizer Collections ordered by their
        `date_modified`.

        Each resource contains the full representation of the project organizer
        collection, meaning additional

        requests to an individual Organizer Collection's detail view are not
        necessary.


        The Project Organizer is a tool to allow the user to make Collections of
        projects, components, and registrations

        for whatever purpose the user might want to organize them. They make
        node_links to any Node that a user has

        read access to. Collections through this API do not nest. Currently
        Collections are private to any individual user,

        though that could change one day.


        ##Collection Attributes


        OSF Organizer Collection entities have the "nodes" `type`.


        name           type               description

        =================================================================================

        title          string             title of Organizer Collection

        date_created   iso8601 timestamp  timestamp that the collection was
        created

        date_modified  iso8601 timestamp  timestamp when the collection was last
        updated



        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        ###Creating New Organizer Collections
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            required:
              - type
              - title
            type: object
            properties:
              bookmarks:
                type: boolean
                description: ''
              type:
                type: string
                description: ''
              title:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - collections
      summary: Organizer Collections organize projects and components. *Writeable*.
      operationId: collections_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/collections/{collection_id}/':
    get:
      description: >-
        Details about Organizer Collections. *Writeable*.


        The Project Organizer is a tool to allow the user to make Collections of
        projects, components, and registrations

        for whatever purpose the user might want to organize them. They make
        node_links to any Node that a user has

        read access to. Collections through this API do not nest. Currently
        Collections are private to any individual user,

        though that could change one day.


        ##Collection Attributes


        OSF Organizer Collection entities have the "nodes" `type`.


        name           type               description

        =================================================================================

        title          string             title of Organizer Collection

        date_created   iso8601 timestamp  timestamp that the collection was
        created

        date_modified  iso8601 timestamp  timestamp when the collection was last
        updated


        ##Relationships


        ###Node links


        Node links are pointers or aliases to nodes. This relationship lists all
        of the nodes that the Organizer Collection

        is pointing to. New node links can be created with this collection.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
      tags:
        - collections
      summary: Details about Organizer Collections. *Writeable*.
      operationId: collections_read
      responses:
        '200':
          description: ''
    put:
      description: >-
        Details about Organizer Collections. *Writeable*.


        The Project Organizer is a tool to allow the user to make Collections of
        projects, components, and registrations

        for whatever purpose the user might want to organize them. They make
        node_links to any Node that a user has

        read access to. Collections through this API do not nest. Currently
        Collections are private to any individual user,

        though that could change one day.


        ##Collection Attributes


        OSF Organizer Collection entities have the "nodes" `type`.


        name           type               description

        =================================================================================

        title          string             title of Organizer Collection

        date_created   iso8601 timestamp  timestamp that the collection was
        created

        date_modified  iso8601 timestamp  timestamp when the collection was last
        updated


        ##Relationships


        ###Node links


        Node links are pointers or aliases to nodes. This relationship lists all
        of the nodes that the Organizer Collection

        is pointing to. New node links can be created with this collection.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            required:
              - id
              - type
              - title
            type: object
            properties:
              bookmarks:
                type: boolean
                description: ''
              type:
                type: string
                description: ''
              id:
                type: string
                description: ''
              title:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - collections
      summary: Details about Organizer Collections. *Writeable*.
      operationId: collections_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Details about Organizer Collections. *Writeable*.


        The Project Organizer is a tool to allow the user to make Collections of
        projects, components, and registrations

        for whatever purpose the user might want to organize them. They make
        node_links to any Node that a user has

        read access to. Collections through this API do not nest. Currently
        Collections are private to any individual user,

        though that could change one day.


        ##Collection Attributes


        OSF Organizer Collection entities have the "nodes" `type`.


        name           type               description

        =================================================================================

        title          string             title of Organizer Collection

        date_created   iso8601 timestamp  timestamp that the collection was
        created

        date_modified  iso8601 timestamp  timestamp when the collection was last
        updated


        ##Relationships


        ###Node links


        Node links are pointers or aliases to nodes. This relationship lists all
        of the nodes that the Organizer Collection

        is pointing to. New node links can be created with this collection.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            type: object
            properties:
              bookmarks:
                type: boolean
                description: ''
              type:
                type: string
                description: ''
              id:
                type: string
                description: ''
              title:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - collections
      summary: Details about Organizer Collections. *Writeable*.
      operationId: collections_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    delete:
      description: >-
        Details about Organizer Collections. *Writeable*.


        The Project Organizer is a tool to allow the user to make Collections of
        projects, components, and registrations

        for whatever purpose the user might want to organize them. They make
        node_links to any Node that a user has

        read access to. Collections through this API do not nest. Currently
        Collections are private to any individual user,

        though that could change one day.


        ##Collection Attributes


        OSF Organizer Collection entities have the "nodes" `type`.


        name           type               description

        =================================================================================

        title          string             title of Organizer Collection

        date_created   iso8601 timestamp  timestamp that the collection was
        created

        date_modified  iso8601 timestamp  timestamp when the collection was last
        updated


        ##Relationships


        ###Node links


        Node links are pointers or aliases to nodes. This relationship lists all
        of the nodes that the Organizer Collection

        is pointing to. New node links can be created with this collection.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
      tags:
        - collections
      summary: Details about Organizer Collections. *Writeable*.
      operationId: collections_delete
      responses:
        '204':
          description: ''
  '/{version})/collections/{collection_id}/linked_nodes/':
    get:
      description: >-
        List of nodes linked to this node. *Read-only*.


        Linked nodes are the project/component nodes pointed to by node links.
        This view will probably replace node_links in the near future.


        <!--- Copied Spiel from NodeDetail -->


        On the front end, nodes are considered 'projects' or 'components'. The
        difference between a project and a component

        is that a project is the top-level node, and components are children of
        the project. There is also a [category

        field](/v2/#osf-node-categories) that includes 'project' as an option.
        The categorization essentially determines

        which icon is displayed by the node in the front-end UI and helps with
        search organization. Top-level nodes may have

        a category other than project, and children nodes may have a category of
        project.


        ##Linked Node Attributes


        <!--- Copied Attributes from NodeDetail -->


        OSF Node entities have the "nodes" `type`.


        name           type               description

        =================================================================================

        title          string             title of project or component

        description    string             description of the node

        category       string             node category, must be one of the
        allowed values

        date_created   iso8601 timestamp  timestamp that the node was created

        date_modified  iso8601 timestamp  timestamp when the node was last
        updated

        tags           array of strings   list of tags that describe the node

        registration   boolean            is this is a registration?

        collection     boolean            is this node a collection of other
        nodes?

        public         boolean            has this node been made
        publicly-visible?


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Query Params


        + `page=<Int>` -- page number of results to view, default 1


        + `filter[<fieldname>]=<Str>` -- fields and values to filter the search
        results on.


        Nodes may be filtered by their `title`, `category`, `description`,
        `public`, `registration`, or `tags`.  `title`,

        `description`, and `category` are string fields and will be filtered
        using simple substring matching.  `public` and

        `registration` are booleans, and can be filtered using truthy values,
        such as `true`, `false`, `0`, or `1`.  Note

        that quoting `true` or `false` in the query will cause the match to fail
        regardless.  `tags` is an array of simple strings.


        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - collections
      summary: List of nodes linked to this node. *Read-only*.
      operationId: collections_linked_nodes_list
      responses:
        '200':
          description: ''
  '/{version})/collections/{collection_id}/linked_registrations/':
    get:
      description: >-
        List of registrations linked to this node. *Read-only*.


        Linked registrations are the registration nodes pointed to by node
        links.


        <!--- Copied Spiel from RegistrationDetail -->

        Registrations are read-only snapshots of a project. This view shows
        details about the given registration.


        Each resource contains the full representation of the registration,
        meaning additional requests to an individual

        registration's detail view are not necessary. A withdrawn registration
        will display a limited subset of information,

        namely, title, description, date_created, registration, withdrawn,
        date_registered, withdrawal_justification, and

        registration supplement. All other fields will be displayed as null.
        Additionally, the only relationships permitted

        to be accessed for a withdrawn registration are the contributors - other
        relationships will return a 403.


        ##Linked Registration Attributes


        <!--- Copied Attributes from RegistrationDetail -->


        Registrations have the "registrations" `type`.


        name                            type               description

        =======================================================================================================

        title                           string             title of the
        registered project or component

        description                     string             description of the
        registered node

        category                        string             bode category, must
        be one of the allowed values

        date_created                    iso8601 timestamp  timestamp that the
        node was created

        date_modified                   iso8601 timestamp  timestamp when the
        node was last updated

        tags                            array of strings   list of tags that
        describe the registered node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings   list of strings
        representing the permissions for the current user on this node

        fork                            boolean            is this project a
        fork?

        registration                    boolean            has this project been
        registered? (always true - may be deprecated in future versions)

        collection                      boolean            is this registered
        node a collection? (always false - may be deprecated in future versions)

        node_license                    object             details of the
        license applied to the node

        year                            string             date range of the
        license

        copyright_holders               array of strings   holders of the
        applied license

        public                          boolean            has this registration
        been made publicly-visible?

        withdrawn                       boolean            has this registration
        been withdrawn?

        date_registered                 iso8601 timestamp  timestamp that the
        registration was created

        embargo_end_date                iso8601 timestamp  when the embargo on
        this registration will be lifted (if applicable)

        withdrawal_justification        string             reasons for
        withdrawing the registration

        pending_withdrawal              boolean            is this registration
        pending withdrawal?

        pending_withdrawal_approval     boolean            is this registration
        pending approval?

        pending_embargo_approval        boolean            is the associated
        Embargo awaiting approval by project admins?

        registered_meta                 dictionary         registration
        supplementary information

        registration_supplement         string             registration template


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Query Params


        + `page=<Int>` -- page number of results to view, default 1


        + `filter[<fieldname>]=<Str>` -- fields and values to filter the search
        results on.


        Nodes may be filtered by their `title`, `category`, `description`,
        `public`, `registration`, or `tags`.  `title`,

        `description`, and `category` are string fields and will be filtered
        using simple substring matching.  `public` and

        `registration` are booleans, and can be filtered using truthy values,
        such as `true`, `false`, `0`, or `1`.  Note

        that quoting `true` or `false` in the query will cause the match to fail
        regardless.  `tags` is an array of simple strings.


        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - collections
      summary: List of registrations linked to this node. *Read-only*.
      operationId: collections_linked_registrations_list
      responses:
        '200':
          description: ''
  '/{version})/collections/{collection_id}/node_links/':
    get:
      description: >-
        Node Links to other nodes. *Writeable*.


        # Deprecated


        The use of /collections/ID/node_links/ is deprecated in favor of
        linked_nodes, linked_registrations or a combination of both.


        ## Known Issue


        Linked nodes of type 'registrations' will be returned with an error 'Not
        found.' in the {embeds: target_node: {}} object.



        Node Links act as pointers to other nodes. Unlike Forks, they are not
        copies of nodes;

        Node Links are a direct reference to the node that they point to.


        ##Node Link Attributes


        *None*


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - collections
      summary: Node Links to other nodes. *Writeable*.
      operationId: collections_node_links_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        Node Links to other nodes. *Writeable*.


        # Deprecated


        The use of /collections/ID/node_links/ is deprecated in favor of
        linked_nodes, linked_registrations or a combination of both.


        ## Known Issue


        Linked nodes of type 'registrations' will be returned with an error 'Not
        found.' in the {embeds: target_node: {}} object.



        Node Links act as pointers to other nodes. Unlike Forks, they are not
        copies of nodes;

        Node Links are a direct reference to the node that they point to.


        ##Node Link Attributes


        *None*


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            required:
              - id
              - type
              - target_type
            type: object
            properties:
              type:
                type: string
                description: ''
              id:
                type: string
                description: ''
              target_type:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - collections
      summary: Node Links to other nodes. *Writeable*.
      operationId: collections_node_links_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/collections/{collection_id}/node_links/{node_link_id}/':
    get:
      description: >-
        Node Link details. *Writeable*.


        Node Links act as pointers to other nodes. Unlike Forks, they are not
        copies of nodes;

        Node Links are a direct reference to the node that they point to.


        ##Attributes


        *None*


        ##Relationships


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_link_id
          in: path
      tags:
        - collections
      summary: Node Link details. *Writeable*.
      operationId: collections_node_links_read
      responses:
        '200':
          description: ''
    delete:
      description: >-
        Node Link details. *Writeable*.


        Node Links act as pointers to other nodes. Unlike Forks, they are not
        copies of nodes;

        Node Links are a direct reference to the node that they point to.


        ##Attributes


        *None*


        ##Relationships


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_link_id
          in: path
      tags:
        - collections
      summary: Node Link details. *Writeable*.
      operationId: collections_node_links_delete
      responses:
        '204':
          description: ''
  '/{version})/collections/{collection_id}/relationships/linked_nodes/':
    get:
      description: >-
        Relationship Endpoint for Collection -> Linked Node relationships


        Used to set, remove, update and retrieve the ids of the linked nodes
        attached to this collection. For each id, there

        exists a node link that contains that node.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - collections
      summary: Relationship Endpoint for Collection -> Linked Node relationships
      operationId: collections_relationships_linked_nodes_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        Relationship Endpoint for Collection -> Linked Node relationships


        Used to set, remove, update and retrieve the ids of the linked nodes
        attached to this collection. For each id, there

        exists a node link that contains that node.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            required:
              - data
            type: object
            properties:
              data:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - collections
      summary: Relationship Endpoint for Collection -> Linked Node relationships
      operationId: collections_relationships_linked_nodes_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
    put:
      description: >-
        Relationship Endpoint for Collection -> Linked Node relationships


        Used to set, remove, update and retrieve the ids of the linked nodes
        attached to this collection. For each id, there

        exists a node link that contains that node.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            required:
              - data
            type: object
            properties:
              data:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - collections
      summary: Relationship Endpoint for Collection -> Linked Node relationships
      operationId: collections_relationships_linked_nodes_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Relationship Endpoint for Collection -> Linked Node relationships


        Used to set, remove, update and retrieve the ids of the linked nodes
        attached to this collection. For each id, there

        exists a node link that contains that node.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            type: object
            properties:
              data:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - collections
      summary: Relationship Endpoint for Collection -> Linked Node relationships
      operationId: collections_relationships_linked_nodes_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    delete:
      description: >-
        Relationship Endpoint for Collection -> Linked Node relationships


        Used to set, remove, update and retrieve the ids of the linked nodes
        attached to this collection. For each id, there

        exists a node link that contains that node.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
      tags:
        - collections
      summary: Relationship Endpoint for Collection -> Linked Node relationships
      operationId: collections_relationships_linked_nodes_delete
      responses:
        '204':
          description: ''
  '/{version})/collections/{collection_id}/relationships/linked_registrations/':
    get:
      description: >-
        Relationship Endpoint for Collection -> Linked Registration
        relationships


        Used to set, remove, update and retrieve the ids of the linked
        registrations attached to this collection. For each id, there

        exists a node link that contains that node.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - collections
      summary: >-
        Relationship Endpoint for Collection -> Linked Registration
        relationships
      operationId: collections_relationships_linked_registrations_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        Relationship Endpoint for Collection -> Linked Registration
        relationships


        Used to set, remove, update and retrieve the ids of the linked
        registrations attached to this collection. For each id, there

        exists a node link that contains that node.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            required:
              - data
            type: object
            properties:
              data:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - collections
      summary: >-
        Relationship Endpoint for Collection -> Linked Registration
        relationships
      operationId: collections_relationships_linked_registrations_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
    put:
      description: >-
        Relationship Endpoint for Collection -> Linked Registration
        relationships


        Used to set, remove, update and retrieve the ids of the linked
        registrations attached to this collection. For each id, there

        exists a node link that contains that node.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            required:
              - data
            type: object
            properties:
              data:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - collections
      summary: >-
        Relationship Endpoint for Collection -> Linked Registration
        relationships
      operationId: collections_relationships_linked_registrations_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Relationship Endpoint for Collection -> Linked Registration
        relationships


        Used to set, remove, update and retrieve the ids of the linked
        registrations attached to this collection. For each id, there

        exists a node link that contains that node.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            type: object
            properties:
              data:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - collections
      summary: >-
        Relationship Endpoint for Collection -> Linked Registration
        relationships
      operationId: collections_relationships_linked_registrations_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    delete:
      description: >-
        Relationship Endpoint for Collection -> Linked Registration
        relationships


        Used to set, remove, update and retrieve the ids of the linked
        registrations attached to this collection. For each id, there

        exists a node link that contains that node.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: collection_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
      tags:
        - collections
      summary: >-
        Relationship Endpoint for Collection -> Linked Registration
        relationships
      operationId: collections_relationships_linked_registrations_delete
      responses:
        '204':
          description: ''
  '/{version})/comments/{comment_id}/':
    get:
      description: >-
        Details about a specific comment. *Writeable*.


        ###Permissions


        Comments on public nodes are given read-only access to everyone.
        Comments on private nodes are only visible

        to contributors and administrators on the parent node. Only the user who
        created the comment has permission

        to edit and delete the comment.


        Note that if an anonymous view_only key is being used, the user
        relationship will not be exposed.


        ##Attributes


        OSF comment entities have the "comments" `type`.


        name           type               description

        =================================================================================

        content        string             content of the comment

        date_created   iso8601 timestamp  timestamp that the comment was created

        date_modified  iso8601 timestamp  timestamp when the comment was last
        updated

        modified       boolean            has this comment been edited?

        deleted        boolean            is this comment deleted?

        is_abuse       boolean            is this flagged or confirmed spam?

        is_ham         boolean            has admin checked the legitimacy of
        this comment?

        has_report     boolean            has the current user reported this as
        spam?

        has_children   boolean            does this comment have replies?

        can_edit       boolean            can the current user edit this
        comment?


        ##Relationships


        ###User


        The user who created the comment.


        ###Node


        The project associated with this comment.


        ###Target


        The "parent" of the comment. If the comment was made on a node, the
        target is the node. If the comment

        is a reply, its target is the comment it was in reply to.


        ###Replies

        List of replies to this comment. New replies can be created through this
        endpoint.


        ###Reports

        List of spam reports for this comment. Only users with permission to
        create comments can

        access this endpoint, and users can only see reports that they have
        created.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: comment_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
      tags:
        - comments
      summary: Details about a specific comment. *Writeable*.
      operationId: comments_read
      responses:
        '200':
          description: ''
    put:
      description: >-
        Details about a specific comment. *Writeable*.


        ###Permissions


        Comments on public nodes are given read-only access to everyone.
        Comments on private nodes are only visible

        to contributors and administrators on the parent node. Only the user who
        created the comment has permission

        to edit and delete the comment.


        Note that if an anonymous view_only key is being used, the user
        relationship will not be exposed.


        ##Attributes


        OSF comment entities have the "comments" `type`.


        name           type               description

        =================================================================================

        content        string             content of the comment

        date_created   iso8601 timestamp  timestamp that the comment was created

        date_modified  iso8601 timestamp  timestamp when the comment was last
        updated

        modified       boolean            has this comment been edited?

        deleted        boolean            is this comment deleted?

        is_abuse       boolean            is this flagged or confirmed spam?

        is_ham         boolean            has admin checked the legitimacy of
        this comment?

        has_report     boolean            has the current user reported this as
        spam?

        has_children   boolean            does this comment have replies?

        can_edit       boolean            can the current user edit this
        comment?


        ##Relationships


        ###User


        The user who created the comment.


        ###Node


        The project associated with this comment.


        ###Target


        The "parent" of the comment. If the comment was made on a node, the
        target is the node. If the comment

        is a reply, its target is the comment it was in reply to.


        ###Replies

        List of replies to this comment. New replies can be created through this
        endpoint.


        ###Reports

        List of spam reports for this comment. Only users with permission to
        create comments can

        access this endpoint, and users can only see reports that they have
        created.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: comment_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            required:
              - id
              - type
              - content
              - deleted
            type: object
            properties:
              content:
                type: string
                description: ''
              deleted:
                type: boolean
                description: ''
              type:
                type: string
                description: ''
              id:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - comments
      summary: Details about a specific comment. *Writeable*.
      operationId: comments_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Details about a specific comment. *Writeable*.


        ###Permissions


        Comments on public nodes are given read-only access to everyone.
        Comments on private nodes are only visible

        to contributors and administrators on the parent node. Only the user who
        created the comment has permission

        to edit and delete the comment.


        Note that if an anonymous view_only key is being used, the user
        relationship will not be exposed.


        ##Attributes


        OSF comment entities have the "comments" `type`.


        name           type               description

        =================================================================================

        content        string             content of the comment

        date_created   iso8601 timestamp  timestamp that the comment was created

        date_modified  iso8601 timestamp  timestamp when the comment was last
        updated

        modified       boolean            has this comment been edited?

        deleted        boolean            is this comment deleted?

        is_abuse       boolean            is this flagged or confirmed spam?

        is_ham         boolean            has admin checked the legitimacy of
        this comment?

        has_report     boolean            has the current user reported this as
        spam?

        has_children   boolean            does this comment have replies?

        can_edit       boolean            can the current user edit this
        comment?


        ##Relationships


        ###User


        The user who created the comment.


        ###Node


        The project associated with this comment.


        ###Target


        The "parent" of the comment. If the comment was made on a node, the
        target is the node. If the comment

        is a reply, its target is the comment it was in reply to.


        ###Replies

        List of replies to this comment. New replies can be created through this
        endpoint.


        ###Reports

        List of spam reports for this comment. Only users with permission to
        create comments can

        access this endpoint, and users can only see reports that they have
        created.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: comment_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            type: object
            properties:
              content:
                type: string
                description: ''
              deleted:
                type: boolean
                description: ''
              type:
                type: string
                description: ''
              id:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - comments
      summary: Details about a specific comment. *Writeable*.
      operationId: comments_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    delete:
      description: >-
        Details about a specific comment. *Writeable*.


        ###Permissions


        Comments on public nodes are given read-only access to everyone.
        Comments on private nodes are only visible

        to contributors and administrators on the parent node. Only the user who
        created the comment has permission

        to edit and delete the comment.


        Note that if an anonymous view_only key is being used, the user
        relationship will not be exposed.


        ##Attributes


        OSF comment entities have the "comments" `type`.


        name           type               description

        =================================================================================

        content        string             content of the comment

        date_created   iso8601 timestamp  timestamp that the comment was created

        date_modified  iso8601 timestamp  timestamp when the comment was last
        updated

        modified       boolean            has this comment been edited?

        deleted        boolean            is this comment deleted?

        is_abuse       boolean            is this flagged or confirmed spam?

        is_ham         boolean            has admin checked the legitimacy of
        this comment?

        has_report     boolean            has the current user reported this as
        spam?

        has_children   boolean            does this comment have replies?

        can_edit       boolean            can the current user edit this
        comment?


        ##Relationships


        ###User


        The user who created the comment.


        ###Node


        The project associated with this comment.


        ###Target


        The "parent" of the comment. If the comment was made on a node, the
        target is the node. If the comment

        is a reply, its target is the comment it was in reply to.


        ###Replies

        List of replies to this comment. New replies can be created through this
        endpoint.


        ###Reports

        List of spam reports for this comment. Only users with permission to
        create comments can

        access this endpoint, and users can only see reports that they have
        created.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: comment_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
      tags:
        - comments
      summary: Details about a specific comment. *Writeable*.
      operationId: comments_delete
      responses:
        '204':
          description: ''
  '/{version})/comments/{comment_id}/reports/':
    get:
      description: >-
        List of reports made for a comment. *Writeable*.


        Paginated list of reports for a comment. Each resource contains the full
        representation of the

        report, meaning additional requests to an individual comment's report
        detail view are not necessary.


        ###Permissions


        The comment reports endpoint can only be viewed by users with permission
        to comment on the node. Users

        are only shown comment reports that they have made.


        ##Attributes


        OSF comment report entities have the "comment_reports" `type`.


        name           type               description

        =====================================================================================

        category        string            the type of spam, must be one of the
        allowed values

        message         string            description of why the comment was
        reported


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: comment_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - comments
      summary: List of reports made for a comment. *Writeable*.
      operationId: comments_reports_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        List of reports made for a comment. *Writeable*.


        Paginated list of reports for a comment. Each resource contains the full
        representation of the

        report, meaning additional requests to an individual comment's report
        detail view are not necessary.


        ###Permissions


        The comment reports endpoint can only be viewed by users with permission
        to comment on the node. Users

        are only shown comment reports that they have made.


        ##Attributes


        OSF comment report entities have the "comment_reports" `type`.


        name           type               description

        =====================================================================================

        category        string            the type of spam, must be one of the
        allowed values

        message         string            description of why the comment was
        reported


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: comment_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            required:
              - type
              - category
            type: object
            properties:
              category:
                type: string
                description: ''
              message:
                type: string
                description: ''
              type:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - comments
      summary: List of reports made for a comment. *Writeable*.
      operationId: comments_reports_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/comments/{comment_id}/reports/{user_id}/':
    get:
      description: >-
        Details about a specific comment report. *Writeable*.


        ###Permissions


        A comment report detail can only be viewed, edited and removed by the
        user who created the report.


        ##Attributes


        OSF comment report entities have the "comment_reports" `type`.


        name           type               description

        =====================================================================================

        category        string            the type of spam, must be one of the
        allowed values

        message         string            description of why the comment was
        reported


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: comment_id
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
      tags:
        - comments
      summary: Details about a specific comment report. *Writeable*.
      operationId: comments_reports_read
      responses:
        '200':
          description: ''
    put:
      description: >-
        Details about a specific comment report. *Writeable*.


        ###Permissions


        A comment report detail can only be viewed, edited and removed by the
        user who created the report.


        ##Attributes


        OSF comment report entities have the "comment_reports" `type`.


        name           type               description

        =====================================================================================

        category        string            the type of spam, must be one of the
        allowed values

        message         string            description of why the comment was
        reported


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: comment_id
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            required:
              - id
              - type
              - category
            type: object
            properties:
              category:
                type: string
                description: ''
              message:
                type: string
                description: ''
              type:
                type: string
                description: ''
              id:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - comments
      summary: Details about a specific comment report. *Writeable*.
      operationId: comments_reports_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Details about a specific comment report. *Writeable*.


        ###Permissions


        A comment report detail can only be viewed, edited and removed by the
        user who created the report.


        ##Attributes


        OSF comment report entities have the "comment_reports" `type`.


        name           type               description

        =====================================================================================

        category        string            the type of spam, must be one of the
        allowed values

        message         string            description of why the comment was
        reported


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: comment_id
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            type: object
            properties:
              category:
                type: string
                description: ''
              message:
                type: string
                description: ''
              type:
                type: string
                description: ''
              id:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - comments
      summary: Details about a specific comment report. *Writeable*.
      operationId: comments_reports_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    delete:
      description: >-
        Details about a specific comment report. *Writeable*.


        ###Permissions


        A comment report detail can only be viewed, edited and removed by the
        user who created the report.


        ##Attributes


        OSF comment report entities have the "comment_reports" `type`.


        name           type               description

        =====================================================================================

        category        string            the type of spam, must be one of the
        allowed values

        message         string            description of why the comment was
        reported


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: comment_id
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
      tags:
        - comments
      summary: Details about a specific comment report. *Writeable*.
      operationId: comments_reports_delete
      responses:
        '204':
          description: ''
  '/{version})/files/{file_id}/':
    get:
      description: >-
        Details about files and folders. *Writeable*.


        Welcome to the Files API.  Brace yourself, things are about to get
        *weird*.


        The Files API is the one place in the OSF API where we break hard from
        the JSON-API spec.  This is because most of

        the behind-the-scenes moving, uploading, deleting, etc. of files and
        folders is actually handled for us by a

        nifty piece of software called
        [WaterButler](https://github.com/CenterForOpenScience/waterbutler). 
        WaterButler lets

        us interact with files stored on different cloud storage platforms
        through a consistent API.  However, it uses

        different conventions for requests, responses, and URL-building, so pay
        close attention to the documentation for

        [actions](#actions).  The exception is the "Get Info" action, which is
        OSF-centric.


        Only files and folders which have previously been retrieved through the
        Node Files List endpoint (accessible through

        the `files` relationship of their parent nodes) can be accessed through
        this endpoint.  Viewing a folder through the

        Node Files List vivifies their children's metadata in the OSF and allows
        the children to be assigned ids.  This

        metadata is cached and can be refreshed by GETting the file via the Node
        Files List endpoint.


        Both files and folders are available through the Files API and are
        distinguished by the `kind` attribute ("file" for

        files, "folder" for folders).  Not all actions and relationships are
        relevant to both files and folders, so the

        applicable types are listed by each heading.


        ### Waterbutler Entities


        When an action is performed against a WaterButler endpoint, it will
        generally respond with a file entity, a folder

        entity, or no content.


        ####File Entity


        name            type              description

        =========================================================================

        guid            string            OSF GUID for this file (if one has
        been assigned)

        name            string            name of the file

        path            string            unique identifier for this file entity
        for this

        project and storage provider. may not end with '/'

        materialized    string            the full path of the file relative to
        the storage

        root.  may not end with '/'

        kind            string            "file"

        etag            string            etag - http caching identifier w/o
        wrapping quotes

        modified        timestamp         last modified timestamp - format
        depends on provider

        contentType     string            MIME-type when available

        provider        string            id of provider e.g. "osfstorage",
        "s3", "googledrive".

        equivalent to addon_short_name on the OSF

        size            integer           size of file in bytes

        current_version integer           current file version

        tags            array of strings  list of tags that describes the file
        (osfstorage only)

        extra           object            may contain additional data beyond
        what's described here,

        depending on the provider

        version       integer           version number of file. will be 1 on
        initial upload

        downloads     integer           count of the number times the file has
        been downloaded

        hashes        object

        md5         string            md5 hash of file

        sha256      string            SHA-256 hash of file


        ####Folder Entity


        name          type    description

        ======================================================================

        name          string  name of the folder

        path          string  unique identifier for this folder entity for this

        project and storage provider. must end with '/'

        materialized  string  the full path of the folder relative to the
        storage

        root.  must end with '/'

        kind          string  "folder"

        etag          string  etag - http caching identifier w/o wrapping quotes

        extra         object  varies depending on provider



        ##Attributes


        For an OSF File entity, the `type` is "files" regardless of whether the
        entity is actually a file or folder, because

        it belongs to the `files` collection of the API.  They can be
        distinguished by the `kind` attribute.  Files and

        folders use the same representation, but some attributes may be null for
        one kind but not the other. `size` will be

        null for folders.  A list of storage provider keys can be found
        [here](/v2/#storage-providers).


        name                        type               description

        ================================================================================================================

        name                        string             name of the file or
        folder; used for display

        kind                        string             "file" or "folder"

        path                        string             same as for corresponding
        WaterButler entity

        materialized_path           string             the unix-style path to
        the file relative to the provider root

        size                        integer            size of file in bytes,
        null for folders

        provider                    string             storage provider for this
        file. "osfstorage" if stored on the

        OSF.  other examples include "s3" for Amazon S3, "googledrive"

        for Google Drive, "box" for Box.com.

        current_user_can_comment    boolean            Whether the current user
        is allowed to post comments


        last_touched                iso8601 timestamp  last time the metadata
        for the file was retrieved. only

        applies to non-OSF storage providers.

        date_modified               iso8601 timestamp  timestamp of when this
        file was last updated*

        date_created                iso8601 timestamp  timestamp of when this
        file was created*

        extra                       object             may contain additional
        data beyond what's described here,

        depending on the provider

        hashes                      object

        md5                         string             md5 hash of file, null
        for folders

        sha256                      string             SHA-256 hash of file,
        null for folders


        * A note on timestamps: for files stored in osfstorage, `date_created`
        refers to the time the file was

        first uploaded to osfstorage, and `date_modified` is the time the file
        was last updated while in osfstorage.

        Other providers may or may not provide this information, but if they do
        it will correspond to the provider's

        semantics for created/modified times.  These timestamps may also be
        stale; metadata retrieved via the File Detail

        endpoint is cached.  The `last_touched` field describes the last time
        the metadata was retrieved from the external

        provider.  To force a metadata update, access the parent folder via its
        Node Files List endpoint.


        ##Relationships


        ###Node


        The `node` endpoint describes the project or registration that this file
        belongs to.


        ###Files (*folders*)


        The `files` endpoint lists all of the subfiles and folders of the
        current folder. Will be null for files.


        ###Versions (*files*)


        The `versions` endpoint provides version history for files.  Will be
        null for folders.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: file_id
          in: path
      tags:
        - files
      summary: Details about files and folders. *Writeable*.
      operationId: files_read
      responses:
        '200':
          description: ''
    put:
      description: >-
        Details about files and folders. *Writeable*.


        Welcome to the Files API.  Brace yourself, things are about to get
        *weird*.


        The Files API is the one place in the OSF API where we break hard from
        the JSON-API spec.  This is because most of

        the behind-the-scenes moving, uploading, deleting, etc. of files and
        folders is actually handled for us by a

        nifty piece of software called
        [WaterButler](https://github.com/CenterForOpenScience/waterbutler). 
        WaterButler lets

        us interact with files stored on different cloud storage platforms
        through a consistent API.  However, it uses

        different conventions for requests, responses, and URL-building, so pay
        close attention to the documentation for

        [actions](#actions).  The exception is the "Get Info" action, which is
        OSF-centric.


        Only files and folders which have previously been retrieved through the
        Node Files List endpoint (accessible through

        the `files` relationship of their parent nodes) can be accessed through
        this endpoint.  Viewing a folder through the

        Node Files List vivifies their children's metadata in the OSF and allows
        the children to be assigned ids.  This

        metadata is cached and can be refreshed by GETting the file via the Node
        Files List endpoint.


        Both files and folders are available through the Files API and are
        distinguished by the `kind` attribute ("file" for

        files, "folder" for folders).  Not all actions and relationships are
        relevant to both files and folders, so the

        applicable types are listed by each heading.


        ### Waterbutler Entities


        When an action is performed against a WaterButler endpoint, it will
        generally respond with a file entity, a folder

        entity, or no content.


        ####File Entity


        name            type              description

        =========================================================================

        guid            string            OSF GUID for this file (if one has
        been assigned)

        name            string            name of the file

        path            string            unique identifier for this file entity
        for this

        project and storage provider. may not end with '/'

        materialized    string            the full path of the file relative to
        the storage

        root.  may not end with '/'

        kind            string            "file"

        etag            string            etag - http caching identifier w/o
        wrapping quotes

        modified        timestamp         last modified timestamp - format
        depends on provider

        contentType     string            MIME-type when available

        provider        string            id of provider e.g. "osfstorage",
        "s3", "googledrive".

        equivalent to addon_short_name on the OSF

        size            integer           size of file in bytes

        current_version integer           current file version

        tags            array of strings  list of tags that describes the file
        (osfstorage only)

        extra           object            may contain additional data beyond
        what's described here,

        depending on the provider

        version       integer           version number of file. will be 1 on
        initial upload

        downloads     integer           count of the number times the file has
        been downloaded

        hashes        object

        md5         string            md5 hash of file

        sha256      string            SHA-256 hash of file


        ####Folder Entity


        name          type    description

        ======================================================================

        name          string  name of the folder

        path          string  unique identifier for this folder entity for this

        project and storage provider. must end with '/'

        materialized  string  the full path of the folder relative to the
        storage

        root.  must end with '/'

        kind          string  "folder"

        etag          string  etag - http caching identifier w/o wrapping quotes

        extra         object  varies depending on provider



        ##Attributes


        For an OSF File entity, the `type` is "files" regardless of whether the
        entity is actually a file or folder, because

        it belongs to the `files` collection of the API.  They can be
        distinguished by the `kind` attribute.  Files and

        folders use the same representation, but some attributes may be null for
        one kind but not the other. `size` will be

        null for folders.  A list of storage provider keys can be found
        [here](/v2/#storage-providers).


        name                        type               description

        ================================================================================================================

        name                        string             name of the file or
        folder; used for display

        kind                        string             "file" or "folder"

        path                        string             same as for corresponding
        WaterButler entity

        materialized_path           string             the unix-style path to
        the file relative to the provider root

        size                        integer            size of file in bytes,
        null for folders

        provider                    string             storage provider for this
        file. "osfstorage" if stored on the

        OSF.  other examples include "s3" for Amazon S3, "googledrive"

        for Google Drive, "box" for Box.com.

        current_user_can_comment    boolean            Whether the current user
        is allowed to post comments


        last_touched                iso8601 timestamp  last time the metadata
        for the file was retrieved. only

        applies to non-OSF storage providers.

        date_modified               iso8601 timestamp  timestamp of when this
        file was last updated*

        date_created                iso8601 timestamp  timestamp of when this
        file was created*

        extra                       object             may contain additional
        data beyond what's described here,

        depending on the provider

        hashes                      object

        md5                         string             md5 hash of file, null
        for folders

        sha256                      string             SHA-256 hash of file,
        null for folders


        * A note on timestamps: for files stored in osfstorage, `date_created`
        refers to the time the file was

        first uploaded to osfstorage, and `date_modified` is the time the file
        was last updated while in osfstorage.

        Other providers may or may not provide this information, but if they do
        it will correspond to the provider's

        semantics for created/modified times.  These timestamps may also be
        stale; metadata retrieved via the File Detail

        endpoint is cached.  The `last_touched` field describes the last time
        the metadata was retrieved from the external

        provider.  To force a metadata update, access the parent folder via its
        Node Files List endpoint.


        ##Relationships


        ###Node


        The `node` endpoint describes the project or registration that this file
        belongs to.


        ###Files (*folders*)


        The `files` endpoint lists all of the subfiles and folders of the
        current folder. Will be null for files.


        ###Versions (*files*)


        The `versions` endpoint provides version history for files.  Will be
        null for folders.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: file_id
          in: path
        - schema:
            required:
              - id
              - type
              - checkout
            type: object
            properties:
              checkout:
                type: string
                description: ''
              type:
                type: string
                description: ''
              id:
                type: string
                description: ''
              tags:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - files
      summary: Details about files and folders. *Writeable*.
      operationId: files_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Details about files and folders. *Writeable*.


        Welcome to the Files API.  Brace yourself, things are about to get
        *weird*.


        The Files API is the one place in the OSF API where we break hard from
        the JSON-API spec.  This is because most of

        the behind-the-scenes moving, uploading, deleting, etc. of files and
        folders is actually handled for us by a

        nifty piece of software called
        [WaterButler](https://github.com/CenterForOpenScience/waterbutler). 
        WaterButler lets

        us interact with files stored on different cloud storage platforms
        through a consistent API.  However, it uses

        different conventions for requests, responses, and URL-building, so pay
        close attention to the documentation for

        [actions](#actions).  The exception is the "Get Info" action, which is
        OSF-centric.


        Only files and folders which have previously been retrieved through the
        Node Files List endpoint (accessible through

        the `files` relationship of their parent nodes) can be accessed through
        this endpoint.  Viewing a folder through the

        Node Files List vivifies their children's metadata in the OSF and allows
        the children to be assigned ids.  This

        metadata is cached and can be refreshed by GETting the file via the Node
        Files List endpoint.


        Both files and folders are available through the Files API and are
        distinguished by the `kind` attribute ("file" for

        files, "folder" for folders).  Not all actions and relationships are
        relevant to both files and folders, so the

        applicable types are listed by each heading.


        ### Waterbutler Entities


        When an action is performed against a WaterButler endpoint, it will
        generally respond with a file entity, a folder

        entity, or no content.


        ####File Entity


        name            type              description

        =========================================================================

        guid            string            OSF GUID for this file (if one has
        been assigned)

        name            string            name of the file

        path            string            unique identifier for this file entity
        for this

        project and storage provider. may not end with '/'

        materialized    string            the full path of the file relative to
        the storage

        root.  may not end with '/'

        kind            string            "file"

        etag            string            etag - http caching identifier w/o
        wrapping quotes

        modified        timestamp         last modified timestamp - format
        depends on provider

        contentType     string            MIME-type when available

        provider        string            id of provider e.g. "osfstorage",
        "s3", "googledrive".

        equivalent to addon_short_name on the OSF

        size            integer           size of file in bytes

        current_version integer           current file version

        tags            array of strings  list of tags that describes the file
        (osfstorage only)

        extra           object            may contain additional data beyond
        what's described here,

        depending on the provider

        version       integer           version number of file. will be 1 on
        initial upload

        downloads     integer           count of the number times the file has
        been downloaded

        hashes        object

        md5         string            md5 hash of file

        sha256      string            SHA-256 hash of file


        ####Folder Entity


        name          type    description

        ======================================================================

        name          string  name of the folder

        path          string  unique identifier for this folder entity for this

        project and storage provider. must end with '/'

        materialized  string  the full path of the folder relative to the
        storage

        root.  must end with '/'

        kind          string  "folder"

        etag          string  etag - http caching identifier w/o wrapping quotes

        extra         object  varies depending on provider



        ##Attributes


        For an OSF File entity, the `type` is "files" regardless of whether the
        entity is actually a file or folder, because

        it belongs to the `files` collection of the API.  They can be
        distinguished by the `kind` attribute.  Files and

        folders use the same representation, but some attributes may be null for
        one kind but not the other. `size` will be

        null for folders.  A list of storage provider keys can be found
        [here](/v2/#storage-providers).


        name                        type               description

        ================================================================================================================

        name                        string             name of the file or
        folder; used for display

        kind                        string             "file" or "folder"

        path                        string             same as for corresponding
        WaterButler entity

        materialized_path           string             the unix-style path to
        the file relative to the provider root

        size                        integer            size of file in bytes,
        null for folders

        provider                    string             storage provider for this
        file. "osfstorage" if stored on the

        OSF.  other examples include "s3" for Amazon S3, "googledrive"

        for Google Drive, "box" for Box.com.

        current_user_can_comment    boolean            Whether the current user
        is allowed to post comments


        last_touched                iso8601 timestamp  last time the metadata
        for the file was retrieved. only

        applies to non-OSF storage providers.

        date_modified               iso8601 timestamp  timestamp of when this
        file was last updated*

        date_created                iso8601 timestamp  timestamp of when this
        file was created*

        extra                       object             may contain additional
        data beyond what's described here,

        depending on the provider

        hashes                      object

        md5                         string             md5 hash of file, null
        for folders

        sha256                      string             SHA-256 hash of file,
        null for folders


        * A note on timestamps: for files stored in osfstorage, `date_created`
        refers to the time the file was

        first uploaded to osfstorage, and `date_modified` is the time the file
        was last updated while in osfstorage.

        Other providers may or may not provide this information, but if they do
        it will correspond to the provider's

        semantics for created/modified times.  These timestamps may also be
        stale; metadata retrieved via the File Detail

        endpoint is cached.  The `last_touched` field describes the last time
        the metadata was retrieved from the external

        provider.  To force a metadata update, access the parent folder via its
        Node Files List endpoint.


        ##Relationships


        ###Node


        The `node` endpoint describes the project or registration that this file
        belongs to.


        ###Files (*folders*)


        The `files` endpoint lists all of the subfiles and folders of the
        current folder. Will be null for files.


        ###Versions (*files*)


        The `versions` endpoint provides version history for files.  Will be
        null for folders.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: file_id
          in: path
        - schema:
            type: object
            properties:
              checkout:
                type: string
                description: ''
              type:
                type: string
                description: ''
              id:
                type: string
                description: ''
              tags:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - files
      summary: Details about files and folders. *Writeable*.
      operationId: files_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
  '/{version})/files/{file_id}/versions/':
    get:
      description: >-
        List of versions for the requested file. *Read-only*.


        Paginated list of file versions, ordered by the date each version was
        created/modified.


        <!--- Copied Spiel from FileVersionDetail -->


        A specific version of an uploaded file.  Note that the version is tied
        to the id/path, so two versions of the same

        file could have completely different contents and formats.  That's on
        you, though.  Don't do that.


        Unlike the OSF File entity which can represent files and folders,
        FileVersions only ever represent files. When a

        file is first uploaded to the "osfstorage" provider through the API it
        is assigned version 1.  Each time it is

        updated through the API, the version number is incremented.  Files
        stored on other providers will follow that

        provider's versioning semantics.


        ##FileVersion Attributes


        <!--- Copied Attributes from FileVersionDetail -->


        For an OSF FileVersion entity the API `type` is "file_versions".


        name          type     description

        =================================================================================

        size          integer  size of file in bytes

        content_type  string   MIME content-type for the file. May be null if
        unavailable.


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        *None*.


        ##Query Params


        + `page=<Int>` -- page number of results to view, default 1


        + `filter[<fieldname>]=<Str>` -- fields and values to filter the search
        results on.


        File versions may be filtered by their `id`, `size`, or `content_type`.


        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: file_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - files
      summary: List of versions for the requested file. *Read-only*.
      operationId: files_versions_list
      responses:
        '200':
          description: ''
  '/{version})/files/{file_id}/versions/{version_id}/':
    get:
      description: >-
        Details about a specific file version. *Read-only*.


        A specific version of an uploaded file.  Note that the version is tied
        to the id/path, so two versions of the same

        file could have completely different contents and formats.  That's on
        you, though.  Don't do that.


        Unlike the OSF File entity which can represent files and folders,
        FileVersions only ever represent files. When a

        file is first uploaded through the API it is assigned version 1.  Each
        time it is updated through the API, the

        version number is incremented.


        ##Attributes


        For an OSF FileVersion entity the API `type` is "file_versions".


        name          type     description

        =================================================================================

        size          integer  size of file in bytes

        content_type  string   MIME content-type for the file. May be null if
        unavailable.


        ##Relationships


        *None*.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: file_id
          in: path
        - description: ''
          required: true
          type: string
          name: version_id
          in: path
      tags:
        - files
      summary: Details about a specific file version. *Read-only*.
      operationId: files_versions_read
      responses:
        '200':
          description: ''
  '/{version})/guids/{guids}/':
    get:
      description: >-
        Find an item by its guid.


        This endpoint will redirect you to the most appropriate URL given an OSF
        GUID. For example, /v2/guids/{node_id},

        will redirect to /v2/nodes/{node_id} while /v2/guids/{user_id} will
        redirect to /v2/users/{user_id}. If the GUID

        does not resolve, you will receive a 410 GONE response. If the GUID
        corresponds to an item that does not have a

        corresponding endpoint (e.g. wiki pages), you will receive a 501
        NOT_IMPLEMENTED response.


        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: guids
          in: path
      tags:
        - guids
      summary: Find an item by its guid.
      operationId: guids_read
      responses:
        '200':
          description: ''
  '/{version})/identifiers/{identifier_id}/':
    get:
      description: >-
        List of identifiers for a specified node. *Read-only*.



        ##Identifier Attributes


        OSF Identifier entities have the "identifiers" `type`.


        name           type                   description

        ----------------------------------------------------------------------------

        category       string                 e.g. 'ark', 'doi'

        value          string                 the identifier value itself


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: identifier_id
          in: path
      tags:
        - identifiers
      summary: List of identifiers for a specified node. *Read-only*.
      operationId: identifiers_read
      responses:
        '200':
          description: ''
  '/{version})/identifiers/{node_id}/identifiers/':
    get:
      description: >-
        List of identifiers for a specified node. *Read-only*.


        ##Identifier Attributes


        OSF Identifier entities have the "identifiers" `type`.


        name           type                   description

        ----------------------------------------------------------------------------

        category       string                 e.g. 'ark', 'doi'

        value          string                 the identifier value itself


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - identifiers
      summary: List of identifiers for a specified node. *Read-only*.
      operationId: identifiers_identifiers_list
      responses:
        '200':
          description: ''
  '/{version})/institutions/':
    get:
      description: >-
        Paginated list of verified Institutions affiliated with COS


        ##Institution Attributes


        OSF Institutions have the "institutions" `type`.


        name           type               description

        =========================================================================

        name           string             title of the institution

        id             string             unique identifier in the OSF

        logo_path      string             a path to the institution's static
        logo


        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - institutions
      summary: Paginated list of verified Institutions affiliated with COS
      operationId: institutions_list
      responses:
        '200':
          description: ''
  '/{version})/institutions/auth/':
    post:
      tags:
        - institutions
      responses:
        '201':
          description: ''
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
      operationId: institutions_auth_create
  '/{version})/institutions/{institution_id}/':
    get:
      description: >-
        Details about a given institution.


        ##Attributes


        OSF Institutions have the "institutions" `type`.


        name           type               description

        =========================================================================

        name           string             title of the institution

        id             string             unique identifier in the OSF

        logo_path      string             a path to the institution's static
        logo


        ##Relationships


        ###Nodes

        List of nodes that have this institution as its primary institution.


        ###Users

        List of users that are affiliated with this institution.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: institution_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
      tags:
        - institutions
      summary: Details about a given institution.
      operationId: institutions_read
      responses:
        '200':
          description: ''
  '/{version})/institutions/{institution_id}/nodes/':
    get:
      description: |-
        Nodes that have selected an institution as their primary institution.

        ##Permissions
        Only public nodes or ones in which current user is a contributor.
      parameters:
        - description: ''
          required: true
          type: string
          name: institution_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - institutions
      summary: Nodes that have selected an institution as their primary institution.
      operationId: institutions_nodes_list
      responses:
        '200':
          description: ''
  '/{version})/institutions/{institution_id}/registrations/':
    get:
      description: Registrations have selected an institution as their primary institution.
      parameters:
        - description: ''
          required: true
          type: string
          name: institution_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - institutions
      summary: Registrations have selected an institution as their primary institution.
      operationId: institutions_registrations_list
      responses:
        '200':
          description: ''
  '/{version})/institutions/{institution_id}/relationships/nodes/':
    get:
      description: >-
        Relationship Endpoint for Institution -> Nodes Relationship


        Used to set, remove, update and retrieve the affiliated_institution of
        nodes with this institution


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: institution_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - institutions
      summary: Relationship Endpoint for Institution -> Nodes Relationship
      operationId: institutions_relationships_nodes_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        Relationship Endpoint for Institution -> Nodes Relationship


        Used to set, remove, update and retrieve the affiliated_institution of
        nodes with this institution


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: institution_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            required:
              - data
            type: object
            properties:
              data:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - institutions
      summary: Relationship Endpoint for Institution -> Nodes Relationship
      operationId: institutions_relationships_nodes_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
    delete:
      description: >-
        Relationship Endpoint for Institution -> Nodes Relationship


        Used to set, remove, update and retrieve the affiliated_institution of
        nodes with this institution


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: institution_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
      tags:
        - institutions
      summary: Relationship Endpoint for Institution -> Nodes Relationship
      operationId: institutions_relationships_nodes_delete
      responses:
        '204':
          description: ''
  '/{version})/institutions/{institution_id}/users/':
    get:
      description: Users that have been authenticated with the institution.
      parameters:
        - description: ''
          required: true
          type: string
          name: institution_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - institutions
      summary: Users that have been authenticated with the institution.
      operationId: institutions_users_list
      responses:
        '200':
          description: ''
  '/{version})/licenses/':
    get:
      description: >-
        List of licenses available to Nodes. *Read-only*.



        ##License Attributes


        OSF License entities have the "licenses" `type`.


        name           type                   description

        ----------------------------------------------------------------------------

        name           string                 Name of the license

        text           string                 Full text of the license



        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        *None*.


        ##Query Params


        Licenses may be filtered by their name and id.


        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - licenses
      summary: List of licenses available to Nodes. *Read-only*.
      operationId: licenses_list
      responses:
        '200':
          description: ''
  '/{version})/licenses/{license_id}/':
    get:
      tags:
        - licenses
      responses:
        '200':
          description: ''
      parameters:
        - description: ''
          required: true
          type: string
          name: license_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
      operationId: licenses_read
  '/{version})/logs/{log_id}/':
    get:
      description: >-
        Details about a given Node Log. *Read-only*.


        On the front end, logs show record and show actions done on the OSF. The
        complete list of loggable actions (in the format {identifier}:
        {description}) is as follows:


        * 'project_created': A Node is created

        * 'project_registered': A Node is registered

        * 'project_deleted': A Node is deleted

        * 'created_from': A Node is created using an existing Node as a template

        * 'pointer_created': A Pointer is created

        * 'pointer_forked': A Pointer is forked

        * 'pointer_removed': A Pointer is removed

        * 'node_removed': A component is deleted

        * 'node_forked': A Node is forked

        ---

        * 'made_public': A Node is made public

        * 'made_private': A Node is made private

        * 'tag_added': A tag is added to a Node

        * 'tag_removed': A tag is removed from a Node

        * 'edit_title': A Node's title is changed

        * 'edit_description': A Node's description is changed

        * 'updated_fields': One or more of a Node's fields are changed

        * 'external_ids_added': An external identifier is added to a Node (e.g.
        DOI, ARK)

        ---

        * 'contributor_added': A Contributor is added to a Node

        * 'contributor_removed': A Contributor is removed from a Node

        * 'contributors_reordered': A Contributor's position in a Node's
        bibliography is changed

        * 'permissions_updated': A Contributor's permissions on a Node are
        changed

        * 'made_contributor_visible': A Contributor is made bibliographically
        visible on a Node

        * 'made_contributor_invisible': A Contributor is made bibliographically
        invisible on a Node

        ---

        * 'wiki_updated': A Node's wiki is updated

        * 'wiki_deleted': A Node's wiki is deleted

        * 'wiki_renamed': A Node's wiki is renamed

        * 'made_wiki_public': A Node's wiki is made public

        * 'made_wiki_private': A Node's wiki is made private

        ---

        * 'addon_added': An add-on is linked to a Node

        * 'addon_removed': An add-on is unlinked from a Node

        * 'addon_file_moved': A File in a Node's linked add-on is moved

        * 'addon_file_copied': A File in a Node's linked add-on is copied

        * 'addon_file_renamed': A File in a Node's linked add-on is renamed

        * 'node_authorized': An addon is authorized for a project

        * 'node_deauthorized': An addon is deauthorized for a project

        * 'folder_created': A Folder is created in a Node's linked add-on

        * 'file_added': A File is added to a Node's linked add-on

        * 'file_updated': A File is updated on a Node's linked add-on

        * 'file_removed': A File is removed from a Node's linked add-on

        * 'file_restored': A File is restored in a Node's linked add-on

        ---

        * 'comment_added': A Comment is added to some item

        * 'comment_removed': A Comment is removed from some item

        * 'comment_updated': A Comment is updated on some item

        ---

        * 'embargo_initiated': An embargoed Registration is proposed on a Node

        * 'embargo_approved': A proposed Embargo of a Node is approved

        * 'embargo_cancelled': A proposed Embargo of a Node is cancelled

        * 'embargo_completed': A proposed Embargo of a Node is completed

        * 'retraction_initiated': A Withdrawal of a Registration is proposed

        * 'retraction_approved': A Withdrawal of a Registration is approved

        * 'retraction_cancelled': A Withdrawal of a Registration is cancelled

        * 'registration_initiated': A Registration of a Node is proposed

        * 'registration_approved': A proposed Registration is approved

        * 'registration_cancelled': A proposed Registration is cancelled

        ---

        * 'node_created': A Node is created (_deprecated_)


        ##Log Attributes


        <!--- Copied Attributes from LogList -->


        OSF Log entities have the "logs" `type`.


        name           type                   description

        ----------------------------------------------------------------------------

        date           iso8601 timestamp      timestamp of Log creation

        action         string                 Log action (see list above)


        ##Relationships


        ###Node


        The node this log belongs to.


        ###Original Node


        The node this log pertains to.


        ###User


        The user who performed the logged action.


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        *None*.


        ##Query Params


        <!--- Copied Query Params from LogList -->


        Logs may be filtered by their `action` and `date`.


        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: log_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
      tags:
        - logs
      summary: Details about a given Node Log. *Read-only*.
      operationId: logs_read
      responses:
        '200':
          description: ''
  '/{version})/metaschemas/':
    get:
      description: >-
        <!--- Copied from MetaSchemaDetail -->


        Metaschemas describe the supplemental questions that accompany a
        registration.

        Only active metaschemas are returned at this endpoint.


        ##Metaschema Attributes


        Metaschemas have the "metaschemas" `type`.


        name                type               description

        ===========================================================================

        name                string             name of registration schema

        schema_version      integer            latest version of the schema

        schema              dictionary         registration schema details



        ##Links`


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        #This request/response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - metaschemas
      summary: <!--- Copied from MetaSchemaDetail -->
      operationId: metaschemas_list
      responses:
        '200':
          description: ''
  '/{version})/metaschemas/{metaschema_id}/':
    get:
      description: >-
        Metaschemas describe the supplemental questions that accompany a
        registration.


        ##Metaschema Attributes


        Metaschemas have the "metaschemas" `type`.


        name                type               description

        ===========================================================================

        name                string             name of registration schema

        schema_version      integer            latest version of the schema

        schema              dictionary         registration schema details


        #This request/response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: metaschema_id
          in: path
      tags:
        - metaschemas
      summary: >-
        Metaschemas describe the supplemental questions that accompany a
        registration.
      operationId: metaschemas_read
      responses:
        '200':
          description: ''
  '/{version})/nodes/':
    get:
      description: >-
        Nodes that represent projects and components. *Writeable*.


        Paginated list of nodes ordered by their `date_modified`.  Each resource
        contains the full representation of the

        node, meaning additional requests to an individual node's detail view
        are not necessary.  Registrations and withdrawn

        registrations cannot be accessed through this endpoint (see registration
        endpoints instead).


        <!--- Copied Spiel from NodeDetail -->


        On the front end, nodes are considered 'projects' or 'components'. The
        difference between a project and a component

        is that a project is the top-level node, and components are children of
        the project. There is also a [category

        field](/v2/#osf-node-categories) that includes 'project' as an option.
        The categorization essentially determines

        which icon is displayed by the node in the front-end UI and helps with
        search organization. Top-level nodes may have

        a category other than project, and children nodes may have a category of
        project.


        ##Node Attributes


        <!--- Copied Attributes from NodeDetail -->


        OSF Node entities have the "nodes" `type`.


        name                            type               description

        =================================================================================

        title                           string             title of project or
        component

        description                     string             description of the
        node

        category                        string             node category, must
        be one of the allowed values

        date_created                    iso8601 timestamp  timestamp that the
        node was created

        date_modified                   iso8601 timestamp  timestamp when the
        node was last updated

        tags                            array of strings   list of tags that
        describe the node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings   list of strings
        representing the permissions for the current user on this node

        registration                    boolean            is this a
        registration? (always false - may be deprecated in future versions)

        fork                            boolean            is this node a fork
        of another node?

        public                          boolean            has this node been
        made publicly-visible?

        preprint                        boolean            is this a preprint?

        collection                      boolean            is this a collection?
        (always false - may be deprecated in future versions)

        node_license                    object             details of the
        license applied to the node

        year                        string             date range of the license

        copyright_holders           array of strings   holders of the applied
        license


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        ###Creating New Nodes
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: Nodes that represent projects and components. *Writeable*.
      operationId: nodes_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        Nodes that represent projects and components. *Writeable*.


        Paginated list of nodes ordered by their `date_modified`.  Each resource
        contains the full representation of the

        node, meaning additional requests to an individual node's detail view
        are not necessary.  Registrations and withdrawn

        registrations cannot be accessed through this endpoint (see registration
        endpoints instead).


        <!--- Copied Spiel from NodeDetail -->


        On the front end, nodes are considered 'projects' or 'components'. The
        difference between a project and a component

        is that a project is the top-level node, and components are children of
        the project. There is also a [category

        field](/v2/#osf-node-categories) that includes 'project' as an option.
        The categorization essentially determines

        which icon is displayed by the node in the front-end UI and helps with
        search organization. Top-level nodes may have

        a category other than project, and children nodes may have a category of
        project.


        ##Node Attributes


        <!--- Copied Attributes from NodeDetail -->


        OSF Node entities have the "nodes" `type`.


        name                            type               description

        =================================================================================

        title                           string             title of project or
        component

        description                     string             description of the
        node

        category                        string             node category, must
        be one of the allowed values

        date_created                    iso8601 timestamp  timestamp that the
        node was created

        date_modified                   iso8601 timestamp  timestamp when the
        node was last updated

        tags                            array of strings   list of tags that
        describe the node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings   list of strings
        representing the permissions for the current user on this node

        registration                    boolean            is this a
        registration? (always false - may be deprecated in future versions)

        fork                            boolean            is this node a fork
        of another node?

        public                          boolean            has this node been
        made publicly-visible?

        preprint                        boolean            is this a preprint?

        collection                      boolean            is this a collection?
        (always false - may be deprecated in future versions)

        node_license                    object             details of the
        license applied to the node

        year                        string             date range of the license

        copyright_holders           array of strings   holders of the applied
        license


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        ###Creating New Nodes
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            required:
              - type
              - title
              - category
            type: object
            properties:
              category:
                type: string
                description: >-
                  Choices: 'analysis', 'communication', 'data', 'hypothesis',
                  'instrumentation', 'methods and measures', 'procedure',
                  'project', 'software', 'other', ''
              description:
                type: string
                description: ''
              license:
                type: string
                description: ''
              tags:
                type: string
                description: ''
              type:
                type: string
                description: ''
              title:
                type: string
                description: ''
              template_from:
                type: string
                description: >-
                  Specify a node id for a node you would like to use as a
                  template for the new node. Templating is like forking, except
                  that you do not copy the files, only the project structure.
                  Some information is changed on the top level project by
                  submitting the appropriate fields in the request body, and
                  some information will not change. By default, the description
                  will be cleared and the project will be made private.
              node_license:
                type: object
                description: ''
              public:
                type: boolean
                description: >-
                  Nodes that are made public will give read-only access to
                  everyone. Private nodes require explicit read permission.
                  Write and admin access are the same for public and private
                  nodes. Administrators on a parent node have implicit read
                  permissions for all child nodes
          name: data
          in: body
      tags:
        - nodes
      summary: Nodes that represent projects and components. *Writeable*.
      operationId: nodes_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/nodes/{node_id}/':
    get:
      description: >-
        Details about a given node (project or component). *Writeable*.


        A registration or withdrawn registration cannot be accessed through this
        endpoint. See Registration Detail endpoint.


        On the front end, nodes are considered 'projects' or 'components'. The
        difference between a project and a component

        is that a project is the top-level node, and components are children of
        the project. There is also a [category

        field](/v2/#osf-node-categories) that includes 'project' as an option.
        The categorization essentially determines

        which icon is displayed by the node in the front-end UI and helps with
        search organization. Top-level nodes may have

        a category other than project, and children nodes may have a category of
        project.


        ###Permissions


        Nodes that are made public will give read-only access to everyone.
        Private nodes require explicit read

        permission. Write and admin access are the same for public and private
        nodes. Administrators on a parent node have

        implicit read permissions for all child nodes.


        ##Attributes


        OSF Node entities have the "nodes" `type`.


        name                            type                description

        =================================================================================

        title                           string              title of project or
        component

        description                     string              description of the
        node

        category                        string              node category, must
        be one of the allowed values

        date_created                    iso8601 timestamp   timestamp that the
        node was created

        date_modified                   iso8601 timestamp   timestamp when the
        node was last updated

        tags                            array of strings    list of tags that
        describe the node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings    list of strings
        representing the permissions for the current user on this node

        registration                    boolean             is this a
        registration? (always false - may be deprecated in future versions)

        fork                            boolean             is this node a fork
        of another node?

        public                          boolean             has this node been
        made publicly-visible?

        collection                      boolean             is this a
        collection? (always false - may be deprecated in future versions)

        node_license                    object             details of the
        license applied to the node

        year                            string             date range of the
        license

        copyright_holders               array of strings   holders of the
        applied license


        ##Relationships


        ###Children


        List of nodes that are children of this node.  New child nodes may be
        added through this endpoint.


        ###Comments


        List of comments on this node.  New comments can be left on the node
        through this endpoint.


        ###Contributors


        List of users who are contributors to this node. Contributors may have
        "read", "write", or "admin" permissions.

        A node must always have at least one "admin" contributor.  Contributors
        may be added via this endpoint.


        ###Draft Registrations


        List of draft registrations of the current node.


        ###Files


        List of top-level folders (actually cloud-storage providers) associated
        with this node. This is the starting point

        for accessing the actual files stored within this node.


        ###Forked From


        If this node was forked from another node, the canonical endpoint of the
        node that was forked from will be

        available in the `/forked_from/links/related/href` key.  Otherwise, it
        will be null.


        ###Logs


        List of read-only log actions pertaining to the node.


        ###Node Links


        List of links (pointers) to other nodes on the OSF.  Node links can be
        added through this endpoint.


        ###Parent


        If this node is a child node of another node, the parent's canonical
        endpoint will be available in the

        `/parent/links/related/href` key.  Otherwise, it will be null.


        ###Registrations


        List of registrations of the current node.


        ###Root


        Returns the top-level node associated with the current node.  If the
        current node is the top-level node, the root is

        the current node.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
      tags:
        - nodes
      summary: Details about a given node (project or component). *Writeable*.
      operationId: nodes_read
      responses:
        '200':
          description: ''
    put:
      description: >-
        Details about a given node (project or component). *Writeable*.


        A registration or withdrawn registration cannot be accessed through this
        endpoint. See Registration Detail endpoint.


        On the front end, nodes are considered 'projects' or 'components'. The
        difference between a project and a component

        is that a project is the top-level node, and components are children of
        the project. There is also a [category

        field](/v2/#osf-node-categories) that includes 'project' as an option.
        The categorization essentially determines

        which icon is displayed by the node in the front-end UI and helps with
        search organization. Top-level nodes may have

        a category other than project, and children nodes may have a category of
        project.


        ###Permissions


        Nodes that are made public will give read-only access to everyone.
        Private nodes require explicit read

        permission. Write and admin access are the same for public and private
        nodes. Administrators on a parent node have

        implicit read permissions for all child nodes.


        ##Attributes


        OSF Node entities have the "nodes" `type`.


        name                            type                description

        =================================================================================

        title                           string              title of project or
        component

        description                     string              description of the
        node

        category                        string              node category, must
        be one of the allowed values

        date_created                    iso8601 timestamp   timestamp that the
        node was created

        date_modified                   iso8601 timestamp   timestamp when the
        node was last updated

        tags                            array of strings    list of tags that
        describe the node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings    list of strings
        representing the permissions for the current user on this node

        registration                    boolean             is this a
        registration? (always false - may be deprecated in future versions)

        fork                            boolean             is this node a fork
        of another node?

        public                          boolean             has this node been
        made publicly-visible?

        collection                      boolean             is this a
        collection? (always false - may be deprecated in future versions)

        node_license                    object             details of the
        license applied to the node

        year                            string             date range of the
        license

        copyright_holders               array of strings   holders of the
        applied license


        ##Relationships


        ###Children


        List of nodes that are children of this node.  New child nodes may be
        added through this endpoint.


        ###Comments


        List of comments on this node.  New comments can be left on the node
        through this endpoint.


        ###Contributors


        List of users who are contributors to this node. Contributors may have
        "read", "write", or "admin" permissions.

        A node must always have at least one "admin" contributor.  Contributors
        may be added via this endpoint.


        ###Draft Registrations


        List of draft registrations of the current node.


        ###Files


        List of top-level folders (actually cloud-storage providers) associated
        with this node. This is the starting point

        for accessing the actual files stored within this node.


        ###Forked From


        If this node was forked from another node, the canonical endpoint of the
        node that was forked from will be

        available in the `/forked_from/links/related/href` key.  Otherwise, it
        will be null.


        ###Logs


        List of read-only log actions pertaining to the node.


        ###Node Links


        List of links (pointers) to other nodes on the OSF.  Node links can be
        added through this endpoint.


        ###Parent


        If this node is a child node of another node, the parent's canonical
        endpoint will be available in the

        `/parent/links/related/href` key.  Otherwise, it will be null.


        ###Registrations


        List of registrations of the current node.


        ###Root


        Returns the top-level node associated with the current node.  If the
        current node is the top-level node, the root is

        the current node.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - id
              - type
              - title
              - category
            type: object
            properties:
              category:
                type: string
                description: >-
                  Choices: 'analysis', 'communication', 'data', 'hypothesis',
                  'instrumentation', 'methods and measures', 'procedure',
                  'project', 'software', 'other', ''
              description:
                type: string
                description: ''
              license:
                type: string
                description: ''
              tags:
                type: string
                description: ''
              node_license:
                type: object
                description: ''
              title:
                type: string
                description: ''
              public:
                type: boolean
                description: >-
                  Nodes that are made public will give read-only access to
                  everyone. Private nodes require explicit read permission.
                  Write and admin access are the same for public and private
                  nodes. Administrators on a parent node have implicit read
                  permissions for all child nodes
              template_from:
                type: string
                description: >-
                  Specify a node id for a node you would like to use as a
                  template for the new node. Templating is like forking, except
                  that you do not copy the files, only the project structure.
                  Some information is changed on the top level project by
                  submitting the appropriate fields in the request body, and
                  some information will not change. By default, the description
                  will be cleared and the project will be made private.
              type:
                type: string
                description: ''
              id:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Details about a given node (project or component). *Writeable*.
      operationId: nodes_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Details about a given node (project or component). *Writeable*.


        A registration or withdrawn registration cannot be accessed through this
        endpoint. See Registration Detail endpoint.


        On the front end, nodes are considered 'projects' or 'components'. The
        difference between a project and a component

        is that a project is the top-level node, and components are children of
        the project. There is also a [category

        field](/v2/#osf-node-categories) that includes 'project' as an option.
        The categorization essentially determines

        which icon is displayed by the node in the front-end UI and helps with
        search organization. Top-level nodes may have

        a category other than project, and children nodes may have a category of
        project.


        ###Permissions


        Nodes that are made public will give read-only access to everyone.
        Private nodes require explicit read

        permission. Write and admin access are the same for public and private
        nodes. Administrators on a parent node have

        implicit read permissions for all child nodes.


        ##Attributes


        OSF Node entities have the "nodes" `type`.


        name                            type                description

        =================================================================================

        title                           string              title of project or
        component

        description                     string              description of the
        node

        category                        string              node category, must
        be one of the allowed values

        date_created                    iso8601 timestamp   timestamp that the
        node was created

        date_modified                   iso8601 timestamp   timestamp when the
        node was last updated

        tags                            array of strings    list of tags that
        describe the node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings    list of strings
        representing the permissions for the current user on this node

        registration                    boolean             is this a
        registration? (always false - may be deprecated in future versions)

        fork                            boolean             is this node a fork
        of another node?

        public                          boolean             has this node been
        made publicly-visible?

        collection                      boolean             is this a
        collection? (always false - may be deprecated in future versions)

        node_license                    object             details of the
        license applied to the node

        year                            string             date range of the
        license

        copyright_holders               array of strings   holders of the
        applied license


        ##Relationships


        ###Children


        List of nodes that are children of this node.  New child nodes may be
        added through this endpoint.


        ###Comments


        List of comments on this node.  New comments can be left on the node
        through this endpoint.


        ###Contributors


        List of users who are contributors to this node. Contributors may have
        "read", "write", or "admin" permissions.

        A node must always have at least one "admin" contributor.  Contributors
        may be added via this endpoint.


        ###Draft Registrations


        List of draft registrations of the current node.


        ###Files


        List of top-level folders (actually cloud-storage providers) associated
        with this node. This is the starting point

        for accessing the actual files stored within this node.


        ###Forked From


        If this node was forked from another node, the canonical endpoint of the
        node that was forked from will be

        available in the `/forked_from/links/related/href` key.  Otherwise, it
        will be null.


        ###Logs


        List of read-only log actions pertaining to the node.


        ###Node Links


        List of links (pointers) to other nodes on the OSF.  Node links can be
        added through this endpoint.


        ###Parent


        If this node is a child node of another node, the parent's canonical
        endpoint will be available in the

        `/parent/links/related/href` key.  Otherwise, it will be null.


        ###Registrations


        List of registrations of the current node.


        ###Root


        Returns the top-level node associated with the current node.  If the
        current node is the top-level node, the root is

        the current node.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            type: object
            properties:
              category:
                type: string
                description: >-
                  Choices: 'analysis', 'communication', 'data', 'hypothesis',
                  'instrumentation', 'methods and measures', 'procedure',
                  'project', 'software', 'other', ''
              description:
                type: string
                description: ''
              license:
                type: string
                description: ''
              tags:
                type: string
                description: ''
              node_license:
                type: object
                description: ''
              title:
                type: string
                description: ''
              public:
                type: boolean
                description: >-
                  Nodes that are made public will give read-only access to
                  everyone. Private nodes require explicit read permission.
                  Write and admin access are the same for public and private
                  nodes. Administrators on a parent node have implicit read
                  permissions for all child nodes
              template_from:
                type: string
                description: >-
                  Specify a node id for a node you would like to use as a
                  template for the new node. Templating is like forking, except
                  that you do not copy the files, only the project structure.
                  Some information is changed on the top level project by
                  submitting the appropriate fields in the request body, and
                  some information will not change. By default, the description
                  will be cleared and the project will be made private.
              type:
                type: string
                description: ''
              id:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Details about a given node (project or component). *Writeable*.
      operationId: nodes_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    delete:
      description: >-
        Details about a given node (project or component). *Writeable*.


        A registration or withdrawn registration cannot be accessed through this
        endpoint. See Registration Detail endpoint.


        On the front end, nodes are considered 'projects' or 'components'. The
        difference between a project and a component

        is that a project is the top-level node, and components are children of
        the project. There is also a [category

        field](/v2/#osf-node-categories) that includes 'project' as an option.
        The categorization essentially determines

        which icon is displayed by the node in the front-end UI and helps with
        search organization. Top-level nodes may have

        a category other than project, and children nodes may have a category of
        project.


        ###Permissions


        Nodes that are made public will give read-only access to everyone.
        Private nodes require explicit read

        permission. Write and admin access are the same for public and private
        nodes. Administrators on a parent node have

        implicit read permissions for all child nodes.


        ##Attributes


        OSF Node entities have the "nodes" `type`.


        name                            type                description

        =================================================================================

        title                           string              title of project or
        component

        description                     string              description of the
        node

        category                        string              node category, must
        be one of the allowed values

        date_created                    iso8601 timestamp   timestamp that the
        node was created

        date_modified                   iso8601 timestamp   timestamp when the
        node was last updated

        tags                            array of strings    list of tags that
        describe the node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings    list of strings
        representing the permissions for the current user on this node

        registration                    boolean             is this a
        registration? (always false - may be deprecated in future versions)

        fork                            boolean             is this node a fork
        of another node?

        public                          boolean             has this node been
        made publicly-visible?

        collection                      boolean             is this a
        collection? (always false - may be deprecated in future versions)

        node_license                    object             details of the
        license applied to the node

        year                            string             date range of the
        license

        copyright_holders               array of strings   holders of the
        applied license


        ##Relationships


        ###Children


        List of nodes that are children of this node.  New child nodes may be
        added through this endpoint.


        ###Comments


        List of comments on this node.  New comments can be left on the node
        through this endpoint.


        ###Contributors


        List of users who are contributors to this node. Contributors may have
        "read", "write", or "admin" permissions.

        A node must always have at least one "admin" contributor.  Contributors
        may be added via this endpoint.


        ###Draft Registrations


        List of draft registrations of the current node.


        ###Files


        List of top-level folders (actually cloud-storage providers) associated
        with this node. This is the starting point

        for accessing the actual files stored within this node.


        ###Forked From


        If this node was forked from another node, the canonical endpoint of the
        node that was forked from will be

        available in the `/forked_from/links/related/href` key.  Otherwise, it
        will be null.


        ###Logs


        List of read-only log actions pertaining to the node.


        ###Node Links


        List of links (pointers) to other nodes on the OSF.  Node links can be
        added through this endpoint.


        ###Parent


        If this node is a child node of another node, the parent's canonical
        endpoint will be available in the

        `/parent/links/related/href` key.  Otherwise, it will be null.


        ###Registrations


        List of registrations of the current node.


        ###Root


        Returns the top-level node associated with the current node.  If the
        current node is the top-level node, the root is

        the current node.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
      tags:
        - nodes
      summary: Details about a given node (project or component). *Writeable*.
      operationId: nodes_delete
      responses:
        '204':
          description: ''
  '/{version})/nodes/{node_id}/addons/':
    get:
      description: >-
        List of addons connected to this node *Read-only*


        Paginated list of node addons ordered by their `id` or
        `addon_short_name`. Attributes other than

        `enabled` will be `null` if the addon is not enabled for this node.


        ## <Addon\>NodeSettings Attributes


        OSF <Addon\>NodeSettings entities have the "node_addons" `type`, and
        their `id` indicates the addon

        service provider (eg. `box`, `googledrive`, etc).


        name                    type                description

        ======================================================================================================

        external_account_id     string              _id of the associated
        ExternalAccount, if any

        configured              boolean             has this node been
        configured with a folder?

        enabled                 boolean             has a node settings object
        been associated with this node?

        folder_id               string              folder id of linked folder,
        from third-party service

        node_has_auth           boolean             is this node fully
        authorized to use an ExternalAccount?

        folder_path             boolean             folder path of linked
        folder, from third-party service


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: List of addons connected to this node *Read-only*
      operationId: nodes_addons_list
      responses:
        '200':
          description: ''
  '/{version})/nodes/{node_id}/addons/{provider}/':
    get:
      description: >-
        Detail of individual addon connected to this node *Writeable*.


        Attributes other than `enabled` will be null if the addon is not enabled
        for this node.


        ##Permissions


        <Addon>NodeSettings that are attached to public Nodes will give
        read-only access to everyone. Private nodes require explicit read

        permission. Write and admin access are the same for public and private
        nodes. Administrators on a parent node have

        implicit read permissions for all child nodes.


        Any users with write or admin access to the node are able to deauthorize
        an enabled addon, but only the addon authorizer is able

        to change the configuration (i.e. selected folder) of an
        already-configured <Addon>NodeSettings entity.


        ## <Addon>NodeSettings Attributes


        OSF <Addon>NodeSettings entities have the "node_addons" `type`, and
        their `id` indicates the addon

        service provider (eg. `box`, `googledrive`, etc).


        name                    type                description

        ======================================================================================================

        external_account_id     string              _id of the associated
        ExternalAccount, if any

        configured              boolean             has this node been
        configured with a folder?

        enabled                 boolean             has a node settings object
        been associated with this node?

        folder_id               string              folder id of linked folder,
        from third-party service

        node_has_auth           boolean             is this node fully
        authorized to use an ExternalAccount?

        folder_path             boolean             folder path of linked
        folder, from third-party service

        url                     string              Specific to the `forward`
        addon

        label                   string              Specific to the `forward`
        addon


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: provider
          in: path
      tags:
        - nodes
      summary: Detail of individual addon connected to this node *Writeable*.
      operationId: nodes_addons_read
      responses:
        '200':
          description: ''
    post:
      description: >-
        Detail of individual addon connected to this node *Writeable*.


        Attributes other than `enabled` will be null if the addon is not enabled
        for this node.


        ##Permissions


        <Addon>NodeSettings that are attached to public Nodes will give
        read-only access to everyone. Private nodes require explicit read

        permission. Write and admin access are the same for public and private
        nodes. Administrators on a parent node have

        implicit read permissions for all child nodes.


        Any users with write or admin access to the node are able to deauthorize
        an enabled addon, but only the addon authorizer is able

        to change the configuration (i.e. selected folder) of an
        already-configured <Addon>NodeSettings entity.


        ## <Addon>NodeSettings Attributes


        OSF <Addon>NodeSettings entities have the "node_addons" `type`, and
        their `id` indicates the addon

        service provider (eg. `box`, `googledrive`, etc).


        name                    type                description

        ======================================================================================================

        external_account_id     string              _id of the associated
        ExternalAccount, if any

        configured              boolean             has this node been
        configured with a folder?

        enabled                 boolean             has a node settings object
        been associated with this node?

        folder_id               string              folder id of linked folder,
        from third-party service

        node_has_auth           boolean             is this node fully
        authorized to use an ExternalAccount?

        folder_path             boolean             folder path of linked
        folder, from third-party service

        url                     string              Specific to the `forward`
        addon

        label                   string              Specific to the `forward`
        addon


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: provider
          in: path
        - schema:
            type: object
            properties:
              url:
                type: string
                description: ''
              label:
                type: string
                description: ''
              external_account_id:
                type: string
                description: ''
              folder_id:
                type: string
                description: ''
              folder_path:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Detail of individual addon connected to this node *Writeable*.
      operationId: nodes_addons_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
    put:
      description: >-
        Detail of individual addon connected to this node *Writeable*.


        Attributes other than `enabled` will be null if the addon is not enabled
        for this node.


        ##Permissions


        <Addon>NodeSettings that are attached to public Nodes will give
        read-only access to everyone. Private nodes require explicit read

        permission. Write and admin access are the same for public and private
        nodes. Administrators on a parent node have

        implicit read permissions for all child nodes.


        Any users with write or admin access to the node are able to deauthorize
        an enabled addon, but only the addon authorizer is able

        to change the configuration (i.e. selected folder) of an
        already-configured <Addon>NodeSettings entity.


        ## <Addon>NodeSettings Attributes


        OSF <Addon>NodeSettings entities have the "node_addons" `type`, and
        their `id` indicates the addon

        service provider (eg. `box`, `googledrive`, etc).


        name                    type                description

        ======================================================================================================

        external_account_id     string              _id of the associated
        ExternalAccount, if any

        configured              boolean             has this node been
        configured with a folder?

        enabled                 boolean             has a node settings object
        been associated with this node?

        folder_id               string              folder id of linked folder,
        from third-party service

        node_has_auth           boolean             is this node fully
        authorized to use an ExternalAccount?

        folder_path             boolean             folder path of linked
        folder, from third-party service

        url                     string              Specific to the `forward`
        addon

        label                   string              Specific to the `forward`
        addon


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: provider
          in: path
        - schema:
            type: object
            properties:
              url:
                type: string
                description: ''
              label:
                type: string
                description: ''
              external_account_id:
                type: string
                description: ''
              folder_id:
                type: string
                description: ''
              folder_path:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Detail of individual addon connected to this node *Writeable*.
      operationId: nodes_addons_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Detail of individual addon connected to this node *Writeable*.


        Attributes other than `enabled` will be null if the addon is not enabled
        for this node.


        ##Permissions


        <Addon>NodeSettings that are attached to public Nodes will give
        read-only access to everyone. Private nodes require explicit read

        permission. Write and admin access are the same for public and private
        nodes. Administrators on a parent node have

        implicit read permissions for all child nodes.


        Any users with write or admin access to the node are able to deauthorize
        an enabled addon, but only the addon authorizer is able

        to change the configuration (i.e. selected folder) of an
        already-configured <Addon>NodeSettings entity.


        ## <Addon>NodeSettings Attributes


        OSF <Addon>NodeSettings entities have the "node_addons" `type`, and
        their `id` indicates the addon

        service provider (eg. `box`, `googledrive`, etc).


        name                    type                description

        ======================================================================================================

        external_account_id     string              _id of the associated
        ExternalAccount, if any

        configured              boolean             has this node been
        configured with a folder?

        enabled                 boolean             has a node settings object
        been associated with this node?

        folder_id               string              folder id of linked folder,
        from third-party service

        node_has_auth           boolean             is this node fully
        authorized to use an ExternalAccount?

        folder_path             boolean             folder path of linked
        folder, from third-party service

        url                     string              Specific to the `forward`
        addon

        label                   string              Specific to the `forward`
        addon


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: provider
          in: path
        - schema:
            type: object
            properties:
              url:
                type: string
                description: ''
              label:
                type: string
                description: ''
              external_account_id:
                type: string
                description: ''
              folder_id:
                type: string
                description: ''
              folder_path:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Detail of individual addon connected to this node *Writeable*.
      operationId: nodes_addons_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    delete:
      description: >-
        Detail of individual addon connected to this node *Writeable*.


        Attributes other than `enabled` will be null if the addon is not enabled
        for this node.


        ##Permissions


        <Addon>NodeSettings that are attached to public Nodes will give
        read-only access to everyone. Private nodes require explicit read

        permission. Write and admin access are the same for public and private
        nodes. Administrators on a parent node have

        implicit read permissions for all child nodes.


        Any users with write or admin access to the node are able to deauthorize
        an enabled addon, but only the addon authorizer is able

        to change the configuration (i.e. selected folder) of an
        already-configured <Addon>NodeSettings entity.


        ## <Addon>NodeSettings Attributes


        OSF <Addon>NodeSettings entities have the "node_addons" `type`, and
        their `id` indicates the addon

        service provider (eg. `box`, `googledrive`, etc).


        name                    type                description

        ======================================================================================================

        external_account_id     string              _id of the associated
        ExternalAccount, if any

        configured              boolean             has this node been
        configured with a folder?

        enabled                 boolean             has a node settings object
        been associated with this node?

        folder_id               string              folder id of linked folder,
        from third-party service

        node_has_auth           boolean             is this node fully
        authorized to use an ExternalAccount?

        folder_path             boolean             folder path of linked
        folder, from third-party service

        url                     string              Specific to the `forward`
        addon

        label                   string              Specific to the `forward`
        addon


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: provider
          in: path
      tags:
        - nodes
      summary: Detail of individual addon connected to this node *Writeable*.
      operationId: nodes_addons_delete
      responses:
        '204':
          description: ''
  '/{version})/nodes/{node_id}/addons/{provider}/folders/':
    get:
      description: >-
        List of folders that this node can connect to *Read-only*.


        Paginated list of folders retrieved from the associated third-party
        service


        ##Permissions


        <Addon> Folders are visible only to the addon authorizer.


        ## <Addon> Folder Attributes


        OSF <Addon\> Folder entities have the "node_addon_folders" `type`, and
        their `id` indicates the folder_id

        according to the associated service provider (eg. `box`, `googledrive`,
        etc).


        name        type        description

        ======================================================================================================

        path        string      path of this folder, according to third-party
        service

        kind        string      `"folder"`, typically.

        provider    string      `short_name` of third-party service provider

        name        string      name of this folder

        folder_id   string      id of this folder, according to third-party
        service


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: provider
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: List of folders that this node can connect to *Read-only*.
      operationId: nodes_addons_folders_list
      responses:
        '200':
          description: ''
  '/{version})/nodes/{node_id}/children/':
    get:
      description: >-
        Children of the current node. *Writeable*.


        This will get the next level of child nodes for the selected node if the
        current user has read access for those

        nodes. Creating a node via this endpoint will behave the same as the
        [node list endpoint](/v2/nodes/), but the new

        node will have the selected node set as its parent.


        ##Node Attributes


        <!--- Copied Attributes from NodeDetail -->


        OSF Node entities have the "nodes" `type`.


        name                            type                description

        =================================================================================

        title                           string              title of project or
        component

        description                     string              description of the
        node

        category                        string              node category, must
        be one of the allowed values

        date_created                    iso8601 timestamp   timestamp that the
        node was created

        date_modified                   iso8601 timestamp   timestamp when the
        node was last updated

        tags                            array of strings    list of tags that
        describe the node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings    list of strings
        representing the permissions for the current user on this node

        registration                    boolean             is this a
        registration? (always false - may be deprecated in future versions)

        fork                            boolean             is this node a fork
        of another node?

        public                          boolean             has this node been
        made publicly-visible?

        collection                      boolean             is this a
        collection? (always false - may be deprecated in future versions)


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        ###Create Child Node


        <!--- Copied Creating New Node from NodeList -->
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: Children of the current node. *Writeable*.
      operationId: nodes_children_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        Children of the current node. *Writeable*.


        This will get the next level of child nodes for the selected node if the
        current user has read access for those

        nodes. Creating a node via this endpoint will behave the same as the
        [node list endpoint](/v2/nodes/), but the new

        node will have the selected node set as its parent.


        ##Node Attributes


        <!--- Copied Attributes from NodeDetail -->


        OSF Node entities have the "nodes" `type`.


        name                            type                description

        =================================================================================

        title                           string              title of project or
        component

        description                     string              description of the
        node

        category                        string              node category, must
        be one of the allowed values

        date_created                    iso8601 timestamp   timestamp that the
        node was created

        date_modified                   iso8601 timestamp   timestamp when the
        node was last updated

        tags                            array of strings    list of tags that
        describe the node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings    list of strings
        representing the permissions for the current user on this node

        registration                    boolean             is this a
        registration? (always false - may be deprecated in future versions)

        fork                            boolean             is this node a fork
        of another node?

        public                          boolean             has this node been
        made publicly-visible?

        collection                      boolean             is this a
        collection? (always false - may be deprecated in future versions)


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        ###Create Child Node


        <!--- Copied Creating New Node from NodeList -->
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - type
              - title
              - category
            type: object
            properties:
              category:
                type: string
                description: >-
                  Choices: 'analysis', 'communication', 'data', 'hypothesis',
                  'instrumentation', 'methods and measures', 'procedure',
                  'project', 'software', 'other', ''
              description:
                type: string
                description: ''
              license:
                type: string
                description: ''
              tags:
                type: string
                description: ''
              type:
                type: string
                description: ''
              title:
                type: string
                description: ''
              template_from:
                type: string
                description: >-
                  Specify a node id for a node you would like to use as a
                  template for the new node. Templating is like forking, except
                  that you do not copy the files, only the project structure.
                  Some information is changed on the top level project by
                  submitting the appropriate fields in the request body, and
                  some information will not change. By default, the description
                  will be cleared and the project will be made private.
              node_license:
                type: object
                description: ''
              public:
                type: boolean
                description: >-
                  Nodes that are made public will give read-only access to
                  everyone. Private nodes require explicit read permission.
                  Write and admin access are the same for public and private
                  nodes. Administrators on a parent node have implicit read
                  permissions for all child nodes
          name: data
          in: body
      tags:
        - nodes
      summary: Children of the current node. *Writeable*.
      operationId: nodes_children_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/nodes/{node_id}/citation/':
    get:
      description: >-
        The node citation for a node in CSL format *read only*


        ##Note

        **This API endpoint is under active development, and is subject to
        change in the future**


        ##NodeCitationDetail Attributes


        name                     type                description

        =================================================================================

        id                       string               unique ID for the citation

        title                    string               title of project or
        component

        author                   list                 list of authors for the
        work

        publisher                string               publisher - most always
        'Open Science Framework'

        type                     string               type of citation - web

        doi                      string               doi of the resource
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: The node citation for a node in CSL format *read only*
      operationId: nodes_citation_list
      responses:
        '200':
          description: ''
  '/{version})/nodes/{node_id}/citation/{style_id}/':
    get:
      description: >-
        The node citation for a node in a specific style's format *read only*


        ##Note

        **This API endpoint is under active development, and is subject to
        change in the future**


        ##NodeCitationDetail Attributes


        name                     type                description

        =================================================================================

        citation                string               complete citation for a
        node in the given style
      parameters:
        - description: ''
          required: true
          type: string
          name: style_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
      tags:
        - nodes
      summary: The node citation for a node in a specific style's format *read only*
      operationId: nodes_citation_read
      responses:
        '200':
          description: ''
  '/{version})/nodes/{node_id}/citations/':
    get:
      description: |-
        List of alternative citations for a project.

        ##Actions

        ###Create Alternative Citation
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: List of alternative citations for a project.
      operationId: nodes_citations_list
      responses:
        '200':
          description: ''
    post:
      description: |-
        List of alternative citations for a project.

        ##Actions

        ###Create Alternative Citation
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - type
              - name
              - text
            type: object
            properties:
              text:
                type: string
                description: ''
              type:
                type: string
                description: ''
              name:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: List of alternative citations for a project.
      operationId: nodes_citations_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/nodes/{node_id}/citations/{citation_id}/':
    get:
      description: |-
        Details about an alternative citations for a project.

        ##Actions

        ###Update Alternative Citation
      parameters:
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: citation_id
          in: path
      tags:
        - nodes
      summary: Details about an alternative citations for a project.
      operationId: nodes_citations_read
      responses:
        '200':
          description: ''
    put:
      description: |-
        Details about an alternative citations for a project.

        ##Actions

        ###Update Alternative Citation
      parameters:
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: citation_id
          in: path
        - schema:
            required:
              - type
              - name
              - text
            type: object
            properties:
              text:
                type: string
                description: ''
              type:
                type: string
                description: ''
              name:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Details about an alternative citations for a project.
      operationId: nodes_citations_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: |-
        Details about an alternative citations for a project.

        ##Actions

        ###Update Alternative Citation
      parameters:
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: citation_id
          in: path
        - schema:
            type: object
            properties:
              text:
                type: string
                description: ''
              type:
                type: string
                description: ''
              name:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Details about an alternative citations for a project.
      operationId: nodes_citations_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    delete:
      description: |-
        Details about an alternative citations for a project.

        ##Actions

        ###Update Alternative Citation
      parameters:
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: citation_id
          in: path
      tags:
        - nodes
      summary: Details about an alternative citations for a project.
      operationId: nodes_citations_delete
      responses:
        '204':
          description: ''
  '/{version})/nodes/{node_id}/comments/':
    get:
      description: >-
        List of comments on a node. *Writeable*.


        Paginated list of comments ordered by their `date_created.` Each
        resource contains the full representation of the

        comment, meaning additional requests to an individual comment's detail
        view are not necessary.


        Note that if an anonymous view_only key is being used, the user
        relationship will not be exposed.


        ###Permissions


        Comments on public nodes are given read-only access to everyone. If the
        node comment-level is "private",

        only contributors have permission to comment. If the comment-level is
        "public" any logged-in OSF user can comment.

        Comments on private nodes are only visible to contributors and
        administrators on the parent node.


        ##Attributes


        OSF comment entities have the "comments" `type`.


        name           type               description

        =================================================================================

        content        string             content of the comment

        date_created   iso8601 timestamp  timestamp that the comment was created

        date_modified  iso8601 timestamp  timestamp when the comment was last
        updated

        modified       boolean            has this comment been edited?

        deleted        boolean            is this comment deleted?

        is_abuse       boolean            has this comment been reported by the
        current user?

        has_children   boolean            does this comment have replies?

        can_edit       boolean            can the current user edit this
        comment?


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: List of comments on a node. *Writeable*.
      operationId: nodes_comments_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        List of comments on a node. *Writeable*.


        Paginated list of comments ordered by their `date_created.` Each
        resource contains the full representation of the

        comment, meaning additional requests to an individual comment's detail
        view are not necessary.


        Note that if an anonymous view_only key is being used, the user
        relationship will not be exposed.


        ###Permissions


        Comments on public nodes are given read-only access to everyone. If the
        node comment-level is "private",

        only contributors have permission to comment. If the comment-level is
        "public" any logged-in OSF user can comment.

        Comments on private nodes are only visible to contributors and
        administrators on the parent node.


        ##Attributes


        OSF comment entities have the "comments" `type`.


        name           type               description

        =================================================================================

        content        string             content of the comment

        date_created   iso8601 timestamp  timestamp that the comment was created

        date_modified  iso8601 timestamp  timestamp when the comment was last
        updated

        modified       boolean            has this comment been edited?

        deleted        boolean            is this comment deleted?

        is_abuse       boolean            has this comment been reported by the
        current user?

        has_children   boolean            does this comment have replies?

        can_edit       boolean            can the current user edit this
        comment?


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - type
              - content
            type: object
            properties:
              content:
                type: string
                description: ''
              type:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: List of comments on a node. *Writeable*.
      operationId: nodes_comments_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/nodes/{node_id}/contributors/':
    get:
      description: >-
        Contributors (users) for a node.


        Contributors are users who can make changes to the node or, in the case
        of private nodes,

        have read access to the node. Contributors are divided between
        'bibliographic' and 'non-bibliographic'

        contributors. From a permissions standpoint, both are the same, but
        bibliographic contributors

        are included in citations, while non-bibliographic contributors are not
        included in citations.


        Note that if an anonymous view_only key is being used, the user
        relationship will not be exposed and the id for

        the contributor will be an empty string.


        ##Node Contributor Attributes


        <!--- Copied Attributes from NodeContributorDetail -->


        `type` is "contributors"


        name                        type     description

        ======================================================================================================

        bibliographic               boolean  Whether the user will be included
        in citations for this node. Default is true.

        permission                  string   User permission level. Must be
        "read", "write", or "admin". Default is "write".

        unregistered_contributor    string   Contributor's assigned name if
        contributor hasn't yet claimed account


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Relationships


        ###Users


        This endpoint shows the contributor user detail and is automatically
        embedded.


        ##Actions


        ###Adding Contributors
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: Contributors (users) for a node.
      operationId: nodes_contributors_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        Contributors (users) for a node.


        Contributors are users who can make changes to the node or, in the case
        of private nodes,

        have read access to the node. Contributors are divided between
        'bibliographic' and 'non-bibliographic'

        contributors. From a permissions standpoint, both are the same, but
        bibliographic contributors

        are included in citations, while non-bibliographic contributors are not
        included in citations.


        Note that if an anonymous view_only key is being used, the user
        relationship will not be exposed and the id for

        the contributor will be an empty string.


        ##Node Contributor Attributes


        <!--- Copied Attributes from NodeContributorDetail -->


        `type` is "contributors"


        name                        type     description

        ======================================================================================================

        bibliographic               boolean  Whether the user will be included
        in citations for this node. Default is true.

        permission                  string   User permission level. Must be
        "read", "write", or "admin". Default is "write".

        unregistered_contributor    string   Contributor's assigned name if
        contributor hasn't yet claimed account


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Relationships


        ###Users


        This endpoint shows the contributor user detail and is automatically
        embedded.


        ##Actions


        ###Adding Contributors
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - type
            type: object
            properties:
              index:
                type: integer
                description: ''
              bibliographic:
                type: boolean
                description: >-
                  Whether the user will be included in citations for this node
                  or not.
              permission:
                type: string
                description: >-
                  User permission level. Must be "read", "write", or "admin".
                  Defaults to "write".
              email:
                type: string
                description: ''
              full_name:
                type: string
                description: ''
              type:
                type: string
                description: ''
              id:
                type: string
                description: >-
                  Unique contributor ID. Has the form "<node-id>-<user-id>".
                  Example: "abc12-xyz34"
          name: data
          in: body
      tags:
        - nodes
      summary: Contributors (users) for a node.
      operationId: nodes_contributors_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/nodes/{node_id}/contributors/{user_id}/':
    get:
      description: >-
        Detail of a contributor for a node. *Writeable*.


        Contributors are users who can make changes to the node or, in the case
        of private nodes,

        have read access to the node. Contributors are divided between
        'bibliographic' and 'non-bibliographic'

        contributors. From a permissions standpoint, both are the same, but
        bibliographic contributors

        are included in citations, while non-bibliographic contributors are not
        included in citations.


        Note that if an anonymous view_only key is being used, the user
        relationship will not be exposed and the id for

        the contributor will be an empty string.


        Contributors can be viewed, removed, and have their permissions and
        bibliographic status changed via this

        endpoint.


        ##Attributes


        `type` is "contributors"


        name                        type     description

        ======================================================================================================

        bibliographic               boolean  Whether the user will be included
        in citations for this node. Default is true.

        permission                  string   User permission level. Must be
        "read", "write", or "admin". Default is "write".

        unregistered_contributor    string   Contributor's assigned name if
        contributor hasn't yet claimed account

        index                       integer  The position in the list of
        contributors reflected in the bibliography. Zero Indexed.


        ##Relationships


        ###Users


        This endpoint shows the contributor user detail.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
      tags:
        - nodes
      summary: Detail of a contributor for a node. *Writeable*.
      operationId: nodes_contributors_read
      responses:
        '200':
          description: ''
    put:
      description: >-
        Detail of a contributor for a node. *Writeable*.


        Contributors are users who can make changes to the node or, in the case
        of private nodes,

        have read access to the node. Contributors are divided between
        'bibliographic' and 'non-bibliographic'

        contributors. From a permissions standpoint, both are the same, but
        bibliographic contributors

        are included in citations, while non-bibliographic contributors are not
        included in citations.


        Note that if an anonymous view_only key is being used, the user
        relationship will not be exposed and the id for

        the contributor will be an empty string.


        Contributors can be viewed, removed, and have their permissions and
        bibliographic status changed via this

        endpoint.


        ##Attributes


        `type` is "contributors"


        name                        type     description

        ======================================================================================================

        bibliographic               boolean  Whether the user will be included
        in citations for this node. Default is true.

        permission                  string   User permission level. Must be
        "read", "write", or "admin". Default is "write".

        unregistered_contributor    string   Contributor's assigned name if
        contributor hasn't yet claimed account

        index                       integer  The position in the list of
        contributors reflected in the bibliography. Zero Indexed.


        ##Relationships


        ###Users


        This endpoint shows the contributor user detail.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - id
              - type
            type: object
            properties:
              index:
                type: integer
                description: ''
              type:
                type: string
                description: ''
              id:
                type: string
                description: >-
                  Unique contributor ID. Has the form "<node-id>-<user-id>".
                  Example: "abc12-xyz34"
              bibliographic:
                type: boolean
                description: >-
                  Whether the user will be included in citations for this node
                  or not.
              permission:
                type: string
                description: >-
                  User permission level. Must be "read", "write", or "admin".
                  Defaults to "write".
          name: data
          in: body
      tags:
        - nodes
      summary: Detail of a contributor for a node. *Writeable*.
      operationId: nodes_contributors_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Detail of a contributor for a node. *Writeable*.


        Contributors are users who can make changes to the node or, in the case
        of private nodes,

        have read access to the node. Contributors are divided between
        'bibliographic' and 'non-bibliographic'

        contributors. From a permissions standpoint, both are the same, but
        bibliographic contributors

        are included in citations, while non-bibliographic contributors are not
        included in citations.


        Note that if an anonymous view_only key is being used, the user
        relationship will not be exposed and the id for

        the contributor will be an empty string.


        Contributors can be viewed, removed, and have their permissions and
        bibliographic status changed via this

        endpoint.


        ##Attributes


        `type` is "contributors"


        name                        type     description

        ======================================================================================================

        bibliographic               boolean  Whether the user will be included
        in citations for this node. Default is true.

        permission                  string   User permission level. Must be
        "read", "write", or "admin". Default is "write".

        unregistered_contributor    string   Contributor's assigned name if
        contributor hasn't yet claimed account

        index                       integer  The position in the list of
        contributors reflected in the bibliography. Zero Indexed.


        ##Relationships


        ###Users


        This endpoint shows the contributor user detail.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            type: object
            properties:
              index:
                type: integer
                description: ''
              type:
                type: string
                description: ''
              id:
                type: string
                description: >-
                  Unique contributor ID. Has the form "<node-id>-<user-id>".
                  Example: "abc12-xyz34"
              bibliographic:
                type: boolean
                description: >-
                  Whether the user will be included in citations for this node
                  or not.
              permission:
                type: string
                description: >-
                  User permission level. Must be "read", "write", or "admin".
                  Defaults to "write".
          name: data
          in: body
      tags:
        - nodes
      summary: Detail of a contributor for a node. *Writeable*.
      operationId: nodes_contributors_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    delete:
      description: >-
        Detail of a contributor for a node. *Writeable*.


        Contributors are users who can make changes to the node or, in the case
        of private nodes,

        have read access to the node. Contributors are divided between
        'bibliographic' and 'non-bibliographic'

        contributors. From a permissions standpoint, both are the same, but
        bibliographic contributors

        are included in citations, while non-bibliographic contributors are not
        included in citations.


        Note that if an anonymous view_only key is being used, the user
        relationship will not be exposed and the id for

        the contributor will be an empty string.


        Contributors can be viewed, removed, and have their permissions and
        bibliographic status changed via this

        endpoint.


        ##Attributes


        `type` is "contributors"


        name                        type     description

        ======================================================================================================

        bibliographic               boolean  Whether the user will be included
        in citations for this node. Default is true.

        permission                  string   User permission level. Must be
        "read", "write", or "admin". Default is "write".

        unregistered_contributor    string   Contributor's assigned name if
        contributor hasn't yet claimed account

        index                       integer  The position in the list of
        contributors reflected in the bibliography. Zero Indexed.


        ##Relationships


        ###Users


        This endpoint shows the contributor user detail.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
      tags:
        - nodes
      summary: Detail of a contributor for a node. *Writeable*.
      operationId: nodes_contributors_delete
      responses:
        '204':
          description: ''
  '/{version})/nodes/{node_id}/draft_registrations/':
    get:
      description: >-
        Draft registrations of the current node.


        <!--- Copied partially from NodeDraftRegistrationDetail -->


        Draft registrations contain the supplemental registration questions that
        accompany a registration. A registration

        is a frozen version of the project that can never be edited or deleted
        but can be withdrawn.

        Your original project remains editable but will now have the
        registration linked to it.


        ###Permissions


        Users must have admin permission on the node in order to view or create
        a draft registration.


        ##Draft Registration Attributes



        Draft Registrations have the "draft_registrations" `type`.


        name                       type               description

        ===========================================================================

        registration_supplement    string             id of registration_schema,
        must be an active schema

        registration_metadata      dictionary         dictionary of question ids
        and responses from registration schema

        datetime_initiated         iso8601 timestamp  timestamp that the draft
        was created

        datetime_updated           iso8601 timestamp  timestamp when the draft
        was last updated


        ##Relationships


        ###Branched From


        Node that the draft is branched from.  The node endpoint is available in
        `/branched_from/links/related/href`.


        ###Initiator


        User who initiated the draft registration.  The user endpoint is
        available in `/initiator/links/related/href`.


        ##Registration Schema


        Detailed registration schema.  The schema endpoint is available in
        `/registration_schema/links/related/href`.


        ##Actions


        ###Create Draft Registration
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: Draft registrations of the current node.
      operationId: nodes_draft_registrations_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        Draft registrations of the current node.


        <!--- Copied partially from NodeDraftRegistrationDetail -->


        Draft registrations contain the supplemental registration questions that
        accompany a registration. A registration

        is a frozen version of the project that can never be edited or deleted
        but can be withdrawn.

        Your original project remains editable but will now have the
        registration linked to it.


        ###Permissions


        Users must have admin permission on the node in order to view or create
        a draft registration.


        ##Draft Registration Attributes



        Draft Registrations have the "draft_registrations" `type`.


        name                       type               description

        ===========================================================================

        registration_supplement    string             id of registration_schema,
        must be an active schema

        registration_metadata      dictionary         dictionary of question ids
        and responses from registration schema

        datetime_initiated         iso8601 timestamp  timestamp that the draft
        was created

        datetime_updated           iso8601 timestamp  timestamp when the draft
        was last updated


        ##Relationships


        ###Branched From


        Node that the draft is branched from.  The node endpoint is available in
        `/branched_from/links/related/href`.


        ###Initiator


        User who initiated the draft registration.  The user endpoint is
        available in `/initiator/links/related/href`.


        ##Registration Schema


        Detailed registration schema.  The schema endpoint is available in
        `/registration_schema/links/related/href`.


        ##Actions


        ###Create Draft Registration
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - type
              - registration_supplement
            type: object
            properties:
              registration_supplement:
                type: string
                description: ''
              registration_metadata:
                type: string
                description: ''
              type:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Draft registrations of the current node.
      operationId: nodes_draft_registrations_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/nodes/{node_id}/draft_registrations/{draft_id}/':
    get:
      description: >-
        Details about a given draft registration. *Writeable*.


        Draft registrations contain the supplemental registration questions that
        accompany a registration. A registration

        is a frozen version of the project that can never be edited or deleted
        but can be withdrawn.  Answer the questions

        in the draft registration with PUT/PATCH requests until you are ready to
        submit.  Final submission will include sending the

        draft registration id as part of a POST request to the Node
        Registrations endpoint.


        ###Permissions


        Users must have admin permission on the node in order to view, update,
        or delete a draft registration.


        ##Attributes


        Draft Registrations have the "draft_registrations" `type`.


        name                       type               description

        ===========================================================================

        registration_supplement    string             id of registration_schema,
        must be an active schema

        registration_metadata      dictionary         dictionary of question ids
        and responses from registration schema

        datetime_initiated         iso8601 timestamp  timestamp that the draft
        was created

        datetime_updated           iso8601 timestamp  timestamp when the draft
        was last updated


        ##Relationships


        ###Branched From


        Node that the draft is branched from.  The node endpoint is available in
        `/branched_from/links/related/href`.


        ###Initiator


        User who initiated the draft registration.  The user endpoint is
        available in `/initiator/links/related/href`.


        ##Registration Schema


        Detailed registration schema.  The schema endpoint is available in
        `/registration_schema/links/related/href`.


        ##Actions


        ###Update Draft Registration
      parameters:
        - description: ''
          required: true
          type: string
          name: draft_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
      tags:
        - nodes
      summary: Details about a given draft registration. *Writeable*.
      operationId: nodes_draft_registrations_read
      responses:
        '200':
          description: ''
    put:
      description: >-
        Details about a given draft registration. *Writeable*.


        Draft registrations contain the supplemental registration questions that
        accompany a registration. A registration

        is a frozen version of the project that can never be edited or deleted
        but can be withdrawn.  Answer the questions

        in the draft registration with PUT/PATCH requests until you are ready to
        submit.  Final submission will include sending the

        draft registration id as part of a POST request to the Node
        Registrations endpoint.


        ###Permissions


        Users must have admin permission on the node in order to view, update,
        or delete a draft registration.


        ##Attributes


        Draft Registrations have the "draft_registrations" `type`.


        name                       type               description

        ===========================================================================

        registration_supplement    string             id of registration_schema,
        must be an active schema

        registration_metadata      dictionary         dictionary of question ids
        and responses from registration schema

        datetime_initiated         iso8601 timestamp  timestamp that the draft
        was created

        datetime_updated           iso8601 timestamp  timestamp when the draft
        was last updated


        ##Relationships


        ###Branched From


        Node that the draft is branched from.  The node endpoint is available in
        `/branched_from/links/related/href`.


        ###Initiator


        User who initiated the draft registration.  The user endpoint is
        available in `/initiator/links/related/href`.


        ##Registration Schema


        Detailed registration schema.  The schema endpoint is available in
        `/registration_schema/links/related/href`.


        ##Actions


        ###Update Draft Registration
      parameters:
        - description: ''
          required: true
          type: string
          name: draft_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - id
              - type
              - registration_metadata
            type: object
            properties:
              registration_metadata:
                type: string
                description: ''
              type:
                type: string
                description: ''
              id:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Details about a given draft registration. *Writeable*.
      operationId: nodes_draft_registrations_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Details about a given draft registration. *Writeable*.


        Draft registrations contain the supplemental registration questions that
        accompany a registration. A registration

        is a frozen version of the project that can never be edited or deleted
        but can be withdrawn.  Answer the questions

        in the draft registration with PUT/PATCH requests until you are ready to
        submit.  Final submission will include sending the

        draft registration id as part of a POST request to the Node
        Registrations endpoint.


        ###Permissions


        Users must have admin permission on the node in order to view, update,
        or delete a draft registration.


        ##Attributes


        Draft Registrations have the "draft_registrations" `type`.


        name                       type               description

        ===========================================================================

        registration_supplement    string             id of registration_schema,
        must be an active schema

        registration_metadata      dictionary         dictionary of question ids
        and responses from registration schema

        datetime_initiated         iso8601 timestamp  timestamp that the draft
        was created

        datetime_updated           iso8601 timestamp  timestamp when the draft
        was last updated


        ##Relationships


        ###Branched From


        Node that the draft is branched from.  The node endpoint is available in
        `/branched_from/links/related/href`.


        ###Initiator


        User who initiated the draft registration.  The user endpoint is
        available in `/initiator/links/related/href`.


        ##Registration Schema


        Detailed registration schema.  The schema endpoint is available in
        `/registration_schema/links/related/href`.


        ##Actions


        ###Update Draft Registration
      parameters:
        - description: ''
          required: true
          type: string
          name: draft_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            type: object
            properties:
              registration_metadata:
                type: string
                description: ''
              type:
                type: string
                description: ''
              id:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Details about a given draft registration. *Writeable*.
      operationId: nodes_draft_registrations_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    delete:
      description: >-
        Details about a given draft registration. *Writeable*.


        Draft registrations contain the supplemental registration questions that
        accompany a registration. A registration

        is a frozen version of the project that can never be edited or deleted
        but can be withdrawn.  Answer the questions

        in the draft registration with PUT/PATCH requests until you are ready to
        submit.  Final submission will include sending the

        draft registration id as part of a POST request to the Node
        Registrations endpoint.


        ###Permissions


        Users must have admin permission on the node in order to view, update,
        or delete a draft registration.


        ##Attributes


        Draft Registrations have the "draft_registrations" `type`.


        name                       type               description

        ===========================================================================

        registration_supplement    string             id of registration_schema,
        must be an active schema

        registration_metadata      dictionary         dictionary of question ids
        and responses from registration schema

        datetime_initiated         iso8601 timestamp  timestamp that the draft
        was created

        datetime_updated           iso8601 timestamp  timestamp when the draft
        was last updated


        ##Relationships


        ###Branched From


        Node that the draft is branched from.  The node endpoint is available in
        `/branched_from/links/related/href`.


        ###Initiator


        User who initiated the draft registration.  The user endpoint is
        available in `/initiator/links/related/href`.


        ##Registration Schema


        Detailed registration schema.  The schema endpoint is available in
        `/registration_schema/links/related/href`.


        ##Actions


        ###Update Draft Registration
      parameters:
        - description: ''
          required: true
          type: string
          name: draft_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
      tags:
        - nodes
      summary: Details about a given draft registration. *Writeable*.
      operationId: nodes_draft_registrations_delete
      responses:
        '204':
          description: ''
  '/{version})/nodes/{node_id}/files/':
    get:
      description: >-
        List of storage providers enabled for this node. *Read-only*.


        Users of the OSF may access their data on a [number of
        cloud-storage](/v2/#storage-providers) services that have

        integrations with the OSF.  We call these "providers".  By default every
        node has access to the OSF-provided

        storage but may use as many of the supported providers as desired.  This
        endpoint lists all of the providers that are

        configured for this node.  If you want to add more, you will need to do
        that in the Open Science Framework front end

        for now.


        In the OSF filesystem model, providers are treated as folders, but with
        special properties that distinguish them

        from regular folders.  Every provider folder is considered a root
        folder, and may not be deleted through the regular

        file API.  To see the contents of the provider, issue a GET request to
        the `/relationships/files/links/related/href`

        attribute of the provider resource.  The `new_folder` and `upload`
        actions are handled by another service called

        WaterButler, whose response format differs slightly from the OSF's.


        <!--- Copied from FileDetail.Spiel -->


        ### Waterbutler Entities


        When an action is performed against a WaterButler endpoint, it will
        generally respond with a file entity, a folder

        entity, or no content.


        ####File Entity


        name          type       description

        =========================================================================

        name          string     name of the file

        path          string     unique identifier for this file entity for this

        project and storage provider. may not end with '/'

        materialized  string     the full path of the file relative to the
        storage

        root.  may not end with '/'

        kind          string     "file"

        etag          string     etag - http caching identifier w/o wrapping
        quotes

        modified      timestamp  last modified timestamp - format depends on
        provider

        contentType   string     MIME-type when available

        provider      string     id of provider e.g. "osfstorage", "s3",
        "googledrive".

        equivalent to addon_short_name on the OSF

        size          integer    size of file in bytes

        extra         object     may contain additional data beyond what's
        described here,

        depending on the provider

        version     integer    version number of file. will be 1 on initial
        upload

        downloads   integer    count of the number times the file has been
        downloaded

        hashes      object

        md5       string     md5 hash of file

        sha256    string     SHA-256 hash of file


        ####Folder Entity


        name          type    description

        ======================================================================

        name          string  name of the folder

        path          string  unique identifier for this folder entity for this

        project and storage provider. must end with '/'

        materialized  string  the full path of the folder relative to the
        storage

        root.  must end with '/'

        kind          string  "folder"

        etag          string  etag - http caching identifier w/o wrapping quotes

        extra         object  varies depending on provider


        ##Provider Attributes


        `type` is "files"


        name      type    description

        =================================================================================

        name      string  name of the provider

        kind      string  type of this file/folder.  always "folder"

        path      path    relative path of this folder within the provider
        filesys. always "/"

        node      string  node this provider belongs to

        provider  string  provider id, same as "name"


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        <!--- Copied from FileDetail.Actions -->


        ###Create Subfolder (*folders*)
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: List of storage providers enabled for this node. *Read-only*.
      operationId: nodes_files_list
      responses:
        '200':
          description: ''
  '/{version})/nodes/{node_id}/files/providers/{provider}/':
    get:
      tags:
        - nodes
      responses:
        '200':
          description: ''
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: provider
          in: path
      operationId: nodes_files_providers_read
  '/{version})/nodes/{node_id}/files/{provider}{path})':
    get:
      description: >-
        Files attached to a node for a given provider. *Read-only*.


        This gives a list of all of the files and folders that are attached to
        your project for the given storage provider.

        If the provider is not "osfstorage", the metadata for the files in the
        storage will be retrieved and cached whenever

        this endpoint is accessed.  To see the cached metadata, GET the endpoint
        for the file directly (available through

        its `/links/info` attribute).


        When a create/update/delete action is performed against the file or
        folder, the action is handled by an external

        service called WaterButler.  The WaterButler response format differs
        slightly from the OSF's.


        <!--- Copied from FileDetail.Spiel -->


        ### Waterbutler Entities


        When an action is performed against a WaterButler endpoint, it will
        generally respond with a file entity, a folder

        entity, or no content.


        ####File Entity


        name                        type              description

        ==========================================================================================================

        name                        string            name of the file

        path                        string            unique identifier for this
        file entity for this

        project and storage provider. may not end with '/'

        materialized                string            the full path of the file
        relative to the storage

        root.  may not end with '/'

        kind                        string            "file"

        etag                        string            etag - http caching
        identifier w/o wrapping quotes

        modified                    timestamp         last modified timestamp -
        format depends on provider

        contentType                 string            MIME-type when available

        provider                    string            id of provider e.g.
        "osfstorage", "s3", "googledrive".

        equivalent to addon_short_name on the OSF

        size                        integer           size of file in bytes

        current_version             integer           current file version


        current_user_can_comment    boolean           Whether the current user
        is allowed to post comments


        tags                        array of strings  list of tags that
        describes the file (osfstorage only)

        extra                       object            may contain additional
        data beyond what's described here,

        depending on the provider

        version                     integer           version number of file.
        will be 1 on initial upload

        hashes                      object

        md5                         string            md5 hash of file

        sha256                      string            SHA-256 hash of file


        ####Folder Entity


        name          type    description

        ======================================================================

        name          string  name of the folder

        path          string  unique identifier for this folder entity for this

        project and storage provider. must end with '/'

        materialized  string  the full path of the folder relative to the
        storage

        root.  must end with '/'

        kind          string  "folder"

        etag          string  etag - http caching identifier w/o wrapping quotes

        extra         object  varies depending on provider


        ##File Attributes


        <!--- Copied Attributes from FileDetail -->


        For an OSF File entity, the `type` is "files" regardless of whether the
        entity is actually a file or folder.  They

        can be distinguished by the `kind` attribute.  Files and folders use the
        same representation, but some attributes may

        be null for one kind but not the other. `size` will be null for
        folders.  A list of storage provider keys can be

        found [here](/v2/#storage-providers).


        name          type               description

        ===================================================================================================

        guid              string             OSF GUID for this file (if one has
        been assigned)

        name              string             name of the file or folder; used
        for display

        kind              string             "file" or "folder"

        path              string             same as for corresponding
        WaterButler entity

        materialized_path string             the unix-style path to the file
        relative to the provider root

        size              integer            size of file in bytes, null for
        folders

        provider          string             storage provider for this file.
        "osfstorage" if stored on the

        OSF.  other examples include "s3" for Amazon S3, "googledrive"

        for Google Drive, "box" for Box.com.

        last_touched      iso8601 timestamp  last time the metadata for the file
        was retrieved. only

        applies to non-OSF storage providers.

        date_modified     iso8601 timestamp  timestamp of when this file was
        last updated*

        date_created      iso8601 timestamp  timestamp of when this file was
        created*

        extra             object             may contain additional data beyond
        what's described here,

        depending on the provider

        hashes          object

        md5           string             md5 hash of file, null for folders

        sha256        string             SHA-256 hash of file, null for folders

        downloads       integer            number of times the file has been
        downloaded (for osfstorage files)


        * A note on timestamps: for files stored in osfstorage, `date_created`
        refers to the time the file was

        first uploaded to osfstorage, and `date_modified` is the time the file
        was last updated while in osfstorage.

        Other providers may or may not provide this information, but if they do
        it will correspond to the provider's

        semantics for created/modified times.  These timestamps may also be
        stale; metadata retrieved via the File Detail

        endpoint is cached.  The `last_touched` field describes the last time
        the metadata was retrieved from the external

        provider.  To force a metadata update, access the parent folder via its
        Node Files List endpoint.


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        <!--- Copied from FileDetail.Actions -->


        The `links` property of the response provides endpoints for common file
        operations. The currently-supported actions
      parameters:
        - description: ''
          required: true
          type: string
          name: path
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: provider
          in: path
      tags:
        - nodes
      summary: Files attached to a node for a given provider. *Read-only*.
      operationId: nodes_files_read
      responses:
        '200':
          description: ''
  '/{version})/nodes/{node_id}/forks/':
    get:
      description: >-
        Forks of the current node. *Writeable*.


        Paginated list of the current node's forks ordered by their
        `forked_date`. Forks are copies of projects that you can

        change without affecting the original project.  When creating a fork,
        your fork will will only contain public components or those

        for which you are a contributor.  Private components that you do not
        have access to will not be forked.


        ##Node Fork Attributes


        <!--- Copied Attributes from NodeDetail with exception of forked_date-->


        OSF Node Fork entities have the "nodes" `type`.


        name                        type               description

        ===============================================================================================================================

        title                       string             title of project or
        component

        description                 string             description of the node

        category                    string             node category, must be
        one of the allowed values

        date_created                iso8601 timestamp  timestamp that the node
        was created

        date_modified               iso8601 timestamp  timestamp when the node
        was last updated

        tags                        array of strings   list of tags that
        describe the node

        registration                boolean            has this project been
        registered? (always False)

        collection                  boolean            is this node a collection
        (always False)

        fork                        boolean            is this node a fork of
        another node? (always True)

        public                      boolean            has this node been made
        publicly-visible?

        forked_date                 iso8601 timestamp  timestamp when the node
        was forked

        current_user_can_comment    boolean            Whether the current user
        is allowed to post comments

        current_user_permissions    array of strings   List of strings
        representing the permissions for the current user on this node


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        ###Create Node Fork
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: Forks of the current node. *Writeable*.
      operationId: nodes_forks_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        Forks of the current node. *Writeable*.


        Paginated list of the current node's forks ordered by their
        `forked_date`. Forks are copies of projects that you can

        change without affecting the original project.  When creating a fork,
        your fork will will only contain public components or those

        for which you are a contributor.  Private components that you do not
        have access to will not be forked.


        ##Node Fork Attributes


        <!--- Copied Attributes from NodeDetail with exception of forked_date-->


        OSF Node Fork entities have the "nodes" `type`.


        name                        type               description

        ===============================================================================================================================

        title                       string             title of project or
        component

        description                 string             description of the node

        category                    string             node category, must be
        one of the allowed values

        date_created                iso8601 timestamp  timestamp that the node
        was created

        date_modified               iso8601 timestamp  timestamp when the node
        was last updated

        tags                        array of strings   list of tags that
        describe the node

        registration                boolean            has this project been
        registered? (always False)

        collection                  boolean            is this node a collection
        (always False)

        fork                        boolean            is this node a fork of
        another node? (always True)

        public                      boolean            has this node been made
        publicly-visible?

        forked_date                 iso8601 timestamp  timestamp when the node
        was forked

        current_user_can_comment    boolean            Whether the current user
        is allowed to post comments

        current_user_permissions    array of strings   List of strings
        representing the permissions for the current user on this node


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        ###Create Node Fork
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - type
            type: object
            properties:
              description:
                type: string
                description: ''
              license:
                type: string
                description: ''
              tags:
                type: string
                description: ''
              template_from:
                type: string
                description: >-
                  Specify a node id for a node you would like to use as a
                  template for the new node. Templating is like forking, except
                  that you do not copy the files, only the project structure.
                  Some information is changed on the top level project by
                  submitting the appropriate fields in the request body, and
                  some information will not change. By default, the description
                  will be cleared and the project will be made private.
              title:
                type: string
                description: ''
              type:
                type: string
                description: ''
              node_license:
                type: object
                description: ''
              public:
                type: boolean
                description: >-
                  Nodes that are made public will give read-only access to
                  everyone. Private nodes require explicit read permission.
                  Write and admin access are the same for public and private
                  nodes. Administrators on a parent node have implicit read
                  permissions for all child nodes
          name: data
          in: body
      tags:
        - nodes
      summary: Forks of the current node. *Writeable*.
      operationId: nodes_forks_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/nodes/{node_id}/identifiers/':
    get:
      description: >-
        List of identifiers for a specified node. *Read-only*.


        ##Identifier Attributes


        OSF Identifier entities have the "identifiers" `type`.


        name           type                   description

        ----------------------------------------------------------------------------

        category       string                 e.g. 'ark', 'doi'

        value          string                 the identifier value itself


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: List of identifiers for a specified node. *Read-only*.
      operationId: nodes_identifiers_list
      responses:
        '200':
          description: ''
  '/{version})/nodes/{node_id}/institutions/':
    get:
      description: >-
        Detail of the affiliated institutions a node has, if any. Returns [] if
        the node has no

        affiliated institution.


        ##Attributes


        OSF Institutions have the "institutions" `type`.


        name           type               description

        =========================================================================

        name           string             title of the institution

        id             string             unique identifier in the OSF

        logo_path      string             a path to the institution's static
        logo




        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: >-
        Detail of the affiliated institutions a node has, if any. Returns [] if
        the node has no
      operationId: nodes_institutions_list
      responses:
        '200':
          description: ''
  '/{version})/nodes/{node_id}/linked_nodes/':
    get:
      description: >-
        List of nodes linked to this node. *Read-only*.


        Linked nodes are the nodes pointed to by node links. This view will
        probably replace node_links in the near future.


        <!--- Copied Spiel from NodeDetail -->


        On the front end, nodes are considered 'projects' or 'components'. The
        difference between a project and a component

        is that a project is the top-level node, and components are children of
        the project. There is also a [category

        field](/v2/#osf-node-categories) that includes 'project' as an option.
        The categorization essentially determines

        which icon is displayed by the node in the front-end UI and helps with
        search organization. Top-level nodes may have

        a category other than project, and children nodes may have a category of
        project.


        ##Linked Node Attributes


        <!--- Copied Attributes from NodeDetail -->


        OSF Node entities have the "nodes" `type`.


        name           type               description

        =================================================================================

        title          string             title of project or component

        description    string             description of the node

        category       string             node category, must be one of the
        allowed values

        date_created   iso8601 timestamp  timestamp that the node was created

        date_modified  iso8601 timestamp  timestamp when the node was last
        updated

        tags           array of strings   list of tags that describe the node

        registration   boolean            is this is a registration?

        collection     boolean            is this node a collection of other
        nodes?

        public         boolean            has this node been made
        publicly-visible?


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Query Params


        + `page=<Int>` -- page number of results to view, default 1


        + `filter[<fieldname>]=<Str>` -- fields and values to filter the search
        results on.


        Nodes may be filtered by their `title`, `category`, `description`,
        `public`, `registration`, or `tags`.  `title`,

        `description`, and `category` are string fields and will be filtered
        using simple substring matching.  `public` and

        `registration` are booleans, and can be filtered using truthy values,
        such as `true`, `false`, `0`, or `1`.  Note

        that quoting `true` or `false` in the query will cause the match to fail
        regardless.  `tags` is an array of simple strings.


        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: List of nodes linked to this node. *Read-only*.
      operationId: nodes_linked_nodes_list
      responses:
        '200':
          description: ''
  '/{version})/nodes/{node_id}/logs/':
    get:
      description: >-
        List of Logs associated with a given Node. *Read-only*.


        <!--- Copied Description from NodeLogDetail -->


        Paginated list of Logs ordered by their `date`. This includes the Logs
        of the specified Node as well as the logs of that Node's children that
        the current user has access to.


        Note that if an anonymous view_only key is being used, the user
        relationship will not be exposed.


        On the front end, logs show record and show actions done on the OSF. The
        complete list of loggable actions (in the format {identifier}:
        {description}) is as follows:


        * 'project_created': A Node is created

        * 'project_registered': A Node is registered

        * 'project_deleted': A Node is deleted

        * 'created_from': A Node is created using an existing Node as a template

        * 'pointer_created': A Pointer is created

        * 'pointer_forked': A Pointer is forked

        * 'pointer_removed': A Pointer is removed

        * 'node_removed': A component is deleted

        * 'node_forked': A Node is forked

        ===

        * 'made_public': A Node is made public

        * 'made_private': A Node is made private

        * 'tag_added': A tag is added to a Node

        * 'tag_removed': A tag is removed from a Node

        * 'edit_title': A Node's title is changed

        * 'edit_description': A Node's description is changed

        * 'updated_fields': One or more of a Node's fields are changed

        * 'external_ids_added': An external identifier is added to a Node (e.g.
        DOI, ARK)

        ===

        * 'contributor_added': A Contributor is added to a Node

        * 'contributor_removed': A Contributor is removed from a Node

        * 'contributors_reordered': A Contributor's position in a Node's
        bibliography is changed

        * 'permissions_updated': A Contributor's permissions on a Node are
        changed

        * 'made_contributor_visible': A Contributor is made bibliographically
        visible on a Node

        * 'made_contributor_invisible': A Contributor is made bibliographically
        invisible on a Node

        ===

        * 'wiki_updated': A Node's wiki is updated

        * 'wiki_deleted': A Node's wiki is deleted

        * 'wiki_renamed': A Node's wiki is renamed

        * 'made_wiki_public': A Node's wiki is made public

        * 'made_wiki_private': A Node's wiki is made private

        ===

        * 'addon_added': An add-on is linked to a Node

        * 'addon_removed': An add-on is unlinked from a Node

        * 'addon_file_moved': A File in a Node's linked add-on is moved

        * 'addon_file_copied': A File in a Node's linked add-on is copied

        * 'addon_file_renamed': A File in a Node's linked add-on is renamed

        * 'node_authorized': An addon is authorized for a project

        * 'node_deauthorized': An addon is deauthorized for a project

        * 'folder_created': A Folder is created in a Node's linked add-on

        * 'file_added': A File is added to a Node's linked add-on

        * 'file_updated': A File is updated on a Node's linked add-on

        * 'file_removed': A File is removed from a Node's linked add-on

        * 'file_restored': A File is restored in a Node's linked add-on

        ===

        * 'comment_added': A Comment is added to some item

        * 'comment_removed': A Comment is removed from some item

        * 'comment_updated': A Comment is updated on some item

        ===

        * 'embargo_initiated': An embargoed Registration is proposed on a Node

        * 'embargo_approved': A proposed Embargo of a Node is approved

        * 'embargo_cancelled': A proposed Embargo of a Node is cancelled

        * 'embargo_completed': A proposed Embargo of a Node is completed

        * 'retraction_initiated': A Withdrawal of a Registration is proposed

        * 'retraction_approved': A Withdrawal of a Registration is approved

        * 'retraction_cancelled': A Withdrawal of a Registration is cancelled

        * 'registration_initiated': A Registration of a Node is proposed

        * 'registration_approved': A proposed Registration is approved

        * 'registration_cancelled': A proposed Registration is cancelled

        ===

        * 'node_created': A Node is created (_deprecated_)


        ##Log Attributes


        <!--- Copied Attributes from LogList -->


        OSF Log entities have the "logs" `type`.


        name           type                   description

        ============================================================================

        date           iso8601 timestamp      timestamp of Log creation

        action         string                 Log action (see list above)


        ##Relationships


        ###Node


        The node this log belongs to.


        ###User


        The user who performed the logged action.


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        ##Query Params


        <!--- Copied Query Params from LogList -->


        Logs may be filtered by their `action` and `date`.


        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: List of Logs associated with a given Node. *Read-only*.
      operationId: nodes_logs_list
      responses:
        '200':
          description: ''
  '/{version})/nodes/{node_id}/node_links/':
    get:
      description: >-
        Node Links to other nodes. *Writeable*.


        Node Links act as pointers to other nodes. Unlike Forks, they are not
        copies of nodes;

        Node Links are a direct reference to the node that they point to.


        ##Node Link Attributes

        `type` is "node_links"


        None


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Relationships


        ### Target Node


        This endpoint shows the target node detail and is automatically
        embedded.


        ##Actions


        ###Adding Node Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: Node Links to other nodes. *Writeable*.
      operationId: nodes_node_links_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        Node Links to other nodes. *Writeable*.


        Node Links act as pointers to other nodes. Unlike Forks, they are not
        copies of nodes;

        Node Links are a direct reference to the node that they point to.


        ##Node Link Attributes

        `type` is "node_links"


        None


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Relationships


        ### Target Node


        This endpoint shows the target node detail and is automatically
        embedded.


        ##Actions


        ###Adding Node Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - id
              - type
              - target_type
            type: object
            properties:
              type:
                type: string
                description: ''
              id:
                type: string
                description: ''
              target_type:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Node Links to other nodes. *Writeable*.
      operationId: nodes_node_links_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/nodes/{node_id}/node_links/{node_link_id}/':
    get:
      description: >-
        Node Link details. *Writeable*.


        Node Links act as pointers to other nodes. Unlike Forks, they are not
        copies of nodes;

        Node Links are a direct reference to the node that they point to.


        ##Attributes

        `type` is "node_links"


        None


        ##Links


        *None*


        ##Relationships


        ###Target node


        This endpoint shows the target node detail and is automatically
        embedded.


        ##Actions


        ###Remove Node Link
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_link_id
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
      tags:
        - nodes
      summary: Node Link details. *Writeable*.
      operationId: nodes_node_links_read
      responses:
        '200':
          description: ''
    delete:
      description: >-
        Node Link details. *Writeable*.


        Node Links act as pointers to other nodes. Unlike Forks, they are not
        copies of nodes;

        Node Links are a direct reference to the node that they point to.


        ##Attributes

        `type` is "node_links"


        None


        ##Links


        *None*


        ##Relationships


        ###Target node


        This endpoint shows the target node detail and is automatically
        embedded.


        ##Actions


        ###Remove Node Link
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_link_id
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
      tags:
        - nodes
      summary: Node Link details. *Writeable*.
      operationId: nodes_node_links_delete
      responses:
        '204':
          description: ''
  '/{version})/nodes/{node_id}/preprints/':
    get:
      description: >-
        List of preprints for a node. *Read-only*.


        ##Note

        **This API endpoint is under active development, and is subject to
        change in the future.**


        Paginated list of preprints ordered by their `date_created`.  Each
        resource contains a representation of the

        preprint.


        ##Preprint Attributes


        OSF Preprint entities have the "preprints" `type`.


        name                            type                               
        description

        ====================================================================================

        date_created                    iso8601 timestamp                  
        timestamp that the preprint was created

        date_modified                   iso8601 timestamp                  
        timestamp that the preprint was last modified

        date_published                  iso8601 timestamp                  
        timestamp when the preprint was published

        is_published                    boolean                            
        whether or not this preprint is published

        is_preprint_orphan              boolean                            
        whether or not this preprint is orphaned

        subjects                        list of lists of dictionaries       ids
        of Subject in the PLOS taxonomy. Dictrionary, containing the subject
        text and subject ID

        provider                        string                             
        original source of the preprint

        doi                             string                              bare
        DOI for the manuscript, as entered by the user


        ##Relationships


        ###Node

        The node that this preprint was created for


        ###Primary File

        The file that is designated as the preprint's primary file, or the
        manuscript of the preprint.


        ###Provider

        Link to preprint_provider detail for this preprint


        ##Links


        - `self` -- Preprint detail page for the current preprint

        - `html` -- Project on the OSF corresponding to the current preprint

        - `doi` -- URL representation of the DOI entered by the user for the
        preprint manuscript


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Query Params


        + `page=<Int>` -- page number of results to view, default 1


        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: List of preprints for a node. *Read-only*.
      operationId: nodes_preprints_list
      responses:
        '200':
          description: ''
  '/{version})/nodes/{node_id}/registrations/':
    get:
      description: >-
        Registrations of the current node.


        Registrations are read-only snapshots of a project that can never be
        edited or deleted but can be withdrawn. This view

        is a list of all the registrations and withdrawn registrations of the
        current node. To create a registration, first

        create a draft registration and answer the required supplemental
        registration questions. Then, submit a POST request

        to this endpoint with the draft registration id in the body of the
        request.


        <!--- Copied from RegistrationList -->


        A withdrawn registration will display a limited subset of information,
        namely, title, description,

        date_created, registration, withdrawn, date_registered,
        withdrawal_justification, and registration supplement. All

        other fields will be displayed as null. Additionally, the only
        relationships permitted to be accessed for a withdrawn

        registration are the contributors - other relationships will return a
        403. Each resource contains the full representation

        of the registration, meaning additional requests to an individual
        registrations's detail view are not necessary.



        <!--- Copied Attributes from RegistrationList -->


        ##Registration Attributes


        Registrations have the "registrations" `type`.


        name                            type               description

        =======================================================================================================

        title                           string             title of the
        registered project or component

        description                     string             description of the
        registered node

        category                        string             bode category, must
        be one of the allowed values

        date_created                    iso8601 timestamp  timestamp that the
        node was created

        date_modified                   iso8601 timestamp  timestamp when the
        node was last updated

        tags                            array of strings   list of tags that
        describe the registered node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings   list of strings
        representing the permissions for the current user on this node

        fork                            boolean            is this project a
        fork?

        registration                    boolean            is this node a
        registration? (always true - may be deprecated in future versions)

        collection                      boolean            is this registered
        node a collection? (always false - may be deprecated in future versions)

        public                          boolean            has this registration
        been made publicly-visible?

        withdrawn                       boolean            has this registration
        been withdrawn?

        date_registered                 iso8601 timestamp  timestamp that the
        registration was created

        embargo_end_date                iso8601 timestamp  when the embargo on
        this registration will be lifted (if applicable)

        withdrawal_justification        string             reasons for
        withdrawing the registration

        pending_withdrawal              boolean            is this registration
        pending withdrawal?

        pending_withdrawal_approval     boolean            is this registration
        pending approval?

        pending_embargo_approval        boolean            is the associated
        Embargo awaiting approval by project admins?

        registered_meta                 dictionary         registration
        supplementary information

        registration_supplement         string             registration template


        ##Actions


        ###Create Registration
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: Registrations of the current node.
      operationId: nodes_registrations_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        Registrations of the current node.


        Registrations are read-only snapshots of a project that can never be
        edited or deleted but can be withdrawn. This view

        is a list of all the registrations and withdrawn registrations of the
        current node. To create a registration, first

        create a draft registration and answer the required supplemental
        registration questions. Then, submit a POST request

        to this endpoint with the draft registration id in the body of the
        request.


        <!--- Copied from RegistrationList -->


        A withdrawn registration will display a limited subset of information,
        namely, title, description,

        date_created, registration, withdrawn, date_registered,
        withdrawal_justification, and registration supplement. All

        other fields will be displayed as null. Additionally, the only
        relationships permitted to be accessed for a withdrawn

        registration are the contributors - other relationships will return a
        403. Each resource contains the full representation

        of the registration, meaning additional requests to an individual
        registrations's detail view are not necessary.



        <!--- Copied Attributes from RegistrationList -->


        ##Registration Attributes


        Registrations have the "registrations" `type`.


        name                            type               description

        =======================================================================================================

        title                           string             title of the
        registered project or component

        description                     string             description of the
        registered node

        category                        string             bode category, must
        be one of the allowed values

        date_created                    iso8601 timestamp  timestamp that the
        node was created

        date_modified                   iso8601 timestamp  timestamp when the
        node was last updated

        tags                            array of strings   list of tags that
        describe the registered node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings   list of strings
        representing the permissions for the current user on this node

        fork                            boolean            is this project a
        fork?

        registration                    boolean            is this node a
        registration? (always true - may be deprecated in future versions)

        collection                      boolean            is this registered
        node a collection? (always false - may be deprecated in future versions)

        public                          boolean            has this registration
        been made publicly-visible?

        withdrawn                       boolean            has this registration
        been withdrawn?

        date_registered                 iso8601 timestamp  timestamp that the
        registration was created

        embargo_end_date                iso8601 timestamp  when the embargo on
        this registration will be lifted (if applicable)

        withdrawal_justification        string             reasons for
        withdrawing the registration

        pending_withdrawal              boolean            is this registration
        pending withdrawal?

        pending_withdrawal_approval     boolean            is this registration
        pending approval?

        pending_embargo_approval        boolean            is the associated
        Embargo awaiting approval by project admins?

        registered_meta                 dictionary         registration
        supplementary information

        registration_supplement         string             registration template


        ##Actions


        ###Create Registration
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - type
              - draft_registration
              - registration_choice
            type: object
            properties:
              registration_choice:
                type: string
                description: ''
              lift_embargo:
                type: string
                description: ''
              type:
                type: string
                description: ''
              public:
                type: string
                description: ''
              draft_registration:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Registrations of the current node.
      operationId: nodes_registrations_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/nodes/{node_id}/relationships/institutions/':
    get:
      description: >-
        Relationship Endpoint for Node -> Institutions Relationship


        Used to set, remove, update and retrieve the affiliated_institutions of
        a node to an institution


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: Relationship Endpoint for Node -> Institutions Relationship
      operationId: nodes_relationships_institutions_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        Relationship Endpoint for Node -> Institutions Relationship


        Used to set, remove, update and retrieve the affiliated_institutions of
        a node to an institution


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - data
            type: object
            properties:
              data:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Relationship Endpoint for Node -> Institutions Relationship
      operationId: nodes_relationships_institutions_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
    put:
      description: >-
        Relationship Endpoint for Node -> Institutions Relationship


        Used to set, remove, update and retrieve the affiliated_institutions of
        a node to an institution


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - data
            type: object
            properties:
              data:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Relationship Endpoint for Node -> Institutions Relationship
      operationId: nodes_relationships_institutions_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Relationship Endpoint for Node -> Institutions Relationship


        Used to set, remove, update and retrieve the affiliated_institutions of
        a node to an institution


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            type: object
            properties:
              data:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Relationship Endpoint for Node -> Institutions Relationship
      operationId: nodes_relationships_institutions_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    delete:
      description: >-
        Relationship Endpoint for Node -> Institutions Relationship


        Used to set, remove, update and retrieve the affiliated_institutions of
        a node to an institution


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
      tags:
        - nodes
      summary: Relationship Endpoint for Node -> Institutions Relationship
      operationId: nodes_relationships_institutions_delete
      responses:
        '204':
          description: ''
  '/{version})/nodes/{node_id}/relationships/linked_nodes/':
    get:
      description: >-
        Relationship Endpoint for Nodes -> Linked Node relationships


        Used to set, remove, update and retrieve the ids of the linked nodes
        attached to this collection. For each id, there

        exists a node link that contains that node.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: Relationship Endpoint for Nodes -> Linked Node relationships
      operationId: nodes_relationships_linked_nodes_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        Relationship Endpoint for Nodes -> Linked Node relationships


        Used to set, remove, update and retrieve the ids of the linked nodes
        attached to this collection. For each id, there

        exists a node link that contains that node.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - data
            type: object
            properties:
              data:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Relationship Endpoint for Nodes -> Linked Node relationships
      operationId: nodes_relationships_linked_nodes_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
    put:
      description: >-
        Relationship Endpoint for Nodes -> Linked Node relationships


        Used to set, remove, update and retrieve the ids of the linked nodes
        attached to this collection. For each id, there

        exists a node link that contains that node.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - data
            type: object
            properties:
              data:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Relationship Endpoint for Nodes -> Linked Node relationships
      operationId: nodes_relationships_linked_nodes_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Relationship Endpoint for Nodes -> Linked Node relationships


        Used to set, remove, update and retrieve the ids of the linked nodes
        attached to this collection. For each id, there

        exists a node link that contains that node.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            type: object
            properties:
              data:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Relationship Endpoint for Nodes -> Linked Node relationships
      operationId: nodes_relationships_linked_nodes_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    delete:
      description: >-
        Relationship Endpoint for Nodes -> Linked Node relationships


        Used to set, remove, update and retrieve the ids of the linked nodes
        attached to this collection. For each id, there

        exists a node link that contains that node.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
      tags:
        - nodes
      summary: Relationship Endpoint for Nodes -> Linked Node relationships
      operationId: nodes_relationships_linked_nodes_delete
      responses:
        '204':
          description: ''
  '/{version})/nodes/{node_id}/view_only_links/':
    get:
      description: >-
        List of view only links on a node. *Writeable*.


        ###Permissions


        View only links on a node, public or private, are readable and writeable
        only by users that are

        administrators on the node.


        ##Attributes


        name            type                    description

        =================================================================================

        name            string                  name of the view only link

        anonymous       boolean                 whether the view only link has
        anonymized contributors

        date_created    iso8601 timestamp       timestamp when the view only
        link was created

        key             string                  the view only link key



        ##Relationships


        ###Creator


        The user who created the view only link.


        ###Nodes


        The nodes which this view only link key gives read-only access to.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: List of view only links on a node. *Writeable*.
      operationId: nodes_view_only_links_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        List of view only links on a node. *Writeable*.


        ###Permissions


        View only links on a node, public or private, are readable and writeable
        only by users that are

        administrators on the node.


        ##Attributes


        name            type                    description

        =================================================================================

        name            string                  name of the view only link

        anonymous       boolean                 whether the view only link has
        anonymized contributors

        date_created    iso8601 timestamp       timestamp when the view only
        link was created

        key             string                  the view only link key



        ##Relationships


        ###Creator


        The user who created the view only link.


        ###Nodes


        The nodes which this view only link key gives read-only access to.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            type: object
            properties:
              name:
                type: string
                description: ''
              anonymous:
                type: boolean
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: List of view only links on a node. *Writeable*.
      operationId: nodes_view_only_links_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/nodes/{node_id}/view_only_links/{link_id}/':
    get:
      description: >-
        Detail of a specific view only link on a node. *Writeable*.


        ###Permissions


        View only links on a node, public or private, are only readable and
        writeable by users that are

        administrators on the node.


        ##Attributes


        name            type                    description

        =================================================================================

        name            string                  name of the view only link

        anonymous       boolean                 whether the view only link has
        anonymized contributors

        date_created    iso8601 timestamp       timestamp when the view only
        link was created

        key             string                  the view only key



        ##Relationships


        ###Creator


        The user who created the view only link.


        ###Nodes


        The nodes which this view only link key gives read-only access to.


        ##Actions


        ###Update
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: link_id
          in: path
      tags:
        - nodes
      summary: Detail of a specific view only link on a node. *Writeable*.
      operationId: nodes_view_only_links_read
      responses:
        '200':
          description: ''
    put:
      description: >-
        Detail of a specific view only link on a node. *Writeable*.


        ###Permissions


        View only links on a node, public or private, are only readable and
        writeable by users that are

        administrators on the node.


        ##Attributes


        name            type                    description

        =================================================================================

        name            string                  name of the view only link

        anonymous       boolean                 whether the view only link has
        anonymized contributors

        date_created    iso8601 timestamp       timestamp when the view only
        link was created

        key             string                  the view only key



        ##Relationships


        ###Creator


        The user who created the view only link.


        ###Nodes


        The nodes which this view only link key gives read-only access to.


        ##Actions


        ###Update
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: link_id
          in: path
        - schema:
            type: object
            properties:
              name:
                type: string
                description: ''
              anonymous:
                type: boolean
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Detail of a specific view only link on a node. *Writeable*.
      operationId: nodes_view_only_links_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Detail of a specific view only link on a node. *Writeable*.


        ###Permissions


        View only links on a node, public or private, are only readable and
        writeable by users that are

        administrators on the node.


        ##Attributes


        name            type                    description

        =================================================================================

        name            string                  name of the view only link

        anonymous       boolean                 whether the view only link has
        anonymized contributors

        date_created    iso8601 timestamp       timestamp when the view only
        link was created

        key             string                  the view only key



        ##Relationships


        ###Creator


        The user who created the view only link.


        ###Nodes


        The nodes which this view only link key gives read-only access to.


        ##Actions


        ###Update
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: link_id
          in: path
        - schema:
            type: object
            properties:
              name:
                type: string
                description: ''
              anonymous:
                type: boolean
                description: ''
          name: data
          in: body
      tags:
        - nodes
      summary: Detail of a specific view only link on a node. *Writeable*.
      operationId: nodes_view_only_links_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    delete:
      description: >-
        Detail of a specific view only link on a node. *Writeable*.


        ###Permissions


        View only links on a node, public or private, are only readable and
        writeable by users that are

        administrators on the node.


        ##Attributes


        name            type                    description

        =================================================================================

        name            string                  name of the view only link

        anonymous       boolean                 whether the view only link has
        anonymized contributors

        date_created    iso8601 timestamp       timestamp when the view only
        link was created

        key             string                  the view only key



        ##Relationships


        ###Creator


        The user who created the view only link.


        ###Nodes


        The nodes which this view only link key gives read-only access to.


        ##Actions


        ###Update
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: link_id
          in: path
      tags:
        - nodes
      summary: Detail of a specific view only link on a node. *Writeable*.
      operationId: nodes_view_only_links_delete
      responses:
        '204':
          description: ''
  '/{version})/nodes/{node_id}/wikis/':
    get:
      description: >-
        List of wiki pages on a node. *Read only*.


        Paginated list of the node's current wiki page versions ordered by their
        `date_modified.` Each resource contains the

        full representation of the wiki, meaning additional requests to an
        individual wiki's detail view are not necessary.


        Note that if an anonymous view_only key is being used, the user
        relationship will not be exposed.


        ###Permissions


        Wiki pages on public nodes are given read-only access to everyone. Wiki
        pages on private nodes are only visible to

        contributors and administrators on the parent node.


        ##Attributes


        OSF wiki entities have the "wikis" `type`.


        name                    type               description

        ======================================================================================================

        name                        string             name of the wiki pag

        path                        string             the path of the wiki page

        materialized_path           string             the path of the wiki page

        date_modified               iso8601 timestamp  timestamp when the wiki
        was last updated

        content_type                string             MIME-type

        current_user_can_comment    boolean            Whether the current user
        is allowed to post comments

        extra                       object

        version                     integer            version number of the
        wiki



        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Query Params


        + `filter[name]=<Str>` -- filter wiki pages by name


        + `filter[date_modified][comparison_operator]=YYYY-MM-DDTH:M:S` --
        filter wiki pages based on date modified.


        Wiki pages can be filtered based on their `date_modified` fields.
        Possible comparison

        operators include 'gt' (greater than), 'gte'(greater than or equal to),
        'lt' (less than) and 'lte'

        (less than or equal to). The date must be in the format YYYY-MM-DD and
        the time is optional.



        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - nodes
      summary: List of wiki pages on a node. *Read only*.
      operationId: nodes_wikis_list
      responses:
        '200':
          description: ''
  '/{version})/preprint_providers/':
    get:
      description: >-
        Paginated list of verified PreprintProviders available. *Read-only*


        Assume undocumented fields are unstable.


        ##PreprintProvider Attributes


        OSF Preprint Providers have the "preprint_providers" `type`.


        name           type               description

        =========================================================================

        name           string             name of the preprint provider

        logo_path      string             a path to the preprint provider's
        static logo

        banner_path    string             a path to the preprint provider's
        banner

        description    string             description of the preprint provider


        ##Relationships


        ###Preprints

        Link to the list of preprints from this given preprint provider.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - preprint_providers
      summary: Paginated list of verified PreprintProviders available. *Read-only*
      operationId: preprint_providers_list
      responses:
        '200':
          description: ''
  '/{version})/preprint_providers/{provider_id}/':
    get:
      description: >-
        Details about a given preprint provider. *Read-only*


        Assume undocumented fields are unstable.


        ##PreprintProvider Attributes


        OSF Preprint Providers have the "preprint_providers" `type`.


        name           type               description

        =========================================================================

        name           string             name of the preprint provider

        logo_path      string             a path to the preprint provider's
        static logo

        banner_path    string             a path to the preprint provider's
        banner

        description    string             description of the preprint provider


        ##Relationships


        ###Preprints

        Link to the list of preprints from this given preprint provider.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: provider_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
      tags:
        - preprint_providers
      summary: Details about a given preprint provider. *Read-only*
      operationId: preprint_providers_read
      responses:
        '200':
          description: ''
  '/{version})/preprint_providers/{provider_id}/licenses/':
    get:
      tags:
        - preprint_providers
      responses:
        '200':
          description: ''
      parameters:
        - description: ''
          required: true
          type: string
          name: provider_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      operationId: preprint_providers_licenses_list
  '/{version})/preprint_providers/{provider_id}/preprints/':
    get:
      description: >-
        Preprints from a given preprint_provider. *Read Only*


        To update preprints with a given preprint_provider, see the
        `<node_id>/relationships/preprint_provider` endpoint


        ##Preprint Attributes


        OSF Preprint entities have the "preprints" `type`.


        name                            type                               
        description

        ====================================================================================

        date_created                    iso8601 timestamp                  
        timestamp that the preprint was created

        date_modified                   iso8601 timestamp                  
        timestamp that the preprint was last modified

        date_published                  iso8601 timestamp                  
        timestamp when the preprint was published

        is_published                    boolean                            
        whether or not this preprint is published

        is_preprint_orphan              boolean                            
        whether or not this preprint is orphaned

        subjects                        array of tuples of dictionaries     ids
        of Subject in the PLOS taxonomy. Dictionary, containing the subject text
        and subject ID

        doi                             string                              bare
        DOI for the manuscript, as entered by the user


        ##Relationships


        ###Node

        The node that this preprint was created for


        ###Primary File

        The file that is designated as the preprint's primary file, or the
        manuscript of the preprint.


        ###Provider

        Link to preprint_provider detail for this preprint


        ##Links

        - `self` -- Preprint detail page for the current preprint

        - `html` -- Project on the OSF corresponding to the current preprint

        - `doi` -- URL representation of the DOI entered by the user for the
        preprint manuscript


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: provider_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - preprint_providers
      summary: Preprints from a given preprint_provider. *Read Only*
      operationId: preprint_providers_preprints_list
      responses:
        '200':
          description: ''
  '/{version})/preprint_providers/{provider_id}/taxonomies/':
    get:
      tags:
        - preprint_providers
      responses:
        '200':
          description: ''
      parameters:
        - description: ''
          required: true
          type: string
          name: provider_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      operationId: preprint_providers_taxonomies_list
  '/{version})/preprints/':
    get:
      description: >-
        Preprints that represent a special kind of preprint node. *Writeable*.


        Paginated list of preprints ordered by their `date_created`.  Each
        resource contains a representation of the

        preprint.


        ##Preprint Attributes


        OSF Preprint entities have the "preprints" `type`.


        name                            type                               
        description

        ====================================================================================

        date_created                    iso8601 timestamp                  
        timestamp that the preprint was created

        date_modified                   iso8601 timestamp                  
        timestamp that the preprint was last modified

        date_published                  iso8601 timestamp                  
        timestamp when the preprint was published

        is_published                    boolean                            
        whether or not this preprint is published

        is_preprint_orphan              boolean                            
        whether or not this preprint is orphaned

        subjects                        list of lists of dictionaries       ids
        of Subject in the PLOS taxonomy. Dictionary, containing the subject text
        and subject ID

        doi                             string                              bare
        DOI for the manuscript, as entered by the user


        ##Relationships


        ###Node

        The node that this preprint was created for


        ###Primary File

        The file that is designated as the preprint's primary file, or the
        manuscript of the preprint.


        ###Provider

        Link to preprint_provider detail for this preprint


        ##Links


        - `self` -- Preprint detail page for the current preprint

        - `html` -- Project on the OSF corresponding to the current preprint

        - `doi` -- URL representation of the DOI entered by the user for the
        preprint manuscript


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Query Params


        + `page=<Int>` -- page number of results to view, default 1


        + `filter[<fieldname>]=<Str>` -- fields and values to filter the search
        results on.


        Preprints may be filtered by their `id`, `is_published`, `date_created`,
        `date_modified`, `provider`

        Most are string fields and will be filtered using simple substring
        matching.


        ###Creating New Preprints


        Create a new preprint by posting to the guid of the existing **node**,
        including the file_id for the

        file you'd like to make the primary preprint file. Note that the **node
        id** will not be accessible via the

        preprints detail view until after the preprint has been created.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - preprints
      summary: Preprints that represent a special kind of preprint node. *Writeable*.
      operationId: preprints_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        Preprints that represent a special kind of preprint node. *Writeable*.


        Paginated list of preprints ordered by their `date_created`.  Each
        resource contains a representation of the

        preprint.


        ##Preprint Attributes


        OSF Preprint entities have the "preprints" `type`.


        name                            type                               
        description

        ====================================================================================

        date_created                    iso8601 timestamp                  
        timestamp that the preprint was created

        date_modified                   iso8601 timestamp                  
        timestamp that the preprint was last modified

        date_published                  iso8601 timestamp                  
        timestamp when the preprint was published

        is_published                    boolean                            
        whether or not this preprint is published

        is_preprint_orphan              boolean                            
        whether or not this preprint is orphaned

        subjects                        list of lists of dictionaries       ids
        of Subject in the PLOS taxonomy. Dictionary, containing the subject text
        and subject ID

        doi                             string                              bare
        DOI for the manuscript, as entered by the user


        ##Relationships


        ###Node

        The node that this preprint was created for


        ###Primary File

        The file that is designated as the preprint's primary file, or the
        manuscript of the preprint.


        ###Provider

        Link to preprint_provider detail for this preprint


        ##Links


        - `self` -- Preprint detail page for the current preprint

        - `html` -- Project on the OSF corresponding to the current preprint

        - `doi` -- URL representation of the DOI entered by the user for the
        preprint manuscript


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Query Params


        + `page=<Int>` -- page number of results to view, default 1


        + `filter[<fieldname>]=<Str>` -- fields and values to filter the search
        results on.


        Preprints may be filtered by their `id`, `is_published`, `date_created`,
        `date_modified`, `provider`

        Most are string fields and will be filtered using simple substring
        matching.


        ###Creating New Preprints


        Create a new preprint by posting to the guid of the existing **node**,
        including the file_id for the

        file you'd like to make the primary preprint file. Note that the **node
        id** will not be accessible via the

        preprints detail view until after the preprint has been created.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            type: object
            properties:
              node:
                type: string
                description: ''
              doi:
                type: string
                description: ''
              license_record:
                type: object
                description: ''
              license:
                type: string
                description: ''
              primary_file:
                type: string
                description: ''
              subjects:
                type: string
                description: ''
              provider:
                type: string
                description: ''
              id:
                type: string
                description: ''
              is_published:
                type: boolean
                description: ''
          name: data
          in: body
      tags:
        - preprints
      summary: Preprints that represent a special kind of preprint node. *Writeable*.
      operationId: preprints_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/preprints/{preprint_id}/':
    get:
      description: >-
        Preprint Detail  *Writeable*.


        ##Preprint Attributes


        OSF Preprint entities have the "preprints" `type`.


        name                            type                               
        description

        ====================================================================================

        date_created                    iso8601 timestamp                  
        timestamp that the preprint was created

        date_modified                   iso8601 timestamp                  
        timestamp that the preprint was last modified

        date_published                  iso8601 timestamp                  
        timestamp when the preprint was published

        is_published                    boolean                            
        whether or not this preprint is published

        is_preprint_orphan              boolean                            
        whether or not this preprint is orphaned

        subjects                        array of tuples of dictionaries     ids
        of Subject in the PLOS taxonomy. Dictionary, containing the subject text
        and subject ID

        doi                             string                              bare
        DOI for the manuscript, as entered by the user


        ##Relationships


        ###Node

        The node that this preprint was created for


        ###Primary File

        The file that is designated as the preprint's primary file, or the
        manuscript of the preprint.


        ###Provider

        Link to preprint_provider detail for this preprint


        ##Links

        - `self` -- Preprint detail page for the current preprint

        - `html` -- Project on the OSF corresponding to the current preprint

        - `doi` -- URL representation of the DOI entered by the user for the
        preprint manuscript


        ##Updating Preprints


        Update a preprint by sending a patch request to the guid of the existing
        preprint node that you'd like to update.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: preprint_id
          in: path
      tags:
        - preprints
      summary: Preprint Detail  *Writeable*.
      operationId: preprints_read
      responses:
        '200':
          description: ''
    put:
      description: >-
        Preprint Detail  *Writeable*.


        ##Preprint Attributes


        OSF Preprint entities have the "preprints" `type`.


        name                            type                               
        description

        ====================================================================================

        date_created                    iso8601 timestamp                  
        timestamp that the preprint was created

        date_modified                   iso8601 timestamp                  
        timestamp that the preprint was last modified

        date_published                  iso8601 timestamp                  
        timestamp when the preprint was published

        is_published                    boolean                            
        whether or not this preprint is published

        is_preprint_orphan              boolean                            
        whether or not this preprint is orphaned

        subjects                        array of tuples of dictionaries     ids
        of Subject in the PLOS taxonomy. Dictionary, containing the subject text
        and subject ID

        doi                             string                              bare
        DOI for the manuscript, as entered by the user


        ##Relationships


        ###Node

        The node that this preprint was created for


        ###Primary File

        The file that is designated as the preprint's primary file, or the
        manuscript of the preprint.


        ###Provider

        Link to preprint_provider detail for this preprint


        ##Links

        - `self` -- Preprint detail page for the current preprint

        - `html` -- Project on the OSF corresponding to the current preprint

        - `doi` -- URL representation of the DOI entered by the user for the
        preprint manuscript


        ##Updating Preprints


        Update a preprint by sending a patch request to the guid of the existing
        preprint node that you'd like to update.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: preprint_id
          in: path
        - schema:
            type: object
            properties:
              node:
                type: string
                description: ''
              doi:
                type: string
                description: ''
              license_record:
                type: object
                description: ''
              license:
                type: string
                description: ''
              primary_file:
                type: string
                description: ''
              subjects:
                type: string
                description: ''
              provider:
                type: string
                description: ''
              is_published:
                type: boolean
                description: ''
          name: data
          in: body
      tags:
        - preprints
      summary: Preprint Detail  *Writeable*.
      operationId: preprints_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Preprint Detail  *Writeable*.


        ##Preprint Attributes


        OSF Preprint entities have the "preprints" `type`.


        name                            type                               
        description

        ====================================================================================

        date_created                    iso8601 timestamp                  
        timestamp that the preprint was created

        date_modified                   iso8601 timestamp                  
        timestamp that the preprint was last modified

        date_published                  iso8601 timestamp                  
        timestamp when the preprint was published

        is_published                    boolean                            
        whether or not this preprint is published

        is_preprint_orphan              boolean                            
        whether or not this preprint is orphaned

        subjects                        array of tuples of dictionaries     ids
        of Subject in the PLOS taxonomy. Dictionary, containing the subject text
        and subject ID

        doi                             string                              bare
        DOI for the manuscript, as entered by the user


        ##Relationships


        ###Node

        The node that this preprint was created for


        ###Primary File

        The file that is designated as the preprint's primary file, or the
        manuscript of the preprint.


        ###Provider

        Link to preprint_provider detail for this preprint


        ##Links

        - `self` -- Preprint detail page for the current preprint

        - `html` -- Project on the OSF corresponding to the current preprint

        - `doi` -- URL representation of the DOI entered by the user for the
        preprint manuscript


        ##Updating Preprints


        Update a preprint by sending a patch request to the guid of the existing
        preprint node that you'd like to update.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: preprint_id
          in: path
        - schema:
            type: object
            properties:
              node:
                type: string
                description: ''
              doi:
                type: string
                description: ''
              license_record:
                type: object
                description: ''
              license:
                type: string
                description: ''
              primary_file:
                type: string
                description: ''
              subjects:
                type: string
                description: ''
              provider:
                type: string
                description: ''
              is_published:
                type: boolean
                description: ''
          name: data
          in: body
      tags:
        - preprints
      summary: Preprint Detail  *Writeable*.
      operationId: preprints_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    delete:
      description: >-
        Preprint Detail  *Writeable*.


        ##Preprint Attributes


        OSF Preprint entities have the "preprints" `type`.


        name                            type                               
        description

        ====================================================================================

        date_created                    iso8601 timestamp                  
        timestamp that the preprint was created

        date_modified                   iso8601 timestamp                  
        timestamp that the preprint was last modified

        date_published                  iso8601 timestamp                  
        timestamp when the preprint was published

        is_published                    boolean                            
        whether or not this preprint is published

        is_preprint_orphan              boolean                            
        whether or not this preprint is orphaned

        subjects                        array of tuples of dictionaries     ids
        of Subject in the PLOS taxonomy. Dictionary, containing the subject text
        and subject ID

        doi                             string                              bare
        DOI for the manuscript, as entered by the user


        ##Relationships


        ###Node

        The node that this preprint was created for


        ###Primary File

        The file that is designated as the preprint's primary file, or the
        manuscript of the preprint.


        ###Provider

        Link to preprint_provider detail for this preprint


        ##Links

        - `self` -- Preprint detail page for the current preprint

        - `html` -- Project on the OSF corresponding to the current preprint

        - `doi` -- URL representation of the DOI entered by the user for the
        preprint manuscript


        ##Updating Preprints


        Update a preprint by sending a patch request to the guid of the existing
        preprint node that you'd like to update.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: preprint_id
          in: path
      tags:
        - preprints
      summary: Preprint Detail  *Writeable*.
      operationId: preprints_delete
      responses:
        '204':
          description: ''
  '/{version})/preprints/{preprint_id}/citation/':
    get:
      description: >-
        The citation details for a preprint, in CSL format *Read Only*


        ##PreprintCitationDetail Attributes


        name                     type                description

        =================================================================================

        id                       string               unique ID for the citation

        title                    string               title of project or
        component

        author                   list                 list of authors for the
        preprint

        publisher                string               publisher - the preprint
        provider

        type                     string               type of citation - web

        doi                      string               doi of the resource
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: preprint_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - preprints
      summary: 'The citation details for a preprint, in CSL format *Read Only*'
      operationId: preprints_citation_list
      responses:
        '200':
          description: ''
  '/{version})/preprints/{preprint_id}/citation/{style_id}/':
    get:
      description: >-
        The citation for a preprint in a specific style's format. *Read Only*


        ##NodeCitationDetail Attributes


        name                     type                description

        =================================================================================

        citation                string               complete citation for a
        preprint in the given style
      parameters:
        - description: ''
          required: true
          type: string
          name: style_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: preprint_id
          in: path
      tags:
        - preprints
      summary: The citation for a preprint in a specific style's format. *Read Only*
      operationId: preprints_citation_read
      responses:
        '200':
          description: ''
  '/{version})/registrations/':
    get:
      description: >-
        Node Registrations.


        Registrations are read-only snapshots of a project. This view is a list
        of all current registrations for which a user

        has access.  A withdrawn registration will display a limited subset of
        information, namely, title, description,

        date_created, registration, withdrawn, date_registered,
        withdrawal_justification, and registration supplement. All

        other fields will be displayed as null. Additionally, the only
        relationships permitted to be accessed for a withdrawn

        registration are the contributors - other relationships will return a
        403.


        Each resource contains the full representation of the registration,
        meaning additional requests to an individual

        registrations's detail view are not necessary.  Unregistered nodes
        cannot be accessed through this endpoint.


        ##Registration Attributes


        Registrations have the "registrations" `type`.


        name                            type               description

        =======================================================================================================

        title                           string             title of the
        registered project or component

        description                     string             description of the
        registered node

        category                        string             bode category, must
        be one of the allowed values

        date_created                    iso8601 timestamp  timestamp that the
        node was created

        date_modified                   iso8601 timestamp  timestamp when the
        node was last updated

        tags                            array of strings   list of tags that
        describe the registered node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings   list of strings
        representing the permissions for the current user on this node

        fork                            boolean            is this project a
        fork?

        registration                    boolean            has this project been
        registered? (always true - may be deprecated in future versions)

        collection                      boolean            is this registered
        node a collection? (always false - may be deprecated in future versions)

        node_license                    object             details of the
        license applied to the node

        year                            string             date range of the
        license

        copyright_holders               array of strings   holders of the
        applied license

        public                          boolean            has this registration
        been made publicly-visible?

        withdrawn                       boolean            has this registration
        been withdrawn?

        date_registered                 iso8601 timestamp  timestamp that the
        registration was created

        embargo_end_date                iso8601 timestamp  when the embargo on
        this registration will be lifted (if applicable)

        withdrawal_justification        string             reasons for
        withdrawing the registration

        pending_withdrawal              boolean            is this registration
        pending withdrawal?

        pending_withdrawal_approval     boolean            is this registration
        pending approval?

        pending_embargo_approval        boolean            is the associated
        Embargo awaiting approval by project admins?

        registered_meta                 dictionary         registration
        supplementary information

        registration_supplement         string             registration template


        ##Relationships


        ###Registered from


        The registration is branched from this node.


        ###Registered by


        The registration was initiated by this user.


        ###Other Relationships


        See documentation on registered_from detail view.  A registration has
        many of the same properties as a node.


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - registrations
      summary: Node Registrations.
      operationId: registrations_list
      responses:
        '200':
          description: ''
  '/{version})/registrations/{node_id}/':
    get:
      description: >-
        Node Registrations.


        Registrations are read-only snapshots of a project. This view shows
        details about the given registration.


        Each resource contains the full representation of the registration,
        meaning additional requests to an individual

        registration's detail view are not necessary. A withdrawn registration
        will display a limited subset of information,

        namely, title, description, date_created, registration, withdrawn,
        date_registered, withdrawal_justification, and

        registration supplement. All other fields will be displayed as null.
        Additionally, the only relationships permitted

        to be accessed for a withdrawn registration are the contributors - other
        relationships will return a 403.


        ##Registration Attributes


        Registrations have the "registrations" `type`.


        name                            type               description

        =======================================================================================================

        title                           string             title of the
        registered project or component

        description                     string             description of the
        registered node

        category                        string             bode category, must
        be one of the allowed values

        date_created                    iso8601 timestamp  timestamp that the
        node was created

        date_modified                   iso8601 timestamp  timestamp when the
        node was last updated

        tags                            array of strings   list of tags that
        describe the registered node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings   list of strings
        representing the permissions for the current user on this node

        fork                            boolean            is this project a
        fork?

        registration                    boolean            has this project been
        registered? (always true - may be deprecated in future versions)

        collection                      boolean            is this registered
        node a collection? (always false - may be deprecated in future versions)

        node_license                    object             details of the
        license applied to the node

        year                            string             date range of the
        license

        copyright_holders               array of strings   holders of the
        applied license

        public                          boolean            has this registration
        been made publicly-visible?

        withdrawn                       boolean            has this registration
        been withdrawn?

        date_registered                 iso8601 timestamp  timestamp that the
        registration was created

        embargo_end_date                iso8601 timestamp  when the embargo on
        this registration will be lifted (if applicable)

        withdrawal_justification        string             reasons for
        withdrawing the registration

        pending_withdrawal              boolean            is this registration
        pending withdrawal?

        pending_withdrawal_approval     boolean            is this registration
        pending approval?

        pending_embargo_approval        boolean            is the associated
        Embargo awaiting approval by project admins?

        registered_meta                 dictionary         registration
        supplementary information

        registration_supplement         string             registration template


        ##Actions


        ###Update
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
      tags:
        - registrations
      summary: Node Registrations.
      operationId: registrations_read
      responses:
        '200':
          description: ''
    put:
      description: >-
        Node Registrations.


        Registrations are read-only snapshots of a project. This view shows
        details about the given registration.


        Each resource contains the full representation of the registration,
        meaning additional requests to an individual

        registration's detail view are not necessary. A withdrawn registration
        will display a limited subset of information,

        namely, title, description, date_created, registration, withdrawn,
        date_registered, withdrawal_justification, and

        registration supplement. All other fields will be displayed as null.
        Additionally, the only relationships permitted

        to be accessed for a withdrawn registration are the contributors - other
        relationships will return a 403.


        ##Registration Attributes


        Registrations have the "registrations" `type`.


        name                            type               description

        =======================================================================================================

        title                           string             title of the
        registered project or component

        description                     string             description of the
        registered node

        category                        string             bode category, must
        be one of the allowed values

        date_created                    iso8601 timestamp  timestamp that the
        node was created

        date_modified                   iso8601 timestamp  timestamp when the
        node was last updated

        tags                            array of strings   list of tags that
        describe the registered node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings   list of strings
        representing the permissions for the current user on this node

        fork                            boolean            is this project a
        fork?

        registration                    boolean            has this project been
        registered? (always true - may be deprecated in future versions)

        collection                      boolean            is this registered
        node a collection? (always false - may be deprecated in future versions)

        node_license                    object             details of the
        license applied to the node

        year                            string             date range of the
        license

        copyright_holders               array of strings   holders of the
        applied license

        public                          boolean            has this registration
        been made publicly-visible?

        withdrawn                       boolean            has this registration
        been withdrawn?

        date_registered                 iso8601 timestamp  timestamp that the
        registration was created

        embargo_end_date                iso8601 timestamp  when the embargo on
        this registration will be lifted (if applicable)

        withdrawal_justification        string             reasons for
        withdrawing the registration

        pending_withdrawal              boolean            is this registration
        pending withdrawal?

        pending_withdrawal_approval     boolean            is this registration
        pending approval?

        pending_embargo_approval        boolean            is the associated
        Embargo awaiting approval by project admins?

        registered_meta                 dictionary         registration
        supplementary information

        registration_supplement         string             registration template


        ##Actions


        ###Update
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - id
              - type
            type: object
            properties:
              type:
                type: string
                description: ''
              id:
                type: string
                description: ''
              public:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - registrations
      summary: Node Registrations.
      operationId: registrations_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Node Registrations.


        Registrations are read-only snapshots of a project. This view shows
        details about the given registration.


        Each resource contains the full representation of the registration,
        meaning additional requests to an individual

        registration's detail view are not necessary. A withdrawn registration
        will display a limited subset of information,

        namely, title, description, date_created, registration, withdrawn,
        date_registered, withdrawal_justification, and

        registration supplement. All other fields will be displayed as null.
        Additionally, the only relationships permitted

        to be accessed for a withdrawn registration are the contributors - other
        relationships will return a 403.


        ##Registration Attributes


        Registrations have the "registrations" `type`.


        name                            type               description

        =======================================================================================================

        title                           string             title of the
        registered project or component

        description                     string             description of the
        registered node

        category                        string             bode category, must
        be one of the allowed values

        date_created                    iso8601 timestamp  timestamp that the
        node was created

        date_modified                   iso8601 timestamp  timestamp when the
        node was last updated

        tags                            array of strings   list of tags that
        describe the registered node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings   list of strings
        representing the permissions for the current user on this node

        fork                            boolean            is this project a
        fork?

        registration                    boolean            has this project been
        registered? (always true - may be deprecated in future versions)

        collection                      boolean            is this registered
        node a collection? (always false - may be deprecated in future versions)

        node_license                    object             details of the
        license applied to the node

        year                            string             date range of the
        license

        copyright_holders               array of strings   holders of the
        applied license

        public                          boolean            has this registration
        been made publicly-visible?

        withdrawn                       boolean            has this registration
        been withdrawn?

        date_registered                 iso8601 timestamp  timestamp that the
        registration was created

        embargo_end_date                iso8601 timestamp  when the embargo on
        this registration will be lifted (if applicable)

        withdrawal_justification        string             reasons for
        withdrawing the registration

        pending_withdrawal              boolean            is this registration
        pending withdrawal?

        pending_withdrawal_approval     boolean            is this registration
        pending approval?

        pending_embargo_approval        boolean            is the associated
        Embargo awaiting approval by project admins?

        registered_meta                 dictionary         registration
        supplementary information

        registration_supplement         string             registration template


        ##Actions


        ###Update
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            type: object
            properties:
              type:
                type: string
                description: ''
              id:
                type: string
                description: ''
              public:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - registrations
      summary: Node Registrations.
      operationId: registrations_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
  '/{version})/registrations/{node_id}/children/':
    get:
      description: >-
        Children of the current registration.


        This will get the next level of child nodes for the selected node if the
        current user has read access for those

        nodes. Creating a node via this endpoint will behave the same as the
        [node list endpoint](/v2/nodes/), but the new

        node will have the selected node set as its parent.


        ##Node Attributes


        <!--- Copied Attributes from NodeDetail -->


        OSF Node entities have the "nodes" `type`.


        name                            type                description

        =================================================================================

        title                           string              title of project or
        component

        description                     string              description of the
        node

        category                        string              node category, must
        be one of the allowed values

        date_created                    iso8601 timestamp   timestamp that the
        node was created

        date_modified                   iso8601 timestamp   timestamp when the
        node was last updated

        tags                            array of strings    list of tags that
        describe the node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings    list of strings
        representing the permissions for the current user on this node

        registration                    boolean             is this a
        registration? (always false - may be deprecated in future versions)

        fork                            boolean             is this node a fork
        of another node?

        public                          boolean             has this node been
        made publicly-visible?

        collection                      boolean             is this a
        collection? (always false - may be deprecated in future versions)


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Query Params


        + `page=<Int>` -- page number of results to view, default 1


        + `filter[<fieldname>]=<Str>` -- fields and values to filter the search
        results on.


        <!--- Copied Query Params from NodeList -->


        Nodes may be filtered by their `id`, `title`, `category`, `description`,
        `public`, `tags`, `date_created`, `date_modified`,

        `root`, `parent`, and `contributors`.  Most are string fields and will
        be filtered using simple substring matching.  `public`

        is a boolean, and can be filtered using truthy values, such as `true`,
        `false`, `0`, or `1`.  Note that quoting `true`

        or `false` in the query will cause the match to fail regardless.  `tags`
        is an array of simple strings.


        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - registrations
      summary: Children of the current registration.
      operationId: registrations_children_list
      responses:
        '200':
          description: ''
  '/{version})/registrations/{node_id}/citation/':
    get:
      description: >-
        The registration citation for a registration in CSL format *read only*


        ##Note

        **This API endpoint is under active development, and is subject to
        change in the future**


        ##RegistraitonCitationDetail Attributes


        name                     type                description

        =================================================================================

        id                       string               unique ID for the citation

        title                    string               title of project or
        component

        author                   list                 list of authors for the
        work

        publisher                string               publisher - most always
        'Open Science Framework'

        type                     string               type of citation - web

        doi                      string               doi of the resource
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - registrations
      summary: The registration citation for a registration in CSL format *read only*
      operationId: registrations_citation_list
      responses:
        '200':
          description: ''
  '/{version})/registrations/{node_id}/citation/{style_id}/':
    get:
      description: >-
        The registration citation for a registration in a specific style's
        format t *read only*


        ##Note

        **This API endpoint is under active development, and is subject to
        change in the future**


        ##RegistrationCitationStyleDetail Attributes


        name                     type                description

        =================================================================================

        citation                string               complete citation for a
        registration in the given style
      parameters:
        - description: ''
          required: true
          type: string
          name: style_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
      tags:
        - registrations
      summary: >-
        The registration citation for a registration in a specific style's
        format t *read only*
      operationId: registrations_citation_read
      responses:
        '200':
          description: ''
  '/{version})/registrations/{node_id}/citations/':
    get:
      description: List of Alternative Citations for a registration.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - registrations
      summary: List of Alternative Citations for a registration.
      operationId: registrations_citations_list
      responses:
        '200':
          description: ''
    post:
      description: List of Alternative Citations for a registration.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - type
              - name
              - text
            type: object
            properties:
              text:
                type: string
                description: ''
              type:
                type: string
                description: ''
              name:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - registrations
      summary: List of Alternative Citations for a registration.
      operationId: registrations_citations_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/registrations/{node_id}/citations/{citation_id}/':
    get:
      description: Detail of a citations for a registration.
      parameters:
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: citation_id
          in: path
      tags:
        - registrations
      summary: Detail of a citations for a registration.
      operationId: registrations_citations_read
      responses:
        '200':
          description: ''
    put:
      description: Detail of a citations for a registration.
      parameters:
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: citation_id
          in: path
        - schema:
            required:
              - type
              - name
              - text
            type: object
            properties:
              text:
                type: string
                description: ''
              type:
                type: string
                description: ''
              name:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - registrations
      summary: Detail of a citations for a registration.
      operationId: registrations_citations_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: Detail of a citations for a registration.
      parameters:
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: citation_id
          in: path
        - schema:
            type: object
            properties:
              text:
                type: string
                description: ''
              type:
                type: string
                description: ''
              name:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - registrations
      summary: Detail of a citations for a registration.
      operationId: registrations_citations_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    delete:
      description: Detail of a citations for a registration.
      parameters:
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: citation_id
          in: path
      tags:
        - registrations
      summary: Detail of a citations for a registration.
      operationId: registrations_citations_delete
      responses:
        '204':
          description: ''
  '/{version})/registrations/{node_id}/comments/':
    get:
      description: List of comments for a registration.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - registrations
      summary: List of comments for a registration.
      operationId: registrations_comments_list
      responses:
        '200':
          description: ''
    post:
      description: List of comments for a registration.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - type
              - content
            type: object
            properties:
              content:
                type: string
                description: ''
              type:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - registrations
      summary: List of comments for a registration.
      operationId: registrations_comments_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/registrations/{node_id}/contributors/':
    get:
      description: >-
        Contributors (users) for a registration.


        Contributors are users who can make changes to the node or, in the case
        of private nodes,

        have read access to the node. Contributors are divided between
        'bibliographic' and 'non-bibliographic'

        contributors. From a permissions standpoint, both are the same, but
        bibliographic contributors

        are included in citations, while non-bibliographic contributors are not
        included in citations.


        Note that if an anonymous view_only key is being used, the user
        relationship will not be exposed and the id for

        the contributor will be an empty string.


        ##Node Contributor Attributes


        <!--- Copied Attributes from NodeContributorDetail -->


        `type` is "contributors"


        name                        type     description

        ======================================================================================================

        bibliographic               boolean  Whether the user will be included
        in citations for this node. Default is true.

        permission                  string   User permission level. Must be
        "read", "write", or "admin". Default is "write".

        unregistered_contributor    string   Contributor's assigned name if
        contributor hasn't yet claimed account


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Relationships


        ###Users


        This endpoint shows the contributor user detail and is automatically
        embedded.


        ##Actions


        ###Adding Contributors
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - registrations
      summary: Contributors (users) for a registration.
      operationId: registrations_contributors_list
      responses:
        '200':
          description: ''
  '/{version})/registrations/{node_id}/contributors/{user_id}/':
    get:
      description: >-
        Detail of a contributor for a registration.


        Contributors are users who can make changes to the node or, in the case
        of private nodes,

        have read access to the node. Contributors are divided between
        'bibliographic' and 'non-bibliographic'

        contributors. From a permissions standpoint, both are the same, but
        bibliographic contributors

        are included in citations, while non-bibliographic contributors are not
        included in citations.


        Note that if an anonymous view_only key is being used, the user
        relationship will not be exposed and the id for

        the contributor will be an empty string.


        Contributors can be viewed, removed, and have their permissions and
        bibliographic status changed via this

        endpoint.


        ##Attributes


        `type` is "contributors"


        name                        type     description

        ======================================================================================================

        bibliographic               boolean  Whether the user will be included
        in citations for this node. Default is true.

        permission                  string   User permission level. Must be
        "read", "write", or "admin". Default is "write".

        unregistered_contributor    string   Contributor's assigned name if
        contributor hasn't yet claimed account


        ###Users


        This endpoint shows the contributor user detail.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
      tags:
        - registrations
      summary: Detail of a contributor for a registration.
      operationId: registrations_contributors_read
      responses:
        '200':
          description: ''
  '/{version})/registrations/{node_id}/files/':
    get:
      description: List of providers for a registration.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - registrations
      summary: List of providers for a registration.
      operationId: registrations_files_list
      responses:
        '200':
          description: ''
  '/{version})/registrations/{node_id}/files/{provider}{path})':
    get:
      description: List of files for a registration.
      parameters:
        - description: ''
          required: true
          type: string
          name: path
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: provider
          in: path
      tags:
        - registrations
      summary: List of files for a registration.
      operationId: registrations_files_read
      responses:
        '200':
          description: ''
  '/{version})/registrations/{node_id}/forks/':
    get:
      description: >-
        Forks of the current registration. *Writeable*.


        Paginated list of the current node's forks ordered by their
        `forked_date`. Forks are copies of projects that you can

        change without affecting the original project.  When creating a fork,
        your fork will will only contain public components or those

        for which you are a contributor.  Private components that you do not
        have access to will not be forked.


        ##Node Fork Attributes


        <!--- Copied Attributes from NodeDetail with exception of forked_date-->


        OSF Node Fork entities have the "nodes" `type`.


        name                        type               description

        ===============================================================================================================================

        title                       string             title of project or
        component

        description                 string             description of the node

        category                    string             node category, must be
        one of the allowed values

        date_created                iso8601 timestamp  timestamp that the node
        was created

        date_modified               iso8601 timestamp  timestamp when the node
        was last updated

        tags                        array of strings   list of tags that
        describe the node

        registration                boolean            has this project been
        registered? (always False)

        collection                  boolean            is this node a collection
        (always False)

        fork                        boolean            is this node a fork of
        another node? (always True)

        public                      boolean            has this node been made
        publicly-visible?

        forked_date                 iso8601 timestamp  timestamp when the node
        was forked

        current_user_can_comment    boolean            Whether the current user
        is allowed to post comments

        current_user_permissions    array of strings   List of strings
        representing the permissions for the current user on this node


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        ###Create Node Fork
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - registrations
      summary: Forks of the current registration. *Writeable*.
      operationId: registrations_forks_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        Forks of the current registration. *Writeable*.


        Paginated list of the current node's forks ordered by their
        `forked_date`. Forks are copies of projects that you can

        change without affecting the original project.  When creating a fork,
        your fork will will only contain public components or those

        for which you are a contributor.  Private components that you do not
        have access to will not be forked.


        ##Node Fork Attributes


        <!--- Copied Attributes from NodeDetail with exception of forked_date-->


        OSF Node Fork entities have the "nodes" `type`.


        name                        type               description

        ===============================================================================================================================

        title                       string             title of project or
        component

        description                 string             description of the node

        category                    string             node category, must be
        one of the allowed values

        date_created                iso8601 timestamp  timestamp that the node
        was created

        date_modified               iso8601 timestamp  timestamp when the node
        was last updated

        tags                        array of strings   list of tags that
        describe the node

        registration                boolean            has this project been
        registered? (always False)

        collection                  boolean            is this node a collection
        (always False)

        fork                        boolean            is this node a fork of
        another node? (always True)

        public                      boolean            has this node been made
        publicly-visible?

        forked_date                 iso8601 timestamp  timestamp when the node
        was forked

        current_user_can_comment    boolean            Whether the current user
        is allowed to post comments

        current_user_permissions    array of strings   List of strings
        representing the permissions for the current user on this node


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        ###Create Node Fork
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - type
            type: object
            properties:
              description:
                type: string
                description: ''
              license:
                type: string
                description: ''
              tags:
                type: string
                description: ''
              template_from:
                type: string
                description: >-
                  Specify a node id for a node you would like to use as a
                  template for the new node. Templating is like forking, except
                  that you do not copy the files, only the project structure.
                  Some information is changed on the top level project by
                  submitting the appropriate fields in the request body, and
                  some information will not change. By default, the description
                  will be cleared and the project will be made private.
              title:
                type: string
                description: ''
              type:
                type: string
                description: ''
              node_license:
                type: object
                description: ''
              public:
                type: boolean
                description: >-
                  Nodes that are made public will give read-only access to
                  everyone. Private nodes require explicit read permission.
                  Write and admin access are the same for public and private
                  nodes. Administrators on a parent node have implicit read
                  permissions for all child nodes
          name: data
          in: body
      tags:
        - registrations
      summary: Forks of the current registration. *Writeable*.
      operationId: registrations_forks_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/registrations/{node_id}/identifiers/':
    get:
      description: >-
        List of identifiers for a specified node. *Read-only*.


        ##Identifier Attributes


        OSF Identifier entities have the "identifiers" `type`.


        name           type                   description

        ----------------------------------------------------------------------------

        category       string                 e.g. 'ark', 'doi'

        value          string                 the identifier value itself


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - registrations
      summary: List of identifiers for a specified node. *Read-only*.
      operationId: registrations_identifiers_list
      responses:
        '200':
          description: ''
  '/{version})/registrations/{node_id}/institutions/':
    get:
      description: List of the Institutions for a registration.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - registrations
      summary: List of the Institutions for a registration.
      operationId: registrations_institutions_list
      responses:
        '200':
          description: ''
  '/{version})/registrations/{node_id}/linked_nodes/':
    get:
      description: List of linked nodes for a registration.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - registrations
      summary: List of linked nodes for a registration.
      operationId: registrations_linked_nodes_list
      responses:
        '200':
          description: ''
  '/{version})/registrations/{node_id}/logs/':
    get:
      description: List of logs for a registration.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - registrations
      summary: List of logs for a registration.
      operationId: registrations_logs_list
      responses:
        '200':
          description: ''
  '/{version})/registrations/{node_id}/node_links/':
    get:
      description: >-
        Node Links to other nodes. *Writeable*.


        Node Links act as pointers to other nodes. Unlike Forks, they are not
        copies of nodes;

        Node Links are a direct reference to the node that they point to.


        ##Node Link Attributes

        `type` is "node_links"


        None


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Relationships


        ### Target Node


        This endpoint shows the target node detail and is automatically
        embedded.


        ##Actions


        ###Adding Node Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - registrations
      summary: Node Links to other nodes. *Writeable*.
      operationId: registrations_node_links_list
      responses:
        '200':
          description: ''
  '/{version})/registrations/{node_id}/node_links/{node_link_id}/':
    get:
      description: >-
        Node Link details. *Writeable*.


        Node Links act as pointers to other nodes. Unlike Forks, they are not
        copies of nodes;

        Node Links are a direct reference to the node that they point to.


        ##Attributes

        `type` is "node_links"


        None


        ##Links


        *None*


        ##Relationships


        ###Target node


        This endpoint shows the target node detail and is automatically
        embedded.


        ##Actions


        ###Remove Node Link
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_link_id
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
      tags:
        - registrations
      summary: Node Link details. *Writeable*.
      operationId: registrations_node_links_read
      responses:
        '200':
          description: ''
  '/{version})/registrations/{node_id}/registrations/':
    get:
      description: List of registrations of a registration.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - registrations
      summary: List of registrations of a registration.
      operationId: registrations_registrations_list
      responses:
        '200':
          description: ''
    post:
      description: List of registrations of a registration.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            required:
              - type
              - draft_registration
              - registration_choice
            type: object
            properties:
              registration_choice:
                type: string
                description: ''
              lift_embargo:
                type: string
                description: ''
              type:
                type: string
                description: ''
              public:
                type: string
                description: ''
              draft_registration:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - registrations
      summary: List of registrations of a registration.
      operationId: registrations_registrations_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/registrations/{node_id}/relationships/linked_nodes/':
    get:
      description: >-
        Relationship Endpoint for Nodes -> Linked Node relationships


        Used to retrieve the ids of the linked nodes attached to this
        collection. For each id, there

        exists a node link that contains that node.


        ##Actions
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - registrations
      summary: Relationship Endpoint for Nodes -> Linked Node relationships
      operationId: registrations_relationships_linked_nodes_list
      responses:
        '200':
          description: ''
  '/{version})/registrations/{node_id}/view_only_links/':
    get:
      tags:
        - registrations
      responses:
        '200':
          description: ''
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      operationId: registrations_view_only_links_list
    post:
      tags:
        - registrations
      consumes:
        - application/json
      responses:
        '201':
          description: ''
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - schema:
            type: object
            properties:
              name:
                type: string
                description: ''
              anonymous:
                type: boolean
                description: ''
          name: data
          in: body
      operationId: registrations_view_only_links_create
  '/{version})/registrations/{node_id}/view_only_links/{link_id}/':
    get:
      tags:
        - registrations
      responses:
        '200':
          description: ''
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: link_id
          in: path
      operationId: registrations_view_only_links_read
    put:
      tags:
        - registrations
      consumes:
        - application/json
      responses:
        '200':
          description: ''
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: link_id
          in: path
        - schema:
            type: object
            properties:
              name:
                type: string
                description: ''
              anonymous:
                type: boolean
                description: ''
          name: data
          in: body
      operationId: registrations_view_only_links_update
    patch:
      tags:
        - registrations
      consumes:
        - application/json
      responses:
        '200':
          description: ''
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: link_id
          in: path
        - schema:
            type: object
            properties:
              name:
                type: string
                description: ''
              anonymous:
                type: boolean
                description: ''
          name: data
          in: body
      operationId: registrations_view_only_links_partial_update
    delete:
      tags:
        - registrations
      responses:
        '204':
          description: ''
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: true
          type: string
          name: link_id
          in: path
      operationId: registrations_view_only_links_delete
  '/{version})/registrations/{node_id}/wikis/':
    get:
      description: List of wikis for a registration.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: node_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - registrations
      summary: List of wikis for a registration.
      operationId: registrations_wikis_list
      responses:
        '200':
          description: ''
  '/{version})/search/':
    get:
      description: >-
        *Read-Only*


        Objects (including projects, components, registrations, users, and
        files) that have been found by the given

        Elasticsearch query. Each object is serialized with the appropriate
        serializer for its type (files are serialized as

        files, users are serialized as users, etc.) and returned collectively.


        ## Search Fields


        <type>  # either projects, components, registrations, users, or files

        related

        href    # the canonical api endpoint to search within a certain object
        type, e.g `/v2/search/users/`

        meta

        total   # the number of results found that are of the enclosing object
        type


        ## Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ## Query Params


        + `q=<Str>` -- Query to search projects, components, registrations,
        users, and files for.


        + `page=<Int>` -- page number of results to view, default 1


        # This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - search
      summary: '*Read-Only*'
      operationId: search_list
      responses:
        '200':
          description: ''
  '/{version})/search/components/':
    get:
      description: >-
        *Read-Only*


        Components that have been found by the given Elasticsearch query.


        <!--- Copied piel from NodeDetail -->


        On the front end, nodes are considered 'projects' or 'components'. The
        difference between a project and a component

        is that a project is the top-level node, and components are children of
        the project. There is also a [category

        field](/v2/#osf-node-categories) that includes 'project' as an option.
        The categorization essentially determines

        which icon is displayed by the node in the front-end UI and helps with
        search organization. Top-level nodes may have

        a category other than project, and children nodes may have a category of
        project.


        ##Node Attributes


        <!--- Copied Attributes from NodeDetail -->


        OSF Node entities have the "nodes" `type`.


        name                            type               description

        =================================================================================

        title                           string             title of project or
        component

        description                     string             description of the
        node

        category                        string             node category, must
        be one of the allowed values

        date_created                    iso8601 timestamp  timestamp that the
        node was created

        date_modified                   iso8601 timestamp  timestamp when the
        node was last updated

        tags                            array of strings   list of tags that
        describe the node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings   list of strings
        representing the permissions for the current user on this node

        registration                    boolean            is this a
        registration? (always false - may be deprecated in future versions)

        fork                            boolean            is this node a fork
        of another node?

        public                          boolean            has this node been
        made publicly-visible?

        preprint                        boolean            is this a preprint?

        collection                      boolean            is this a collection?
        (always false - may be deprecated in future versions)

        node_license                    object             details of the
        license applied to the node

        year                        string             date range of the license

        copyright_holders           array of strings   holders of the applied
        license


        ##Relationships


        ###Children


        List of nodes that are children of this node.  New child nodes may be
        added through this endpoint.


        ###Comments


        List of comments on this node.  New comments can be left on the node
        through this endpoint.


        ###Contributors


        List of users who are contributors to this node. Contributors may have
        "read", "write", or "admin" permissions.

        A node must always have at least one "admin" contributor.  Contributors
        may be added via this endpoint.


        ###Draft Registrations


        List of draft registrations of the current node.


        ###Files


        List of top-level folders (actually cloud-storage providers) associated
        with this node. This is the starting point

        for accessing the actual files stored within this node.


        ###Forked From


        If this node was forked from another node, the canonical endpoint of the
        node that was forked from will be

        available in the `/forked_from/links/related/href` key.  Otherwise, it
        will be null.


        ###Logs


        List of read-only log actions pertaining to the node.


        ###Node Links


        List of links (pointers) to other nodes on the OSF.  Node links can be
        added through this endpoint.


        ###Parent


        If this node is a child node of another node, the parent's canonical
        endpoint will be available in the

        `/parent/links/related/href` key.  Otherwise, it will be null.


        ###Registrations


        List of registrations of the current node.


        ###Root


        Returns the top-level node associated with the current node.  If the
        current node is the top-level node, the root is

        the current node.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - search
      summary: '*Read-Only*'
      operationId: search_components_list
      responses:
        '200':
          description: ''
  '/{version})/search/files/':
    get:
      description: >-
        *Read-Only*


        Files that have been found by the given Elasticsearch query.


        <!-- Copied attributes from FileDetail -->


        ####File Entity


        name          type       description

        =========================================================================

        guid          string            OSF GUID for this file (if one has been
        assigned)

        name          string            name of the file

        path          string            unique identifier for this file entity
        for this

        project and storage provider. may not end with '/'

        materialized  string            the full path of the file relative to
        the storage

        root.  may not end with '/'

        kind          string            "file"

        etag          string            etag - http caching identifier w/o
        wrapping quotes

        modified      timestamp         last modified timestamp - format depends
        on provider

        contentType   string            MIME-type when available

        provider      string            id of provider e.g. "osfstorage", "s3",
        "googledrive".

        equivalent to addon_short_name on the OSF

        size          integer           size of file in bytes

        tags          array of strings  list of tags that describes the file
        (osfstorage only)

        extra         object            may contain additional data beyond
        what's described here,

        depending on the provider

        version     integer           version number of file. will be 1 on
        initial upload

        downloads   integer           count of the number times the file has
        been downloaded

        hashes      object

        md5       string            md5 hash of file

        sha256    string            SHA-256 hash of file


        ##Attributes


        For an OSF File entity, the `type` is "files" regardless of whether the
        entity is actually a file or folder, because

        it belongs to the `files` collection of the API.  They can be
        distinguished by the `kind` attribute.  Files and

        folders use the same representation, but some attributes may be null for
        one kind but not the other. `size` will be

        null for folders.  A list of storage provider keys can be found
        [here](/v2/#storage-providers).


        name                        type               description

        ================================================================================================================

        name                        string             name of the file or
        folder; used for display

        kind                        string             "file" or "folder"

        path                        string             same as for corresponding
        WaterButler entity

        materialized_path           string             the unix-style path to
        the file relative to the provider root

        size                        integer            size of file in bytes,
        null for folders

        provider                    string             storage provider for this
        file. "osfstorage" if stored on the

        OSF.  other examples include "s3" for Amazon S3, "googledrive"

        for Google Drive, "box" for Box.com.

        current_user_can_comment    boolean            Whether the current user
        is allowed to post comments


        last_touched                iso8601 timestamp  last time the metadata
        for the file was retrieved. only

        applies to non-OSF storage providers.

        date_modified               iso8601 timestamp  timestamp of when this
        file was last updated*

        date_created                iso8601 timestamp  timestamp of when this
        file was created*

        extra                       object             may contain additional
        data beyond what's described here,

        depending on the provider

        hashes                      object

        md5                         string             md5 hash of file, null
        for folders

        sha256                      string             SHA-256 hash of file,
        null for folders


        * A note on timestamps: for files stored in osfstorage, `date_created`
        refers to the time the file was

        first uploaded to osfstorage, and `date_modified` is the time the file
        was last updated while in osfstorage.

        Other providers may or may not provide this information, but if they do
        it will correspond to the provider's

        semantics for created/modified times.  These timestamps may also be
        stale; metadata retrieved via the File Detail

        endpoint is cached.  The `last_touched` field describes the last time
        the metadata was retrieved from the external

        provider.  To force a metadata update, access the parent folder via its
        Node Files List endpoint.


        <!-- Copied relationships from FileDetail -->


        ##Relationships


        ###Node


        The `node` endpoint describes the project or registration that this file
        belongs to.


        ###Files (*folders*)


        The `files` endpoint lists all of the subfiles and folders of the
        current folder. Will be null for files.


        ###Versions (*files*)


        The `versions` endpoint provides version history for files.  Will be
        null for folders.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - search
      summary: '*Read-Only*'
      operationId: search_files_list
      responses:
        '200':
          description: ''
  '/{version})/search/projects/':
    get:
      description: >-
        *Read-Only*


        Projects that have been found by the given Elasticsearch query.


        <!--- Copied spiel from NodeDetail -->


        On the front end, nodes are considered 'projects' or 'components'. The
        difference between a project and a component

        is that a project is the top-level node, and components are children of
        the project. There is also a [category

        field](/v2/#osf-node-categories) that includes 'project' as an option.
        The categorization essentially determines

        which icon is displayed by the node in the front-end UI and helps with
        search organization. Top-level nodes may have

        a category other than project, and children nodes may have a category of
        project.


        ##Node Attributes


        <!--- Copied Attributes from NodeDetail -->


        OSF Node entities have the "nodes" `type`.


        name                            type               description

        =================================================================================

        title                           string             title of project or
        component

        description                     string             description of the
        node

        category                        string             node category, must
        be one of the allowed values

        date_created                    iso8601 timestamp  timestamp that the
        node was created

        date_modified                   iso8601 timestamp  timestamp when the
        node was last updated

        tags                            array of strings   list of tags that
        describe the node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings   list of strings
        representing the permissions for the current user on this node

        registration                    boolean            is this a
        registration? (always false - may be deprecated in future versions)

        fork                            boolean            is this node a fork
        of another node?

        public                          boolean            has this node been
        made publicly-visible?

        preprint                        boolean            is this a preprint?

        collection                      boolean            is this a collection?
        (always false - may be deprecated in future versions)

        node_license                    object             details of the
        license applied to the node

        year                        string             date range of the license

        copyright_holders           array of strings   holders of the applied
        license


        ##Relationships


        ###Children


        List of nodes that are children of this node.  New child nodes may be
        added through this endpoint.


        ###Comments


        List of comments on this node.  New comments can be left on the node
        through this endpoint.


        ###Contributors


        List of users who are contributors to this node. Contributors may have
        "read", "write", or "admin" permissions.

        A node must always have at least one "admin" contributor.  Contributors
        may be added via this endpoint.


        ###Draft Registrations


        List of draft registrations of the current node.


        ###Files


        List of top-level folders (actually cloud-storage providers) associated
        with this node. This is the starting point

        for accessing the actual files stored within this node.


        ###Forked From


        If this node was forked from another node, the canonical endpoint of the
        node that was forked from will be

        available in the `/forked_from/links/related/href` key.  Otherwise, it
        will be null.


        ###Logs


        List of read-only log actions pertaining to the node.


        ###Node Links


        List of links (pointers) to other nodes on the OSF.  Node links can be
        added through this endpoint.


        ###Parent


        If this node is a child node of another node, the parent's canonical
        endpoint will be available in the

        `/parent/links/related/href` key.  Otherwise, it will be null.


        ###Registrations


        List of registrations of the current node.


        ###Root


        Returns the top-level node associated with the current node.  If the
        current node is the top-level node, the root is

        the current node.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - search
      summary: '*Read-Only*'
      operationId: search_projects_list
      responses:
        '200':
          description: ''
  '/{version})/search/registrations/':
    get:
      description: >-
        *Read-Only*


        Registrations that have been found by the given Elasticsearch query.


        <!--- Copied spiel from RegistrationDetail -->


        Node Registrations.


        Registrations are read-only snapshots of a project. This view is a list
        of all current registrations for which a user

        has access.  A withdrawn registration will display a limited subset of
        information, namely, title, description,

        date_created, registration, withdrawn, date_registered,
        withdrawal_justification, and registration supplement. All

        other fields will be displayed as null. Additionally, the only
        relationships permitted to be accessed for a withdrawn

        registration are the contributors - other relationships will return a
        403.


        Each resource contains the full representation of the registration,
        meaning additional requests to an individual

        registrations's detail view are not necessary.  Unregistered nodes
        cannot be accessed through this endpoint.


        <!--- Copied attributes from RegistrationDetail -->

        ##Registration Attributes


        Registrations have the "registrations" `type`.


        name                            type               description

        =======================================================================================================

        title                           string             title of the
        registered project or component

        description                     string             description of the
        registered node

        category                        string             bode category, must
        be one of the allowed values

        date_created                    iso8601 timestamp  timestamp that the
        node was created

        date_modified                   iso8601 timestamp  timestamp when the
        node was last updated

        tags                            array of strings   list of tags that
        describe the registered node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings   list of strings
        representing the permissions for the current user on this node

        fork                            boolean            is this project a
        fork?

        registration                    boolean            has this project been
        registered? (always true - may be deprecated in future versions)

        collection                      boolean            is this registered
        node a collection? (always false - may be deprecated in future versions)

        node_license                    object             details of the
        license applied to the node

        year                            string             date range of the
        license

        copyright_holders               array of strings   holders of the
        applied license

        public                          boolean            has this registration
        been made publicly-visible?

        withdrawn                       boolean            has this registration
        been withdrawn?

        date_registered                 iso8601 timestamp  timestamp that the
        registration was created

        embargo_end_date                iso8601 timestamp  when the embargo on
        this registration will be lifted (if applicable)

        withdrawal_justification        string             reasons for
        withdrawing the registration

        pending_withdrawal              boolean            is this registration
        pending withdrawal?

        pending_withdrawal_approval     boolean            is this registration
        pending approval?

        pending_embargo_approval        boolean            is the associated
        Embargo awaiting approval by project admins?

        registered_meta                 dictionary         registration
        supplementary information

        registration_supplement         string             registration template



        <!--- Copied relationships from RegistrationDetail -->

        ##Relationships


        ###Registered from


        The registration is branched from this node.


        ###Registered by


        The registration was initiated by this user.


        ###Other Relationships


        See documentation on registered_from detail view.  A registration has
        many of the same properties as a node.


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ## Query Params


        + `q=<Str>` -- Query to search registrations for, searches across a
        registration's title, description, tags, and contributor names.


        + `page=<Int>` -- page number of results to view, default 1


        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - search
      summary: '*Read-Only*'
      operationId: search_registrations_list
      responses:
        '200':
          description: ''
  '/{version})/search/users/':
    get:
      description: >-
        *Read-Only*


        Users that have been found by the given Elasticsearch query.


        <!-- Copied spiel from UserDetail -->


        The User Detail endpoint retrieves information about the user whose id
        is the final part of the path.  If `me`

        is given as the id, the record of the currently logged-in user will be
        returned.  The returned information includes

        the user's bibliographic information and the date the user registered.


        Note that if an anonymous view_only key is being used, user information
        will not be serialized, and the id will be

        an empty string. Relationships to a user object will not show in this
        case, either.


        <!-- Copied attributes from UserDetail -->


        ##Attributes


        OSF User entities have the "users" `type`.


        name               type               description

        ========================================================================================

        full_name          string             full name of the user; used for
        display

        given_name         string             given name of the user; for
        bibliographic citations

        middle_names       string             middle name of user; for
        bibliographic citations

        family_name        string             family name of user; for
        bibliographic citations

        suffix             string             suffix of user's name for
        bibliographic citations

        date_registered    iso8601 timestamp  timestamp when the user's account
        was created


        <!-- Copied relationships from UserDetail -->


        ##Relationships


        ###Nodes


        A list of all nodes the user has contributed to.  If the user id in the
        path is the same as the logged-in user, all

        nodes will be visible.  Otherwise, you will only be able to see the
        other user's publicly-visible nodes.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - search
      summary: '*Read-Only*'
      operationId: search_users_list
      responses:
        '200':
          description: ''
  '/{version})/taxonomies/':
    get:
      description: >-
        [PLOS taxonomy of subjects](http://journals.plos.org/plosone/browse/) in
        flattened form. *Read-only*


        ##Note

        **This API endpoint is under active development, and is subject to
        change in the future**


        ##Taxonomy Attributes


        name           type                   description

        ----------------------------------------------------------------------------

        text           array of strings       Actual text of the subject

        parents        array of subjects      Parent subjects, [] indicates a
        top level subject.


        ##Query Params


        + `field['id']=<subject_id>` -- Finds one subject with the given id

        + `field['text']=<Str>` -- Find subjects with texts that match the
        passed string


        + `filter[<fieldname>]=<Str>` -- fields and values to filter the search
        results on.

        + `filter['parents']=<subject_id>` -- Find subjects that have a parent
        with the id passed

        + `filter['parents']=null` -- Find top level subjects


        Subjects may be filtered by their 'text', 'parents', and 'id' fields.


        **Note:** Subjects are unique (e.g. there exists only one object in this
        list with `text='Biology and life sciences'`),

        but as per the structure of the PLOS taxonomy, subjects can exist in
        separate paths down the taxonomy and as such

        can have multiple parent subjects.


        Only the top three levels of the PLOS taxonomy are included.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - taxonomies
      summary: >-
        [PLOS taxonomy of subjects](http://journals.plos.org/plosone/browse/) in
        flattened form. *Read-only*
      operationId: taxonomies_list
      responses:
        '200':
          description: ''
  '/{version})/taxonomies/{taxonomy_id}/':
    get:
      description: >-
        [PLOS taxonomy subject](http://journals.plos.org/plosone/browse/)
        instance. *Read-only*


        ##Note

        **This API endpoint is under active development, and is subject to
        change in the future**


        ##Taxonomy Attributes


        See TaxonomyList


        **Note:** Subjects are unique (e.g. there exists only one object in this
        list with `text='Biology and life sciences'`),

        but as per the structure of the PLOS taxonomy, subjects can exist in
        separate paths down the taxonomy and as such

        can have multiple parent subjects.


        Only the top three levels of the PLOS taxonomy are included.
      parameters:
        - description: ''
          required: true
          type: string
          name: taxonomy_id
          in: path
        - description: ''
          required: true
          type: string
          name: version
          in: path
      tags:
        - taxonomies
      summary: >-
        [PLOS taxonomy subject](http://journals.plos.org/plosone/browse/)
        instance. *Read-only*
      operationId: taxonomies_read
      responses:
        '200':
          description: ''
  '/{version})/test/throttle/':
    get:
      tags:
        - test
      responses:
        '200':
          description: ''
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
      operationId: test_throttle_list
  '/{version})/tokens/':
    get:
      description: Get a list of personal access tokens that the user has registered
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - tokens
      summary: Get a list of personal access tokens that the user has registered
      operationId: tokens_list
      responses:
        '200':
          description: ''
    post:
      description: Get a list of personal access tokens that the user has registered
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - schema:
            required:
              - type
              - name
              - scopes
            type: object
            properties:
              scopes:
                type: string
                description: Governs permissions associated with this token
              type:
                type: string
                description: ''
              name:
                type: string
                description: 'A short, descriptive name for this token'
          name: data
          in: body
      tags:
        - tokens
      summary: Get a list of personal access tokens that the user has registered
      operationId: tokens_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
  '/{version})/tokens/{_id}/':
    get:
      description: >-
        Get information about a specific personal access token that the user has
        registered


        Should not return information if the token belongs to a different user
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: _id
          in: path
      tags:
        - tokens
      summary: >-
        Get information about a specific personal access token that the user has
        registered
      operationId: tokens_read
      responses:
        '200':
          description: ''
    put:
      description: >-
        Get information about a specific personal access token that the user has
        registered


        Should not return information if the token belongs to a different user
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: _id
          in: path
        - schema:
            required:
              - type
              - name
              - scopes
            type: object
            properties:
              scopes:
                type: string
                description: Governs permissions associated with this token
              type:
                type: string
                description: ''
              name:
                type: string
                description: 'A short, descriptive name for this token'
          name: data
          in: body
      tags:
        - tokens
      summary: >-
        Get information about a specific personal access token that the user has
        registered
      operationId: tokens_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Get information about a specific personal access token that the user has
        registered


        Should not return information if the token belongs to a different user
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: _id
          in: path
        - schema:
            type: object
            properties:
              scopes:
                type: string
                description: Governs permissions associated with this token
              type:
                type: string
                description: ''
              name:
                type: string
                description: 'A short, descriptive name for this token'
          name: data
          in: body
      tags:
        - tokens
      summary: >-
        Get information about a specific personal access token that the user has
        registered
      operationId: tokens_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    delete:
      description: >-
        Get information about a specific personal access token that the user has
        registered


        Should not return information if the token belongs to a different user
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: _id
          in: path
      tags:
        - tokens
      summary: >-
        Get information about a specific personal access token that the user has
        registered
      operationId: tokens_delete
      responses:
        '204':
          description: ''
  '/{version})/users/':
    get:
      description: >-
        List of users registered on the OSF.


        Paginated list of users ordered by the date they registered.  Each
        resource contains the full representation of the

        user, meaning additional requests to an individual user's detail view
        are not necessary.


        Note that if an anonymous view_only key is being used, user information
        will not be serialized, and the id will be

        an empty string. Relationships to a user object will not show in this
        case, either.


        The subroute [`/me/`](me/) is a special endpoint that always points to
        the currently logged-in user.


        ##User Attributes


        <!--- Copied Attributes From UserDetail -->


        OSF User entities have the "users" `type`.


        name               type               description

        ========================================================================================

        full_name          string             full name of the user; used for
        display

        given_name         string             given name of the user; for
        bibliographic citations

        middle_names       string             middle name of user; for
        bibliographic citations

        family_name        string             family name of user; for
        bibliographic citations

        suffix             string             suffix of user's name for
        bibliographic citations

        date_registered    iso8601 timestamp  timestamp when the user's account
        was created


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        *None*.


        ##Query Params


        + `page=<Int>` -- page number of results to view, default 1


        + `filter[<fieldname>]=<Str>` -- fields and values to filter the search
        results on.


        Users may be filtered by their `id`, `full_name`, `given_name`,
        `middle_names`, or `family_name`.


        + `profile_image_size=<Int>` -- Modifies `/links/profile_image_url` of
        the user entities so that it points to

        the user's profile image scaled to the given size in pixels.  If left
        blank, the size depends on the image provider.


        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - users
      summary: List of users registered on the OSF.
      operationId: users_list
      responses:
        '200':
          description: ''
  '/{version})/users/{user_id}/':
    get:
      description: >-
        Details about a specific user. *Writeable*.


        The User Detail endpoint retrieves information about the user whose id
        is the final part of the path.  If `me`

        is given as the id, the record of the currently logged-in user will be
        returned.  The returned information includes

        the user's bibliographic information and the date the user registered.


        Note that if an anonymous view_only key is being used, user information
        will not be serialized, and the id will be

        an empty string. Relationships to a user object will not show in this
        case, either.


        ##Attributes


        OSF User entities have the "users" `type`.


        name               type               description

        ========================================================================================

        full_name          string             full name of the user; used for
        display

        given_name         string             given name of the user; for
        bibliographic citations

        middle_names       string             middle name of user; for
        bibliographic citations

        family_name        string             family name of user; for
        bibliographic citations

        suffix             string             suffix of user's name for
        bibliographic citations

        date_registered    iso8601 timestamp  timestamp when the user's account
        was created


        ##Relationships


        ###Nodes


        A list of all nodes the user has contributed to.  If the user id in the
        path is the same as the logged-in user, all

        nodes will be visible.  Otherwise, you will only be able to see the
        other user's publicly-visible nodes.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
      tags:
        - users
      summary: Details about a specific user. *Writeable*.
      operationId: users_read
      responses:
        '200':
          description: ''
    put:
      description: >-
        Details about a specific user. *Writeable*.


        The User Detail endpoint retrieves information about the user whose id
        is the final part of the path.  If `me`

        is given as the id, the record of the currently logged-in user will be
        returned.  The returned information includes

        the user's bibliographic information and the date the user registered.


        Note that if an anonymous view_only key is being used, user information
        will not be serialized, and the id will be

        an empty string. Relationships to a user object will not show in this
        case, either.


        ##Attributes


        OSF User entities have the "users" `type`.


        name               type               description

        ========================================================================================

        full_name          string             full name of the user; used for
        display

        given_name         string             given name of the user; for
        bibliographic citations

        middle_names       string             middle name of user; for
        bibliographic citations

        family_name        string             family name of user; for
        bibliographic citations

        suffix             string             suffix of user's name for
        bibliographic citations

        date_registered    iso8601 timestamp  timestamp when the user's account
        was created


        ##Relationships


        ###Nodes


        A list of all nodes the user has contributed to.  If the user id in the
        path is the same as the logged-in user, all

        nodes will be visible.  Otherwise, you will only be able to see the
        other user's publicly-visible nodes.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - schema:
            required:
              - id
              - type
              - full_name
            type: object
            properties:
              suffix:
                type: string
                description: ''
              personal_website:
                type: string
                description: ''
              locale:
                type: string
                description: ''
              twitter:
                type: string
                description: ''
              ssrn:
                type: string
                description: ''
              full_name:
                type: string
                description: Display name used in the general user interface
              timezone:
                type: string
                description: ''
              id:
                type: string
                description: ''
              middle_names:
                type: string
                description: For bibliographic citations
              academia_institution:
                type: string
                description: ''
              given_name:
                type: string
                description: For bibliographic citations
              impactstory:
                type: string
                description: ''
              type:
                type: string
                description: ''
              linkedin:
                type: string
                description: ''
              scholar:
                type: string
                description: ''
              family_name:
                type: string
                description: For bibliographic citations
              github:
                type: string
                description: ''
              academia_profile_id:
                type: string
                description: ''
              researcherid:
                type: string
                description: ''
              baiduscholar:
                type: string
                description: ''
              orcid:
                type: string
                description: ''
              researchgate:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - users
      summary: Details about a specific user. *Writeable*.
      operationId: users_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Details about a specific user. *Writeable*.


        The User Detail endpoint retrieves information about the user whose id
        is the final part of the path.  If `me`

        is given as the id, the record of the currently logged-in user will be
        returned.  The returned information includes

        the user's bibliographic information and the date the user registered.


        Note that if an anonymous view_only key is being used, user information
        will not be serialized, and the id will be

        an empty string. Relationships to a user object will not show in this
        case, either.


        ##Attributes


        OSF User entities have the "users" `type`.


        name               type               description

        ========================================================================================

        full_name          string             full name of the user; used for
        display

        given_name         string             given name of the user; for
        bibliographic citations

        middle_names       string             middle name of user; for
        bibliographic citations

        family_name        string             family name of user; for
        bibliographic citations

        suffix             string             suffix of user's name for
        bibliographic citations

        date_registered    iso8601 timestamp  timestamp when the user's account
        was created


        ##Relationships


        ###Nodes


        A list of all nodes the user has contributed to.  If the user id in the
        path is the same as the logged-in user, all

        nodes will be visible.  Otherwise, you will only be able to see the
        other user's publicly-visible nodes.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - schema:
            type: object
            properties:
              suffix:
                type: string
                description: ''
              personal_website:
                type: string
                description: ''
              locale:
                type: string
                description: ''
              twitter:
                type: string
                description: ''
              ssrn:
                type: string
                description: ''
              full_name:
                type: string
                description: Display name used in the general user interface
              timezone:
                type: string
                description: ''
              id:
                type: string
                description: ''
              middle_names:
                type: string
                description: For bibliographic citations
              academia_institution:
                type: string
                description: ''
              given_name:
                type: string
                description: For bibliographic citations
              impactstory:
                type: string
                description: ''
              type:
                type: string
                description: ''
              linkedin:
                type: string
                description: ''
              scholar:
                type: string
                description: ''
              family_name:
                type: string
                description: For bibliographic citations
              github:
                type: string
                description: ''
              academia_profile_id:
                type: string
                description: ''
              researcherid:
                type: string
                description: ''
              baiduscholar:
                type: string
                description: ''
              orcid:
                type: string
                description: ''
              researchgate:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - users
      summary: Details about a specific user. *Writeable*.
      operationId: users_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
  '/{version})/users/{user_id}/addons/':
    get:
      description: >-
        List of addons authorized by this user *Read-only*


        Paginated list of user addons ordered by their `id` or
        `addon_short_name`.


        ###Permissions


        <Addon>UserSettings are visible only to the user that "owns" them.


        ## <Addon\>UserSettings Attributes


        OSF <Addon\>UserSettings entities have the "user_addons" `type`, and
        their `id` indicates the addon

        service provider (eg. `box`, `googledrive`, etc).


        name                type        description

        =====================================================================================

        user_has_auth       boolean     does this user have access to use an
        ExternalAccount?


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - users
      summary: List of addons authorized by this user *Read-only*
      operationId: users_addons_list
      responses:
        '200':
          description: ''
  '/{version})/users/{user_id}/addons/{provider}/':
    get:
      description: >-
        Detail of an individual addon authorized by this user *Read-only*


        ##Permissions


        <Addon>UserSettings are visible only to the user that "owns" them.


        ## <Addon\>UserSettings Attributes


        OSF <Addon\>UserSettings entities have the "user_addons" `type`, and
        their `id` indicates the addon

        service provider (eg. `box`, `googledrive`, etc).


        name                type        description

        =====================================================================================

        user_has_auth       boolean     does this user have access to use an
        ExternalAccount?


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - description: ''
          required: true
          type: string
          name: provider
          in: path
      tags:
        - users
      summary: Detail of an individual addon authorized by this user *Read-only*
      operationId: users_addons_read
      responses:
        '200':
          description: ''
  '/{version})/users/{user_id}/addons/{provider}/accounts/':
    get:
      description: >-
        List of an external_accounts authorized by this user *Read-only*


        ##Permissions


        ExternalAccounts are visible only to the user that has ownership of
        them.


        ## ExternalAccount Attributes


        OSF ExternalAccount entities have the "external_accounts" `type`, with
        `id` indicating the

        `external_account_id` according to the OSF


        name            type        description

        =====================================================================================================

        display_name    string      Display name on the third-party service

        profile_url     string      Link to users profile on third-party service
        *presence varies by service*

        provider        string      short_name of third-party service provider


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - description: ''
          required: true
          type: string
          name: provider
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - users
      summary: List of an external_accounts authorized by this user *Read-only*
      operationId: users_addons_accounts_list
      responses:
        '200':
          description: ''
  '/{version})/users/{user_id}/addons/{provider}/accounts/{account_id}/':
    get:
      description: >-
        Detail of an individual external_account authorized by this user
        *Read-only*


        ##Permissions


        ExternalAccounts are visible only to the user that has ownership of
        them.


        ## ExternalAccount Attributes


        OSF ExternalAccount entities have the "external_accounts" `type`, with
        `id` indicating the

        `external_account_id` according to the OSF


        name            type        description

        =====================================================================================================

        display_name    string      Display name on the third-party service

        profile_url     string      Link to users profile on third-party service
        *presence varies by service*

        provider        string      short_name of third-party service provider


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - description: ''
          required: true
          type: string
          name: account_id
          in: path
        - description: ''
          required: true
          type: string
          name: provider
          in: path
      tags:
        - users
      summary: >-
        Detail of an individual external_account authorized by this user
        *Read-only*
      operationId: users_addons_accounts_read
      responses:
        '200':
          description: ''
  '/{version})/users/{user_id}/institutions/':
    get:
      tags:
        - users
      responses:
        '200':
          description: ''
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      operationId: users_institutions_list
  '/{version})/users/{user_id}/nodes/':
    get:
      description: >-
        List of nodes that the user contributes to. *Read-only*.


        Paginated list of nodes that the user contributes to ordered by
        `date_modified`.  User registrations are not available

        at this endpoint. Each resource contains the full representation of the
        node, meaning additional requests to an individual

        node's detail view are not necessary. If the user id in the path is the
        same as the logged-in user, all nodes will be

        visible.  Otherwise, you will only be able to see the other user's
        publicly-visible nodes.  The special user id `me`

        can be used to represent the currently logged-in user.


        ##Node Attributes


        <!--- Copied Attributes from NodeDetail -->


        OSF Node entities have the "nodes" `type`.


        name                            type               description

        =================================================================================

        title                           string             title of project or
        component

        description                     string             description of the
        node

        category                        string             node category, must
        be one of the allowed values

        date_created                    iso8601 timestamp  timestamp that the
        node was created

        date_modified                   iso8601 timestamp  timestamp when the
        node was last updated

        tags                            array of strings   list of tags that
        describe the node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings   list of strings
        representing the permissions for the current user on this node

        registration                    boolean            is this a
        registration? (always false - may be deprecated in future versions)

        fork                            boolean            is this node a fork
        of another node?

        public                          boolean            has this node been
        made publicly-visible?

        collection                      boolean            is this a collection?
        (always false - may be deprecated in future versions)


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        *None*.


        ##Query Params


        + `page=<Int>` -- page number of results to view, default 1


        + `filter[<fieldname>]=<Str>` -- fields and values to filter the search
        results on.


        <!--- Copied Query Params from NodeList -->


        Nodes may be filtered by their `id`, `title`, `category`, `description`,
        `public`, `tags`, `date_created`, `date_modified`,

        `root`, `parent`, and `contributors`.  Most are string fields and will
        be filtered using simple substring matching.  `public`

        is a boolean, and can be filtered using truthy values, such as `true`,
        `false`, `0`, or `1`.  Note that quoting `true`

        or `false` in the query will cause the match to fail regardless.  `tags`
        is an array of simple strings.



        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - users
      summary: List of nodes that the user contributes to. *Read-only*.
      operationId: users_nodes_list
      responses:
        '200':
          description: ''
  '/{version})/users/{user_id}/preprints/':
    get:
      tags:
        - users
      responses:
        '200':
          description: ''
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      operationId: users_preprints_list
  '/{version})/users/{user_id}/registrations/':
    get:
      description: >-
        List of registrations that the user contributes to. *Read-only*.


        Paginated list of registrations that the user contributes to.  Each
        resource contains the full representation of the

        registration, meaning additional requests to an individual
        registration's detail view are not necessary. If the user

        id in the path is the same as the logged-in user, all nodes will be
        visible.  Otherwise, you will only be able to

        see the other user's publicly-visible nodes.  The special user id `me`
        can be used to represent the currently

        logged-in user.


        A withdrawn registration will display a limited subset of information,
        namely, title, description,

        date_created, registration, withdrawn, date_registered,
        withdrawal_justification, and registration supplement. All

        other fields will be displayed as null. Additionally, the only
        relationships permitted to be accessed for a withdrawn

        registration are the contributors - other relationships will return a
        403.


        ##Registration Attributes


        <!--- Copied Attributes from RegistrationList -->


        Registrations have the "registrations" `type`.


        name                            type               description

        =======================================================================================================

        title                           string             title of the
        registered project or component

        description                     string             description of the
        registered node

        category                        string             bode category, must
        be one of the allowed values

        date_created                    iso8601 timestamp  timestamp that the
        node was created

        date_modified                   iso8601 timestamp  timestamp when the
        node was last updated

        tags                            array of strings   list of tags that
        describe the registered node

        current_user_can_comment        boolean            Whether the current
        user is allowed to post comments

        current_user_permissions        array of strings   list of strings
        representing the permissions for the current user on this node

        fork                            boolean            is this project a
        fork?

        registration                    boolean            has this project been
        registered? (always true - may be deprecated in future versions)

        collection                      boolean            is this registered
        node a collection? (always false - may be deprecated in future versions)

        public                          boolean            has this registration
        been made publicly-visible?

        withdrawn                       boolean            has this registration
        been withdrawn?

        date_registered                 iso8601 timestamp  timestamp that the
        registration was created

        embargo_end_date                iso8601 timestamp  when the embargo on
        this registration will be lifted (if applicable)

        withdrawal_justification        string             reasons for
        withdrawing the registration

        pending_withdrawal              boolean            is this registration
        pending withdrawal?

        pending_withdrawal_approval     boolean            is this registration
        pending approval?

        pending_embargo_approval        boolean            is the associated
        Embargo awaiting approval by project admins?

        registered_meta                 dictionary         registration
        supplementary information

        registration_supplement         string             registration template



        ##Relationships


        ###Registered from


        The registration is branched from this node.


        ###Registered by


        The registration was initiated by this user.


        ###Other Relationships


        See documentation on registered_from detail view.  A registration has
        many of the same properties as a node.


        ##Links


        See the [JSON-API spec regarding
        pagination](http://jsonapi.org/format/1.0/#fetching-pagination).


        ##Actions


        *None*.


        ##Query Params


        + `page=<Int>` -- page number of results to view, default 1


        + `filter[<fieldname>]=<Str>` -- fields and values to filter the search
        results on.


        <!--- Copied Query Params from NodeList -->


        Registrations may be filtered by their `id`, `title`, `category`,
        `description`, `public`, `tags`, `date_created`, `date_modified`,

        `root`, `parent`, and `contributors`.  Most are string fields and will
        be filtered using simple substring matching.  `public`

        is a boolean, and can be filtered using truthy values, such as `true`,
        `false`, `0`, or `1`.  Note that quoting `true`

        or `false` in the query will cause the match to fail regardless.  `tags`
        is an array of simple strings.


        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - users
      summary: List of registrations that the user contributes to. *Read-only*.
      operationId: users_registrations_list
      responses:
        '200':
          description: ''
  '/{version})/users/{user_id}/relationships/institutions/':
    get:
      tags:
        - users
      responses:
        '200':
          description: ''
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      operationId: users_relationships_institutions_list
    delete:
      tags:
        - users
      responses:
        '204':
          description: ''
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: user_id
          in: path
      operationId: users_relationships_institutions_delete
  '/{version})/view_only_links/{link_id}/':
    get:
      description: >-
        Details about a specific view only link. *Read-only*.


        ###Permissions


        View only links are visible only to users that are administrators on all
        of the nodes which a view only link

        pertains to.


        ##Attributes


        OSF view only links entities have the "view-only-links" `type`.


        name                        type                    description

        ======================================================================================================

        name                        string                  name of the view
        only link

        anonymous                   boolean                 whether the view
        only link has anonymized contributors

        date_created                iso8601 timestamp       timestamp when the
        view only link was created

        key                         string                  the view only key



        ##Relationships


        ###Creator


        The user who created the view only link.


        ###Nodes


        The nodes which this view only link key gives read-only access to.


        ##Query Params


        *None*.


        #This Request/Response
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: link_id
          in: path
      tags:
        - view_only_links
      summary: Details about a specific view only link. *Read-only*.
      operationId: view_only_links_read
      responses:
        '200':
          description: ''
  '/{version})/view_only_links/{link_id}/nodes/':
    get:
      tags:
        - view_only_links
      responses:
        '200':
          description: ''
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: link_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      operationId: view_only_links_nodes_list
  '/{version})/view_only_links/{link_id}/relationships/nodes/':
    get:
      description: >-
        Relationship Endpoint for VOL -> Nodes Relationship


        Used to set, update, and retrieve the nodes associated with a view only
        link.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: link_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - view_only_links
      summary: Relationship Endpoint for VOL -> Nodes Relationship
      operationId: view_only_links_relationships_nodes_list
      responses:
        '200':
          description: ''
    post:
      description: >-
        Relationship Endpoint for VOL -> Nodes Relationship


        Used to set, update, and retrieve the nodes associated with a view only
        link.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: link_id
          in: path
        - schema:
            required:
              - data
            type: object
            properties:
              data:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - view_only_links
      summary: Relationship Endpoint for VOL -> Nodes Relationship
      operationId: view_only_links_relationships_nodes_create
      consumes:
        - application/json
      responses:
        '201':
          description: ''
    put:
      description: >-
        Relationship Endpoint for VOL -> Nodes Relationship


        Used to set, update, and retrieve the nodes associated with a view only
        link.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: link_id
          in: path
        - schema:
            required:
              - data
            type: object
            properties:
              data:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - view_only_links
      summary: Relationship Endpoint for VOL -> Nodes Relationship
      operationId: view_only_links_relationships_nodes_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    patch:
      description: >-
        Relationship Endpoint for VOL -> Nodes Relationship


        Used to set, update, and retrieve the nodes associated with a view only
        link.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: link_id
          in: path
        - schema:
            type: object
            properties:
              data:
                type: string
                description: ''
          name: data
          in: body
      tags:
        - view_only_links
      summary: Relationship Endpoint for VOL -> Nodes Relationship
      operationId: view_only_links_relationships_nodes_partial_update
      consumes:
        - application/json
      responses:
        '200':
          description: ''
    delete:
      description: >-
        Relationship Endpoint for VOL -> Nodes Relationship


        Used to set, update, and retrieve the nodes associated with a view only
        link.


        ##Actions


        ###Create
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: link_id
          in: path
      tags:
        - view_only_links
      summary: Relationship Endpoint for VOL -> Nodes Relationship
      operationId: view_only_links_relationships_nodes_delete
      responses:
        '204':
          description: ''
  '/{version})/wikis/{wiki_id}/':
    get:
      description: >-
        Details about a specific wiki. *Read-only*.


        ###Permissions


        Wiki pages on public nodes are given read-only access to everyone. Wiki
        pages on private nodes are only visible to

        contributors and administrators on the parent node.


        Note that if an anonymous view_only key is being used, the user
        relationship will not be exposed.


        ##Attributes


        OSF wiki entities have the "wikis" `type`.


        name                        type                   description

        ======================================================================================================

        name                        string             name of the wiki pag

        path                        string             the path of the wiki page

        materialized_path           string             the path of the wiki page

        date_modified               iso8601 timestamp  timestamp when the wiki
        was last updated

        content_type                string             MIME-type

        current_user_can_comment    boolean            Whether the current user
        is allowed to post comments

        extra                       object

        version                     integer            version number of the
        wiki



        ##Relationships


        ###User


        The user who created the wiki.


        ###Node


        The project that the wiki page belongs to.


        ###Comments


        The comments created on the wiki page.


        ##Links
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: wiki_id
          in: path
      tags:
        - wikis
      summary: Details about a specific wiki. *Read-only*.
      operationId: wikis_read
      responses:
        '200':
          description: ''
  '/{version})/wikis/{wiki_id}/content/':
    get:
      description: View for rendering wiki page content.
      parameters:
        - description: ''
          required: true
          type: string
          name: version
          in: path
        - description: ''
          required: true
          type: string
          name: wiki_id
          in: path
        - description: ''
          required: false
          type: string
          name: page
          in: query
        - description: ''
          required: false
          type: string
          name: 'page[size]'
          in: query
        - description: ''
          required: false
          type: string
          name: sort
          in: query
      tags:
        - wikis
      summary: View for rendering wiki page content.
      operationId: wikis_content_list
      responses:
        '200':
          description: ''
securityDefinitions:
  basic:
    type: basic
