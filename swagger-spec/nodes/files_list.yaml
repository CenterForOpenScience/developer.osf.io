# /nodes/{node_id}/files/{provider}/
# https://api.osf.io/v2/nodes/ezcuj/files/osfstorage/
get:
  summary: List all node files
  description: >-
    List of all the files/folders that are attached to your project
    for a given storage provider.

    ####Returns

    Returns a JSON object containing `data` and `links` keys.


    The `data` key contains an array of files.
    Each resource in the array is a separate file object and contains the full representation of the file.


    The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).


    ####Filtering


    You can optionally request that the response only include files that match your filters by utilizing the `filter` query parameter, e.g.
    https://api.osf.io/v2/nodes/ezcuj/files/osfstorage/?filter[kind]=file


    Node files may be filtered by `id`, `name`, `node`, `kind`, `path`, `provider`, `size`, and `last_touched`.


    ###Waterbutler API actions


    Files can be modified through the Waterbutler API routes found in `links` (`new_folder`, `move`, `upload`, `download`, and `delete`).


    #### Download (files)


    To download a file, issue a GET request against the download link. The response will have the Content-Disposition header set, which will will trigger a download in a browser.


    #### Create Subfolder (folders)


    You can create a subfolder of an existing folder by issuing a PUT request against the new_folder link. The ?kind=folder portion of the query parameter is already included in the new_folder link. The name of the new subfolder should be provided in the name query parameter. The response will contain a WaterButler folder entity. If a folder with that name already exists in the parent directory, the server will return a 409 Conflict error response.


    #### Upload New File (folders)


    To upload a file to a folder, issue a PUT request to the folder's upload link with the raw file data in the request body, and the kind and name query parameters set to 'file' and the desired name of the file. The response will contain a WaterButler file entity that describes the new file. If a file with the same name already exists in the folder, the server will return a 409 Conflict error response.


    #### Update Existing File (file)


    To update an existing file, issue a PUT request to the file's upload link with the raw file data in the request body and the kind query parameter set to "file". The update action will create a new version of the file. The response will contain a WaterButler file entity that describes the updated file.


    #### Rename (files, folders)


    To rename a file or folder, issue a POST request to the move link with the action body parameter set to "rename" and the rename body parameter set to the desired name. The response will contain either a folder entity or file entity with the new name.


    #### Move & Copy (files, folders)


    Move and copy actions both use the same request structure, a POST to the move url, but with different values for the action body parameters. The path parameter is also required and should be the OSF path attribute of the folder being written to. The rename and conflict parameters are optional. If you wish to change the name of the file or folder at its destination, set the rename parameter to the new name. The conflict param governs how name clashes are resolved. Possible values are replace and keep. replace is the default and will overwrite the file that already exists in the target folder. keep will attempt to keep both by adding a suffix to the new file's name until it no longer conflicts. The suffix will be ' (x)' where x is a increasing integer starting from 1. This behavior is intended to mimic that of the OS X Finder. The response will contain either a folder entity or file entity with the new name.

    Files and folders can also be moved between nodes and providers. The resource parameter is the id of the node under which the file/folder should be moved. It must agree with the path parameter, that is the path must identify a valid folder under the node identified by resource. Likewise, the provider parameter may be used to move the file/folder to another storage provider, but both the resource and path parameters must belong to a node and folder already extant on that provider. Both resource and provider default to the current node and providers.

    If a moved/copied file is overwriting an existing file, a 200 OK response will be returned. Otherwise, a 201 Created will be returned.


    #### Delete (file, folders)


    To delete a file or folder send a DELETE request to the delete link. Nothing will be returned in the response body.


  parameters:

    - in: path
      name: node_id
      type: string
      required: true
      description: 'The unique identifier of the node.'

    - in: path
      name: provider
      type: string
      required: true
      description: 'The unique identifier of the storage provider.'


  tags:
    - Nodes
  operationId: nodes_files_list
  x-response-schema: File
  responses:
    '200':
      description: 'OK'
      schema:
        type: array
        items:
          $ref: '../files/definition.yaml'
      examples:
        application/json:
          data:
          - relationships:
              node:
                links:
                  related:
                    href: https://api.osf.io/v2/nodes/ezcuj/
                    meta: {}
              comments:
                links:
                  related:
                    href: https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=sejcv
                    meta: {}
              versions:
                links:
                  related:
                    href: https://api.osf.io/v2/files/553e69248c5e4a219919ea54/versions/
                    meta: {}
            links:
              info: https://api.osf.io/v2/files/553e69248c5e4a219919ea54/
              self: https://api.osf.io/v2/files/553e69248c5e4a219919ea54/
              move: https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54
              upload: https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54
              download: https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54
              delete: https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54
            attributes:
              extra:
                hashes:
                  sha256: 2450eb9ff3db92a1bff370368b0552b270bd4b5ca0745b773c37d2662f94df8e
                  md5: 44325d4f13b09f3769ede09d7c20a82c
                downloads: 447
              kind: file
              name: OSC2012.pdf
              last_touched: '2015-09-18T01:11:16.328000'
              materialized_path: "/OSC2012.pdf"
              date_modified: '2014-10-17T19:24:12.264Z'
              current_version: 1
              delete_allowed: true
              date_created: '2014-10-17T19:24:12.264Z'
              provider: osfstorage
              path: "/553e69248c5e4a219919ea54"
              current_user_can_comment: true
              guid: sejcv
              checkout:
              tags: []
              size: 216945
            type: files
            id: 553e69248c5e4a219919ea54
          links:
            first:
            last:
            prev:
            next:
            meta:
              total: 1
              per_page: 10
