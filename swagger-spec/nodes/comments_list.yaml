# /nodes/{node_id}/comments/
get:
  summary: List all comments
  description: >-

    A paginated list of comments related to a given node.


    The returned comments are sorted by their creation date, with the most recent
    comments appearing first.

    ####Permissions

    Comments on public nodes are given read-only access to everyone.


    If the node comment-level is `private`, only contributors have permission to comment.


    If the comment-level is `public`, any logged-in OSF user can comment.


    Comments on private nodes are only visible to contributors and administrators on the parent node.

    ####Returns

    Returns a JSON object containing `data` and `links` keys.


    The `data` key contains an array of comment objects.
    Each resource in the array is a separate comment object.


    The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).

    #### Filtering

    You can optionally request that the response only include comments that match your filters by utilizing the `filter` query parameter, e.g.
    https://api.osf.io/v2/nodes/ezcuj/comments/?filter[target_id]=jg7sezmdnt93


    Nodes may be filtered by their `deleted`, `target_id`, `date_created`, `date_modified`.


    Most fields are string fields and will be filtered using simple substring matching.
    Public and preprint are boolean fields, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**.
    Note that quoting `true` or `false` in the query will cause the match to fail.

  parameters:
    - in: path
      type: string
      name: node_id
      required: true
      description: 'The unique identifier of the node.'

  tags:
    - Nodes
  operationId: nodes_comments_list
  x-response-schema: Comment
  responses:
    '200':
      description: OK
      schema:
        type: array
        items:
          $ref: '../comments/definition.yaml'
      examples:
        application/json:
          data:
          - relationships:
              node:
                links:
                  related:
                    href: https://api.osf.io/v2/nodes/ezcuj/
                    meta: {}
              replies:
                links:
                  related:
                    href: https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=jg7sezmdnt93
                    meta: {}
              target:
                links:
                  related:
                    href: https://api.osf.io/v2/nodes/ezcuj/
                    meta:
                      type: nodes
              reports:
                links:
                  related:
                    href: https://api.osf.io/v2/comments/jg7sezmdnt93/reports/
                    meta: {}
              user:
                links:
                  related:
                    href: https://api.osf.io/v2/users/6yc8z/
                    meta: {}
            links:
              self: https://api.osf.io/v2/comments/jg7sezmdnt93/
            attributes:
              can_edit: false
              date_modified: '2016-04-01T04:45:44.123000'
              deleted: false
              is_ham: false
              has_children: false
              modified: false
              content: |-
                We have published a Bayesian reanalysis of this project at PLOS ONE: http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0149794

                I explain some of the context on my blog: http://alexanderetz.com/2016/02/26/the-bayesian-rpp-take-2/

                Please note that the analysis we use in this paper is very different from the analysis used in the blog I posted in the previous comment, so the results are different as well.
              has_report: false
              is_abuse: false
              date_created: '2016-02-27T13:50:24.240000'
              page: node
            type: comments
            id: jg7sezmdnt93
          - relationships:
              node:
                links:
                  related:
                    href: https://api.osf.io/v2/nodes/ezcuj/
                    meta: {}
              replies:
                links:
                  related:
                    href: https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=23pk9
                    meta: {}
              target:
                links:
                  related:
                    href: https://api.osf.io/v2/nodes/ezcuj/
                    meta:
                      type: nodes
              reports:
                links:
                  related:
                    href: https://api.osf.io/v2/comments/23pk9/reports/
                    meta: {}
              user:
                links:
                  related:
                    href: https://api.osf.io/v2/users/6yc8z/
                    meta: {}
            links:
              self: https://api.osf.io/v2/comments/23pk9/
            attributes:
              can_edit: false
              date_modified: '2016-04-01T04:45:37.437000'
              deleted: false
              is_ham: false
              has_children: false
              modified:
              content: In this blog http://wp.me/p4sgtg-o6 I conduct a Bayesian Re-analysis
                of the Reproducibility Project that gives a graded measure of replication success.
                In an attempt to avoid dichotomous success/fail replication outcomes, I calculate
                a continous outcome (Bayes factor) that answers the question, does the replication
                result fit more with the original reported effect or a null effect? Many replications
                are strong successes, many are strong failures, and there are many that lie
                somewhere in between.
              has_report: false
              is_abuse: false
              date_created: '2015-08-30T14:50:21.093000'
              page: node
            type: comments
            id: 23pk9
          links:
            first:
            last:
            prev:
            next:
            meta:
              total: 2
              per_page: 10
post:
  summary: Create a comment
  description: >-
    Create a comment on a given node overview page or a reply to a comment on that node.


    To create a comment on the node overview page, the target `type` would be "nodes" and the target `id` would be the node `id`.


    To reply to a comment on this node, the target `type` would be "comments" and the target `id` would be the `id` of the comment to reply to.

    ####Required

    A relationship object with a `data` key, containing the target (`comments` or `nodes`) type and a target `id` is required.

    In addition, the `content` attribute describing the relationship between the node and the comment is required.

    ####Returns

    Returns a JSON object with a data key containing the representation of the new comment, if the request is successful.


    If the request is unsuccessful, an `errors` key containing information about the failure will be returned.
    Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.



  parameters:
    - in: path
      type: string
      required: true
      name: node_id
      description: 'The unique identifier of the node you want to comment on.'

    - in: body
      name: body
      required: true
      schema:
        $ref: '../comments/definition.yaml'
  tags:
    - Nodes
  operationId: nodes_comment_create
  x-response-schema: Comment
  consumes:
    - application/json
  responses:
    '201':
      description: 'Success'
