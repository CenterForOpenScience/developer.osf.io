swagger: '2.0'
info:
  title: OSF APIv2 Documentation
  version: '2.0'
  contact:
    name: OSF
    email: support@osf.io
    url: 'https://osf.io/support'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://cdn.cos.io/media/images/cos_center_logo_small.original.png'
    backgroundColor: 'transparent'
host: 'api.test.osf.io'

schemes:
  - https
basePath: /v2
x-tagGroups:
  - name: Welcome
    tags:
      - Introduction
      - General Usage
      - Authentication
      - Pagination
      - Versioning
      - Filtering
      - Sparse Fieldsets
      - Embedding
      - Request Formatting
      - Errors & Error Codes
      - Entities & Entity Collections
  - name: API Reference
    tags:
      - Actions
      - Addons
      - Applications
      - Base
      - CEDAR Metadata
      - Citations
      - Comments
      - Collections
      - Collection Submissions
      - Collection Submissions Actions
      - Collection Providers
      - Custom Metadata
      - Files
      - Licenses
      - Logs
      - Institutions
      - Identifiers
      - Registration Schemas
      - Registration Schema Blocks
      - Schema Responses
      - Schema Response Actions
      - Nodes
      - Notification Subscriptions
      - Preprints
      - Preprint Providers
      - Draft Registrations
      - Registrations
      - Regions
      - OAuth Scopes
      - Taxonomies
      - Tokens
      - Users
      - View Only Links
      - Wikis
      - Subjects
      - GUIDs
      - Requests
      - Resources
tags:
  - name: Introduction
    x-traitTag: true
    description: >-
      Welcome to the Open Science Framework API. With this API you can access
      users, projects, components, logs, and files from the [Open Science
      Framework](https://osf.io/). The Open Science Framework (OSF) is a free,
      open-source service maintained by the [Center for Open
      Science](http://cos.io/).


      The OSF serves as a repository and archive for study designs, materials,
      data, manuscripts, or anything else associated with your research during
      the research process. Every project and file on the OSF has a permanent
      unique identifier, and every registration (a permanent, time-stamped
      version of your projects and files) can be assigned a DOI. You can
      use the OSF to measure your impact by monitoring the traffic to projects
      and files you make public. With the OSF you have full control of what
      parts of your research are public and what remains private.

  - name: General Usage
    x-traitTag: true
    description: >-
      The OSF API generally conforms to the [JSON-API v1.0 spec](http://jsonapi.org/format/1.0/).
      Where exceptions exist, they will be noted. Each endpoint will have its own documentation, but
      there are some general principles.

      Note: Assume undocumented routes/features/fields are unstable.

      #### Canonical URLs

      All canonical URLs have trailing slashes.  A request to an endpoint
      without a trailing slash will result in a **301 Redirect** to the canonical
      URL.  There are some exceptions when working with the Files API, so if a
      URL in a response does not have a slash, do not append one.

      #### Plurals

      Endpoints are always pluralized.  `/users/`, not `/user/`, `/nodes/`,
      not `/node/`.

      The only exception are the node and preprint citation endpoints, which are `/citation/`, not
      `/citations/`.

      #### Common Actions

      Every endpoint in the OSF API responds to `GET`, `HEAD`, and `OPTION` requests.

      You must have adequate permissions to interact with any endpoint.
      Unauthorized use will result in **401 Unauthorized** or **403 Forbidden** responses.

      Use `HEAD` to probe an endpoint and make sure your headers are well-formed.
      A `GET` request will return a representation of the entity or entity collection referenced by the endpoint.

      An `OPTIONS` request will return a JSON object that describes the endpoint, including the name, a description,
      the acceptable request formats, the allowed response formats, and any actions available via the endpoint.

      ### Testing

      The OSF provides public testing servers to test integrations against.

      #### Testing Server

      The test-* subdomains of the OSF are intended to match, at any given time, the current production environment of the Open Science Framework.

      We have staging servers that will have newer features, including newer API features, that aren't ready for production.
      However, because those servers are subject to the whims of QA and whichever group needs to do specific testing, they aren't particular stable for API developers.
      
      The `test` subdomains of the OSF are intended to match, at any given time, the current production environment of the OSF.
      The test servers linked below are primarily for developing your API application on a stable system.

      - Test web server: https://test.osf.io/

      - Test API server: https://api.test.osf.io/v2/

      - Test Files server (known as Waterbutler): https://files.us.test.osf.io/

      #### Ephemerality Notice

      Expect the server to be down from time to time while we update software, and don't expect data to persist indefinitely.
      We periodically run data migrations on the test servers without notice.

  - name: Authentication
    x-traitTag: true
    description: >-
      #### Token Auth

      To use a Personal Access Token, make an `Authorization` header with the contents `Bearer <token>` as shown in the example below, replacing `<token>` with your token.

          curl -X "GET" "https://api.osf.io/v2/users/me/" -H "Authorization: Bearer <token>"

      To make a Personal Access Token, visit your OSF settings page (either on the [OSF](https://osf.io/settings/tokens) or our [testing server](https://test.osf.io/settings/tokens)) to create one.
      You can limit the scope of the token, but remember that it has access to all of the information that you do within the limits of the scope, so be careful with your tokens.

      #### OAuth

      The OSF allows third-party web applications to connect to the OSF on behalf of other users via the OAuth 2.0 web application flow.

      You can add a developer application from the OSF settings page (either on the [OSF](https://osf.io/settings/applications) or our [testing server](https://osf.io/settings/applications)).

      You can check out the [OAuth SSO Guide](https://github.com/CenterForOpenScience/osf-cas/blob/develop/README_OAUTH_SSO_GUIDE.md) for options.

  - name: Pagination
    x-traitTag: true
    description: >-
      All entity collection endpoints respond to the `page` query parameter as described in the [JSON-API spec](http://jsonapi.org/format/#fetching-pagination).


      However, links to the first, last, previous, and next pages of results are provided in the `links` key of the response,
      and you are encouraged to use those rather than adding query parameters by hand.


      If there are only enough results to fill one page, the `first`, `last`, `prev`, and `next` links will be null.

      #### Versioning

      As of version `2.3`, pagination links conform to the JSON API specification.
      Meta information was pulled out of the `links` object and placed in a top-level `meta` object.


      The `meta` key contains the total number of entities available, as well as the current number of results displayed per page.

  - name: Versioning
    x-traitTag: true
    description: >-
      Versioning can be specified in three different ways:


      #### URL Path Versioning

      + `/v2/` is the only documented path, but only refers to the major version

      + A version specified via the URL path is a **required** part of the
      URL.

      + Only a major version can be specified via the URL path, i.e.
      `/v2.0.6/` is invalid, additionally, paths such as `/v2.0/` are invalid.

      + If the default version of the API is within the major version
      specified in the URL path, the default version will be applied (i.e. if
      the default version is `2.3` and the URL path is `/v2/`, then version
      returned will be `2.3`).

      + If the default version of the API is not within the major version
      specified in the URL path, the URL path version will be applied (i.e. if
      the default version is `3.0` and the URL path is `/v2/`, then the
      version returned will be `2.0`)


      #### Query Parameter Versioning

      + `/v2/nodes/?version=2.1.6`

      + Pinning to a specific version via a query parameter is **optional**.

      + A specific version (major, minor, or patch) for a single request can
      be specified via the `version` query parameter, as long as it is an
      allowed version.

      + If the version specified in the query parameter does not fall within
      the same major version specified in the URL path, i.e
      `/v2/nodes/?version=3.1.4` a 409 Conflict response will be returned.


      #### Header Versioning

      + `Accept-Header=application/vnd.api+json;version=3.0.1`

      + Pinning to a specific version via request header is **optional**.

      + A specific version (major, minor, or patch) for a single request can
      be specified via the `Accept Header` of the request, as long as it is an
      allowed version.

      + If the version specified in the header does not fall within the same
      major version specified in the URL path a 409 Conflict response will be
      returned.

      + If both a header version and query parameter version are specified,
      the versions must match exactly or a 409 Conflict response will be
      returned (i.e. one does not take precedence over the other).


      #### CHANGELOG

      `v2.1`

      + Pagination links conform to JSON API specification, i.e. `meta` information was pulled out of the `links` object and placed in a top-level `meta` object.

      + Deprecate the `node_links` field in the **Node** and **Registration** serializers in favor of `linked_nodes` and `linked_registrations`.


      `v2.2`

      + Modify institution nodes list so that affiliated components are also returned from `/v2/institutions/<id>/nodes/`.

      + Ensure all existing date fields are standardized on UTC.


      `v2.3`

      + Handle merged users more correctly on `/v2/users/`.


      `v2.4`

      + Deprecate the `parents` field in the **Taxonomies** serializer.

      + Deprecate the following fields in the **Preprint Provider** serializer:
          + `social_facebook`, `social_instagram`, and `social_twitter`
          + `banner_path`, `logo_path`, and `header_text`
          + `email_contact`

  - name: Filtering
    x-traitTag: true
    description: >-
      Entity collections can be filtered by adding a query parameter in the
      form:


      &nbsp;&nbsp;&nbsp;&nbsp;`filter[<fieldname>]=<matching information>`


      String queries are filtered using substring matching. For example, if
      you were trying to find [Lise Meitner](http://en.wikipedia.org/wiki/Lise_Meitner):


      &nbsp;&nbsp;&nbsp;&nbsp;`/users/?filter[full_name]=meitn`


      You can filter on multiple fields, or the same field in different ways, by &-ing the query parameters together.


      &nbsp;&nbsp;&nbsp;&nbsp;`/users/?filter[full_name]=lise&filter[family_name]=mei`


      Boolean fields should be queried with `true` or `false`.


      &nbsp;&nbsp;&nbsp;&nbsp;`/nodes/?filter[registered]=true`


      You can request multiple resources by filtering on id and placing comma-separated values in your query parameter.


      &nbsp;&nbsp;&nbsp;&nbsp;`/nodes/?filter[id]=aegu6,me23a`


      You can filter with case-sensitivity or case-insensitivity by using `contains` and `icontains`, respectively.


      &nbsp;&nbsp;&nbsp;&nbsp;`/nodes/?filter[tags][icontains]=help`

  - name: Sparse Fieldsets
    x-traitTag: true
    description: |
      All endpoints respond to the `fields` query parameter as described in the [JSON-API spec](http://jsonapi.org/format/#fetching-sparse-fieldsets).


      From the specification:

      <blockquote>
        <p>A client MAY request that an endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] parameter.</p>
        <p>The value of the fields parameter MUST be a comma-separated (U+002C COMMA, “,”) list that refers to the name(s) of the fields to be returned.</p>
        <p>If a client requests a restricted set of fields for a given resource type, an endpoint MUST NOT include additional fields in resource objects of that type in its response.</p>
      </blockquote>

      #### Basic Usage

      When making a request to an endpoint that returns a serialized object of some `type`, you can specify `fields[<type>]=<comma,separated,list,of,fields>` to receive a subset of the object's fields in the response.


      For example, the request below will serialize only the `title` attribute and `children` relationship for each node in the response.


      https://api.osf.io/v2/nodes/?fields[nodes]=title,children


      Sparse fieldsets can be used to restrict both attribute and relationship fields.
      Note that top-level objects (such as `type`, `id`, `attributes`, `relationships`, and `links`) will always be serialized and cannot be excluded.

      #### Advanced Usage

      Sparse fieldsets can be used to restrict any entity returned in the response.


      For example, the request below will serialize only the `full_name` attribute for each user (auto-embedded by the `embed=contributors` query parameter), and the `title` attribute for each node.


      https://api.osf.io/v2/nodes/?fields[nodes]=title,contributors&embed=contributors&fields[users]=full_name


      Any field specified in another query parameters used by the serializer (e.g. `embed`) must also be included in the sparse fieldset.
      For example, fields that are being embedded on the sparse type (e.g. `nodes`) must also be included in `fields[<type>]` when using embeds, or the embed will be invalid.


      A request to embed contributors and restrict nodes to only return the `title` attribute should have the form:


      https://api.osf.io/v2/nodes/?embed=contributors&fields[nodes]=title,contributors


      **NOT**


      https://api.osf.io/v2/nodes/?embed=contributors&fields[nodes]=title

  - name: Embedding
    x-traitTag: true
    description: >-
      All related resources that appear in the `relationships` attribute are embeddable,
      meaning it is possible to fetch a node and its contributors in a single request by adding a query parameter like:


      &nbsp;&nbsp;&nbsp;&nbsp;`/nodes/?embed=contributors`


      The embedded results will have the following structure:


      &nbsp;&nbsp;&nbsp;&nbsp;`{relationship_name}: {full_embedded_response}`


      Where `full_embedded_response` means the full API response resulting from a **GET** request to the `href` link of the corresponding related
      resource.


      This means if there are no errors in processing the embedded request the response will have the format:


      &nbsp;&nbsp;&nbsp;&nbsp;`data: {response}`


      And if there are errors processing the embedded request the response will have the format:


      &nbsp;&nbsp;&nbsp;&nbsp;`errors: {errors}`


      Multiple embeds can be achieved with multiple query parameters separated by "&".


      &nbsp;&nbsp;&nbsp;&nbsp;`/nodes/?embed=contributors&embed=comments`


      Some endpoints are automatically embedded, such as the [node contributors](#operation/nodes_contributors_list) endpoint, which automatically embeds user information.

  - name: Request Formatting
    x-traitTag: true
    description: >-
      ## Attribute Validation

      Endpoints that allow creation or modification of entities generally limit updates to certain attributes of the entity.


      If you attempt to set an attribute that does not permit updates (such as a `date_created` timestamp), the API will silently ignore that attribute.


      This will not affect the response from the API: if the request would have succeeded without the updated attribute, it will still report as successful.
      Likewise, if the request would have failed without the attribute update, the API will still report a failure.


      Typoed or non-existent attributes will behave the same as non-updatable attributes and will be silently ignored.
      If a request is not working the way you expect, make sure to double check your spelling.

      ## Create/Update Requests

      #### Formatting POST/PUT/PATCH Request Bodies

      The OSF API follows the JSON-API spec for [create and update requests](http://jsonapi.org/format/1.0/#crud).
      This means all request bodies must be wrapped with some metadata.


      Each request body must be an object with a `data` key containing at least a `type` member.
      The value of the `type` member must agree with the `type` of the entities represented by the endpoint.
      If not, a **409 Conflict** will be returned.


      The request should also contain an `attributes` member with an object containing the key-value pairs to be created/updated.


      **PUT/PATCH** requests must also have an `id` key that matches the ID part of the endpoint you are making a request to.
      If the `id` key does not match the ID part of the URL path, a **409 Conflict** error will be returned.


      #### Creating a Node via POST Example

          POST /v2/nodes/
          {
            "data": {
              "type": "nodes",
              "attributes": {
                "title" : "A Phylogenetic Tree of Famous Internet Cats",
                "category" : "project",
                "description" : "How closely related are Grumpy Cat and C.H. Cheezburger? Is memefulness inheritable?"
              }
            }
          }


      #### Updating a User via PUT Example

          PUT /v2/users/me/
          {
            "data": {
              "id": "3rqxc",
              "type": "users",
              "attributes": {
                "full_name" : "Henrietta Swan Leavitt",
                "given_name" : "Henrietta",
                "middle_names" : "Swan",
                "family_name" : "Leavitt"
              }
            }
          }

      **Note:** If you PUT/PATCH to the `/users/me/` endpoint, you must still provide your full user id in the `id` field of the request.  We do not support using the `me` alias in request bodies at this time.


      #### PUT vs. PATCH

      For most endpoints that support updates via **PUT** requests, we also allow **PATCH** updates.


      **PUT** requests require all mandatory attributes to be set, even if their value is unchanged.
      **PATCH** requests may omit mandatory attributes, whose value will be unchanged.

  - name: Errors & Error Codes
    x-traitTag: true
    description: >-
      ## Errors

      When a request fails for any reason, the OSF API will return an appropriate HTTP response code and include a descriptive error in the body of the response.


      The response body will be a JSON object with a key, `errors`, pointing to an array of error objects.


      In general, these error objects will consist of a `detail` key with a detailed error message and a `source` object that may contain a field `pointer` that is a
      [JSON Pointer](https://tools.ietf.org/html/rfc6901) to the error-causing attribute.


      The `error` objects may include additional information in accordance with the [JSON-API error spec](http://jsonapi.org/format/1.0/#error-objects).


      #### Example

      An error response from an incorrect create node request:

          {
            "errors": [
              {
                "source": {
                  "pointer": "/data/attributes/category"
                },
                "detail": "This field is required."
              },
              {
                "source": {
                  "pointer": "/data/type"
                },
                "detail": "This field may not be null."
              },
              {
                "source": {
                  "pointer": "/data/attributes/title"
                },
                "detail": "This field is required."
              }
            ]
          }

      ## Error Codes

      The OSF API uses conventional HTTP response codes to indicate the success or failure of an API request.


      In general, codes in the `2xx` range indicate success,
      codes in the `4xx` range indicate an error that failed given the information provided
      (e.g., a required parameter was omitted, invalid authentication credentials were provided, etc.),
      and codes in the `5xx` range indicate an error with our API servers (these are rare, and if they occur consistently, should be [reported](mailto:support@osf.io)).


      `200` **OK**


      The request was successful and everything worked as expected.


      `201` **Created**


      The request was successful and a new resource was created. The newly created resource can be referenced by the ID returned in the response.


      `204` **No Content**


      The request was sucessful but does not need to return an entity-body.


      `400` **Bad Request**


      The request was unacceptable, often due to a missing required parameter or malformed data.


      `401` **Unauthorized**


      The request requires user authentication, which was not provided.


      `403` **Forbidden**


      The request was understood but not fulfilled, most likely due to invalid permissions.


      `404` **Not Found**


      The requested resource does not exist.


      `405` **Method Not Allowed**


      The method specified in the request is not allowed for the resource.


      `409` **Conflict**


      The request could not be completed due to a conflict with the current state of the resource or within the request data.


      `410` **Gone**


      The requested resource is no longer available, most likely because it was deleted.


      `429` **Too Many Requests**


      The user has sent too many requests in a given amount of time.


      Wait at least the amount of time specified in the `Retry-After` header of the response before sending another request.


      Authenticated requests have a rate limit of 10,000/day.


      Unauthenticated requests have a rate limit of 100/hour.


      `5xx` **Server Errors**


      The API server encountered an unexpected error.

  - name: Entities & Entity Collections
    x-traitTag: true
    description: >-
      ## Entities

      An entity is a single resource that has been retrieved from the API, usually from an endpoint with the entity's ID as the final path part.
      A successful response from an entity request will be a JSON object with a top level `data` key pointing to a sub-object with the following members:

      #### ID

      The identifier for the entity.  This **MUST** be included with all PUT and PATCH requests.

      #### Type

      The type identifier of this entity.  This **MUST** be included with all create and update requests.

      #### Attributes

      The properties of the entity.  Names, descriptions, etc.

      #### Relationships

      Relationships are URLs to other entities or entity collections that have a relationship to the entity.


      For example, the node entity provides a `contributors` relationship that points to the endpoint to retrieve all contributors to that node.
      It is recommended to use these links rather than to filter general entity collection endpoints by IDs.
      They'll be faster, easier, and less error-prone.


      Generally a relationship will have the following structure:


          {relationship_name}: {
            "links": {
              "related": {
                "href": {url_to_related_entity_or_entity_collection},
                "meta": {}
              }
            }
          }


      If there are no related entities, `href` will be null.

      #### Embeds

      Please see the [embedding](#tag/Embedding) documentation.

      #### Links

      Links are urls to alternative representations of the entity or actions that may be performed on the entity.


      Most entities will provide a `self` link that is the canonical endpoint for the entity where update and delete requests should be sent.
      Most entities will also provide an `html` link that directs to the entity's page on the Open Science Framework.

      ## Entity Collections

      Entity collection endpoints return a list of entities and an additional data structure with pagination links,
      such as `next`, `prev`, `first`, and `last`.


      The OSF API limits all entity collection responses to a maximum of 10 entities.


      The response object has two keys:

      #### Data

      The `data` key is an array of entities that match the query.


      Each entity in the array is the same representation that is returned from that entity's `self` link, meaning that refetching the entity is unnecessary.

      #### Links

      The `links` key contains pagination information, including links to the previous, next, first, and last pages of results.


      The `meta` key contains the total number of entities available, as well as the current number of results displayed per page.

      If there are only enough results to fill one page, the `first`, `last`, `prev`, and `next` values will be null.

  - name: Addons
    description: >-
      Addons represent a user connection to an external service, some addons allow for additional storage,
      some modify user authentication or add a redirect link to a project.

  - name: Base
    description: >-
      This is the "home page" of the API you can get important autentication information for the user making
      the request and get links to other resources.

  - name: CEDAR Metadata
    description: >-
      CEDAR Metadata endpoints allow you to create, read, update, and manage metadata records based on CEDAR templates.
      These templates enable users to apply structured, standardized metadata to nodes and files for improved
      data sharing, discoverability, and interoperability. CEDAR Metadata records are associated with OSF resources
      and can be published or kept private depending on user permissions and workflow.

  - name: Custom Metadata
    description: >-
      Custom Metadata endpoints allow users to manage freeform or structured metadata associated with OSF nodes and files.
      Unlike CEDAR metadata, Custom Metadata provides more flexible fields tailored to specific research needs or
      institutional requirements. Users can create, view, and edit metadata records that describe files or items in OSF,
      including funder information, language, resource type, and more.

  - name: Wikis
    description: >-
      The Wikis endpoints allow users to create, update, retrieve, and manage wiki pages and their versions for OSF projects
      and registrations. Wikis are collaborative documents that enable teams to share information and document their
      research process directly within OSF. Each wiki page maintains a version history, providing transparency and
      accountability over changes.

  - name: Subjects
    description: >-
      Subjects endpoints provide access to the taxonomy used for categorizing OSF resources such as nodes, preprints,
      and registrations. Subjects can be hierarchical, with parent and child relationships, allowing for
      fine-grained classification. This enables better organization and discoverability of research content
      across the OSF ecosystem.

  - name: GUIDS
    description: >-
      GUID endpoints resolve OSF Globally Unique Identifiers (GUIDs) to their corresponding resources, such as
      nodes, users, files, registrations, preprints, and collections. These endpoints allow you to retrieve metadata
      about a resource or redirect to the appropriate resource-specific endpoint for further actions.
      GUIDs are a fundamental part of OSF's resource identification system.

  - name: Requests
    description: >-
      Requests endpoints handle formal user submissions for actions such as requesting access to private content,
      withdrawal of preprints, and affiliation requests. Requests can be associated with nodes, preprints, or other
      resources and go through a workflow process including approval, rejection, and moderation actions.
      These endpoints facilitate transparency and control over changes and user interactions within OSF.

  - name: Resources
    description: >-
      Resources endpoints manage research-related resources (outcome artifacts) connected to OSF registrations.
      These resources can include datasets, software, materials, papers, and supplementary files. The endpoints
      support creating, retrieving, updating, and finalizing resources, making them an integral part of OSF's
      open science workflow and enabling accurate documentation and discoverability of research outputs.

  - name: Registration Schemas
    description: >-
      A Registration Schemas defines the range of valid responses to a registration. Each Registration
      Schema is composed of <a href="#tag/Registration-Schema-Blocks">"blocks"</a> that define the individual questions a user responds to. Registration Schemas are
      created by the Center for Open Science or an affiliated institution and periodically migrated into the system.
      Registration Schemas are updated and deactivated using an internal versioning system.

  - name: Registration Schema Blocks
    description: >-
      Registration Schema Blocks are read-only entities, they represent question prompts and form inputs known as
      "blocks" that make up a Registration Schemas. Each block has a designated `block_type` that determines what type
      of information that Schema Block's corresponding block in the Schema Response.

  - name: Schema Responses
    description: >-
      Schema Responses contain user supplied responses to a Registration Schema. A Schema Response
      aggregates all of the the responses for a given version of a Registration's Registration Schema.
      Schema Responses are created when a Registration is completed. Once a Registration is completed the
      Schema Responses for a Registration can be revisied and updated by using it's associated action endpoints.


      There are a few states for Schema Responses:

        - `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you
        must create a Schema Response Action that triggers a new submission.

        - `in_progess` is the state of a Schema Response where the response is editable and still private, Schema
        Responses are editted via a PATCH request as specified below.

        - `unapproved` is the state of a Schema Response where edits have been made and "locked-in", now contributors
        have the ability to reject the changes, however if they are not rejected changes are automatically approved
        after 48 hours. If `unapproved` Schema Responses are rejected, they are returned to the `in_progress` state. If
        `unapproved` Schema Responses are approved they either enter an `approved` state or go into a
        `pending_moderation` to be accepted or denied by a moderator.

        - `pending_moderation` is the state of a Schema Response where moderators have an opportunity to reject or
        approve a Schema Response that has been approved by it's contributors. This state is only reachable for Schema
        Responses that are associated with a Registration that has Registration Provider a moderated workflow.

        - `approved` is the state of a Schema Response where it is public and immutable, in order to update an approved
        Schema Response a new one must be created.

  - name: Schema Response Actions
    description: >-
      Schema Response Actions are objects that when created cause state transitions for Schema Responses.
      Users use state transitions to submit, approve, and revise new Schema Responses.


      Schema Response Actions have a few different triggers to cause state transitions:

        - `submit` is a trigger to transition a Schema Response from an `in_progress` state to an `unapproved` state,
        this freezes edits for the Schema Response and allows all admin contributors to the Schema Response's
        Registration to either approved or reject the Schema Response.

        - `approve` is a trigger to transition a Schema Response from an `unapproved` state to an `approved` state, this
        makes the Schema Response changes public completing the update of the Schema Response. On Schema Responses that
        are associated with a Registration that has Registration Provider a moderated workflow the `approve` trigger
        will transition the Schema Response to `pending_moderation`.

        - `accept` is a trigger to transition a Schema Response from an `pending_moderation` state to an `approved`
        state. This trigger is only valid for Schema Responses that are associated with a Registration that has
        Registration Provider a moderated workflow and only possible for a user designated as moderator of a
        Registration Provider.

        - `admin_reject` is a trigger to transition a Schema Response from an `unapproved` state to an
        `in_progress`  state. This trigger allows users to reject purposed changes to a Schema Response.

        - `moderator_reject` is a trigger to transition a Schema Response from an `pending_moderation` state to an
        `in_progress`  state. This trigger is only valid for Schema Responses that are associated with a Registration
        that has Registration Provider a moderated workflow and only possible for a user designated as moderator of a
        Registration Provider.
  - name: Draft Registrations
    description: >-

      A Draft Registration is a object that allows a user to edit and revise a registration before it is registered.
      Draft Registrations allow contributors to coordinate on a single registration, so they can upload files and change
      Registration metadata before the Registration is archived.
  - name: Collection Submissions

    description: >-

      A Collection Submission is an object that allows a user to add a resource, either a project, preprint, or
      registration to a collection. Once created, a Collection Submission may be automatically accepted or await
      moderation. Once a Collection Submission is in a moderation state, an assigned moderator may accept or reject the
      submission.

      There are a few states for Collection Submissions:

        - `in_progress` is the initial state of a Collection Submission where the resource is editable and still private.

        - `pending` is the state where the Collection Submission is awaiting moderation.

        - `accepted` means the Collection Submission has been approved and added to the collection.

        - `rejected` means the Collection Submission has been declined by the moderator.

        - `removed` means the Collection Submission has been removed from the collection, after initial acceptance.

  - name: Collection Submissions Actions

    description: >-
      A Collection Submission Action is an object that triggers a change in the moderation state of a Collection
      Submission and works as a record to log all previous transitions for a Collection Submission.

      Collection Submission Actions have a few different triggers to cause state transitions:

        - `submit` is used to move a Collection Submission from the `in_progress` to the `pending` state, indicating the
          submission is in a `pending` state, ready for moderation.

        - `accept` is used by moderators to approve a Collection Submission, changing its state to `accepted`.

        - `reject` is used by moderators to reject a Collection Submission, changing its state to `rejected`.

        - `remove` is used to permanently remove a Collection Submission from the moderation queue,
          changing its state to `removed`.

        - `resubmit` is used to resubmit a previously rejected or removed Collection Submission, moving it back to the
          `pending` state from the `rejected` or `removed` state.

        - `cancel` is used to cancel a Collection Submission in a `pending` state, reverting it back to the
          `in_progress`.

  - name: Collection Submissions Provider
    description: >-
      A Collection Submissions Provider represents the data for moderators and admins for a group of collections.
      It acts as a central hub for managing all collection submissions within various collections, ensuring that
      the moderation process is handled efficiently and consistently across different collections.

      The Collection Submissions Provider holds important information, such as the list of moderators and admins, and the
      moderation rules for all collections under its umbrella. Historical data about past collection submissions
      and their states is saved via Collection Submission Actions.

      Through the Collection Submissions Provider, moderators can oversee the state of all submissions in
      collections they manage, ensuring that each submission follows the appropriate state transitions and
      adheres to the standards set for collection submissions. It aids in providing transparency and order to the
      process of managing collections and ensures that moderators and admins have the tools and information they
      need to effectively manage collection submissions.
  - name: Requests
    description: >
      Manage user-initiated requests related to nodes and preprints, including access requests,
      withdrawal requests, and institutional affiliation requests. Requests are actions initiated by users
      to either gain access to private content, withdraw content, or request affiliation with institutions.
      Administrators and moderators can approve or reject requests, while requesters can view and comment on their submissions.
  - name: Resources
    description: >
      Resources are structured data artifacts associated with a Registration. These can include datasets, analytic code,
      materials, papers, or supplementary files that contribute to the outcomes of a study or project. Resources are part
      of the registration’s metadata and support reproducibility, data sharing, and transparency in research.

      Each Resource can have an optional Persistent Identifier (PID) such as a DOI, and can be marked as finalized,
      indicating it is ready for public dissemination or archival. Resources are grouped under a Registration and contribute
      to Open Practice Badges when relevant artifacts are provided.

      Resources are managed through the API endpoints to:
       - **Create** new resources for a Registration (e.g., data, code, papers)
       - **List** existing resources linked to a Registration
       - **Retrieve** details about an individual resource
       - **Update** a resource’s description, type, or PID
       - **Finalize** a resource to prevent further changes (once validated)

      **Note**: Once a resource is finalized, it cannot be edited or deleted.

      ### Resource Types
       - `data`: Raw or processed datasets related to the research
       - `analytic_code`: Code or scripts used for analysis
       - `materials`: Research materials, such as instruments or questionnaires
       - `papers`: Manuscripts or published papers
       - `supplements`: Supplementary materials that enhance understanding of the research

      **Permissions**:
       - Read access requires view permissions on the parent Registration.
       - Write access requires edit permissions on the parent Registration.

  - name: Notification Subscriptions
    description: >-
      **Notification Subscriptions** allow users to manage how they receive alerts about activities and events 
      related to OSF resources, such as projects, preprints, registrations, and collections. Subscriptions control 
      **when** notifications are sent and **which events** trigger them.
  
      These subscriptions are **private** and are only visible to the authenticated user who owns them.
  
      ### Subscription Scope and Types
  
      Subscriptions can be configured at different scopes depending on the resource type:
  
      - **Global Subscriptions**  
        Apply OSF-wide, affecting events like comment replies, mentions, and review updates across all resources.
      
      - **Node Subscriptions**  
        Apply to individual projects or components (nodes), tracking events such as new comments or file updates.
      
      - **Provider Subscriptions**  
        Apply to resources within a specific provider (collection, preprint, or registration providers). These subscriptions
        typically track events relevant to moderation workflows, such as new pending submissions.
  
      ### Attributes
  
      - `event_name`  
        The specific event that triggers this subscription.  
        Available event names depend on the scope of the subscription. Examples include:
          - `comments`
          - `file_updated`
          - `global_mentions`
          - `new_pending_submissions`
      
      - `frequency`  
        Determines how often the user receives notifications for the event:
          - `instant`: Sends an email notification immediately after the event occurs.
          - `daily`: Groups event notifications into a daily summary email.
          - `none`: Disables notifications for the event.
  
        Users can update their notification frequency for each subscription.
  
      ### Relationships
  
       - `user`  
        The user who owns the subscription. Each subscription is tied to a single user.
       - `provider`  
        The provider associated with the subscription, if applicable. This may be a Collection Provider, Preprint Provider, 
        or Registration Provider. Global subscriptions do not have a provider relationship.
  
      ### Available Event Names by Subscription Scope
  
      #### Node-Level Subscriptions
      Subscriptions specific to individual projects or components:
       - `comments`: Notify when comments are added.
       - `file_updated`: Notify when files are updated.
  
      #### Global Subscriptions
      Default notification preferences applied OSF-wide:
       - `global_comment_replies`: Notify when someone replies to your comments.
       - `global_comments`: Notify when comments are added to your projects.
       - `global_file_updated`: Notify when files are updated in your projects.
       - `global_mentions`: Notify when you are mentioned.
       - `global_reviews`: Notify when your preprint submissions are updated.
  
      #### Provider-Level Subscriptions
      Notifications related to moderation workflows or submissions within a specific provider:
       - `new_pending_submissions`: Notify when new preprint submissions are awaiting moderation.
  
      ### Notification Channels
  
      Notifications are delivered via **email**, according to the selected `frequency`:
       - `instant`: Immediate email notifications per event.
       - `daily`: Batched email summary delivered daily.
       - `none`: No email notifications are sent.
  
      ### Permissions and Access
  
       - Only the authenticated user who owns a subscription can view or update it.
       - Subscriptions are managed via the OSF API and reflect the user's current notification preferences for supported events.
  - name: Regions
    description: >-
      Storage Regions are predefined geographical or cloud-storage areas where files are stored within OSF Storage.
  
      Each region provides isolation of data in compliance with geographic or regulatory requirements. Users can specify their preferred region for storing project files when using OSF Storage.
  
  
      **Attributes include:**


        - `id`: Unique identifier of the region (e.g., `us-east-1`).
        - `name`: Human-readable name for the region (e.g., `US East`).
  
      **Endpoints include:**

        - **List Regions:** Retrieve all available storage regions.
        - **Region Detail:** Retrieve details about a specific storage region.
  - name: Tokens
    description: >-
      **Personal Access Tokens** allow users to authenticate API requests without credentials.
  
      Tokens support fine-grained permissions (scopes) to control API access levels.  
  - name: Applications
    description: >-
      **OAuth2 Applications** allow external services to securely authenticate and interact with OSF resources via OAuth2.
  
      Registered applications manage OAuth2 flows, client credentials, and access tokens.
  
      Operations include:
        - Creating new OAuth2 applications
        - Viewing and updating application details
        - Deactivating or deleting applications
        - Resetting client secrets (deprecated after v2.14)
  - name: OAuth Scopes
    description: >-
      OAuth scopes define specific permissions for OAuth applications and personal access tokens.
  
      Each scope indicates the permission level granted to perform actions via the OSF API, such as reading node data (`osf.nodes.read`) or modifying node data (`osf.nodes.write`).
  
      Scopes can be queried and managed through these endpoints to understand and control access levels associated with applications and tokens.
  - name: Actions
    description: >-
      Actions represent state transitions or comments performed on reviewable or request-related resources within the
      OSF platform, such as Preprints, Nodes, Preprint Requests, Node Requests, and Collection Submissions.
      These endpoints document and facilitate moderation and administrative workflows, ensuring transparency and 
      accountability in managing user interactions, moderation processes, and lifecycle management for various
      resources.

      Actions are categorized based on their targets:

       - **Review Actions**: Pertaining to moderation and review processes on Preprints.
       - **Node Request Actions**: Related to Node Requests (e.g., access or withdrawal requests).
       - **Preprint Request Actions**: Related to Preprint Requests, such as withdrawal requests.

       Actions require specific permissions depending on their triggers:
        - `submit`: Typically open, no special permissions required.
        - `accept`/`reject`: Require moderation or admin permissions.
        - `edit_comment`: Requires administrative permissions.

       Each successful action response returns a JSON:API formatted object containing:
        - **id** : The identifier of the action.
        - **type** : Type of action performed (e.g., `review-actions`, `node-request-actions`).
        - **attributes** : Information including `trigger`, `comment`, `from_state`, `to_state`, timestamps (`date_created`, `date_modified`), visibility (`visible`), and automation flag (`auto`).
        - **relationships** :
         - `creator`: User who initiated the action.
         - `target` : The resource the action applies to (e.g., Preprint, Node Request).
         - `provider` : Provider associated with the target, if applicable.

       Actions may fail due to various reasons, resulting in standard error responses:
        - `400 Bad Request`: Invalid or malformed payload.
        - `403 Forbidden`: Insufficient permissions to perform the action.
        - `404 Not Found`: The target resource does not exist or is inaccessible.
        - `409 Conflict`: Invalid action due to the current state of the target resource.
  - name: Identifiers
    description: >-
      Identifiers are unique strings associated with various entities in the OSF system, such as project nodes, 
      registrations or preprints.
      Identifiers serve as a means to distinctly reference these entities using standardized formats like DOI 
      (Digital Object Identifier). Each identifier is linked to a specific entity, providing a persistent and
      resolvable URL that can be used for citation, sharing, and retrieval purposes.
  
      Identifiers play a crucial role in ensuring that entities within the OSF ecosystem can be reliably accessed and
      referenced across different platforms and services. By adhering to widely recognized standards, identifiers
      facilitate interoperability and integration with external systems, enhancing the visibility and accessibility
      of research outputs.
  
      The Identifiers system allows users to access both Datacite and Crossref for DOI minting services and stores
      detailed metadata about each identifier, including its category, value, and the entity it is associated with.
      This ensures that users can effectively manage and utilize identifiers in their research workflows, promoting 
      transparency and traceability of scholarly work.

paths:

  ##############
  #   ADDONS   #
  ##############

  /addons/:
    $ref: 'addons/list.yaml'

  ############
  #   BASE   #
  ############

  /:
    get:
      summary: Root
      description: >-
        #### Returns

        A JSON object with `meta` and `links` keys.


        The `meta` key contains information such as a welcome message from the API, the specified version of the request,
        and the full representation of the current user, if authentication credentials were provided in the request.


        The `links` key contains links to the following entity collections: [addons](#tag/Addons), [collections](),
        [institutions](#tag/Institutions), [licenses](#tag/Licenses), [registration schemas](#tag/Registration Schemas),
        [nodes](#tag/Nodes), [registrations](#tag/Registrations), [users](#tag/Users)

      responses:
        '200':
          description: OK
      tags:
        - Base
      operationId: base_read

  #################
  #   CITATIONS   #
  #################

  /citations/styles/:
    $ref: 'citations/style_list.yaml'

  /citations/styles/{style_id}/:
      $ref: 'citations/style_detail.yaml'

  ################
  #   COMMENTS   #
  ################

  /comments/{comment_id}/:
    $ref: 'comments/detail.yaml'

  # /comments/{comment_id}/reports/:
  #   $ref: 'comments/reports_list.yaml'

  # /comments/{comment_id}/reports/{user_id}/:
  #   $ref: 'comments/report_detail.yaml'

  #############
  #   FILES   #
  #############

  /files/{file_id}/:
    $ref: 'files/detail.yaml'

  /files/{file_id}/versions/:
    $ref: 'files/versions_list.yaml'

  /files/{file_id}/versions/{version_id}/:
    $ref: 'files/version_detail.yaml'

  #################
  #    LICENSES   #
  #################

  /licenses/:
    $ref: 'licenses/list.yaml'

  /license/{license_id}/:
    $ref: 'licenses/detail.yaml'

  ############
  #   LOGS   #
  ############

  /logs/{log_id}/:
    $ref: 'logs/detail.yaml'

  # this is a fake endpoint for sidebar documentation
  /actions/:
    $ref: 'logs/actions.yaml'

  ####################
  #   INSTITUTIONS   #
  ####################

  /institutions/:
    $ref: 'institutions/list.yaml'

  /institutions/{institution_id}/:
    $ref: 'institutions/detail.yaml'

  /institutions/{institution_id}/users/:
    $ref: 'institutions/users_list.yaml'

  /institutions/{institution_id}/nodes/:
    $ref: 'institutions/nodes_list.yaml'

  /institutions/{institution_id}/registrations/:
    $ref: 'institutions/registrations_list.yaml'

  /institutions/{institution_id}/relationships/nodes/:
     $ref: 'institutions/relationships_nodes.yaml'

  /institutions/{institution_id}/relationships/registrations/:
     $ref: 'institutions/relationships_registrations.yaml'

  ############################
  #   REGISTRATION SCHEMAS   #
  ############################

  /schemas/registrations/:
    $ref: 'registration_schemas/list.yaml'

  /schemas/registrations/{registration_schema_id}:
    $ref: 'registration_schemas/detail.yaml'

  ############################
  #     SCHEMA RESPONSES     #
  ############################

  /schema_responses/:
    $ref: 'schema_responses/list.yaml'
  /schema_responses/{schema_response_id}:
    $ref: 'schema_responses/detail.yaml'

  ############################
  #  SCHEMA RESPONSE ACTIONS #
  ############################

  /schema_responses/{schema_response_id}/actions/:
    $ref: 'schema_response_actions/list.yaml'

  /schema_responses/{schema_response_id}/actions/{schema_response_action_id}:
    $ref: 'schema_response_actions/detail.yaml'

  ############################
  #      SCHEMA BLOCKS       #
  ############################

  /schema_responses/{schema_response_id}/schema_blocks/:
    $ref: 'schema_blocks/list.yaml'

  /schema_responses/{schema_response_id}/schema_blocks/{schema_response_block_id}:
    $ref: 'schema_blocks/detail.yaml'

  #############
  #   NODES   #
  #############

  /nodes/:
    $ref: 'nodes/list.yaml'

  /nodes/{node_id}/:
    $ref: 'nodes/detail.yaml'

  /nodes/{node_id}/addons/:
    $ref: 'nodes/addons_list.yaml'

  /nodes/{node_id}/addons/{provider}/folders/:
    $ref: 'nodes/addon_folder_list.yaml'

  /nodes/{node_id}/addons/{provider}/:
    $ref: 'nodes/addon_detail.yaml'

  /nodes/{node_id}/children/:
    $ref: 'nodes/children_list.yaml'

  /nodes/{node_id}/citation/:
    $ref: 'nodes/citation_detail.yaml'

  /nodes/{node_id}/citation/{style_id}/:
    $ref: 'nodes/styled_citation_detail.yaml'

  /nodes/{node_id}/comments/:
    $ref: 'nodes/comments_list.yaml'

  /nodes/{node_id}/contributors/:
    $ref: 'nodes/contributors_list.yaml'

  /nodes/{node_id}/contributors/{user_id}/:
    $ref: 'nodes/contributor_detail.yaml'

  /nodes/{node_id}/draft_registrations/:
    $ref: 'nodes/draft_registrations_list.yaml'

  /nodes/{node_id}/draft_registrations/{draft_id}/:
    $ref: 'nodes/draft_registration_detail.yaml'

  /nodes/{node_id}/files/:
    $ref: 'nodes/providers_list.yaml'

  /nodes/{node_id}/files/providers/{provider}/:
    $ref: 'nodes/provider_detail.yaml'

  /nodes/{node_id}/files/{provider}/:
    $ref: 'nodes/files_list.yaml'

  /nodes/{node_id}/files/{provider}/{path}/:
    $ref: 'nodes/file_detail.yaml'

  /nodes/{node_id}/identifiers/:
    $ref: 'nodes/identifiers_list.yaml'

  /nodes/{node_id}/institutions/:
    $ref: 'nodes/institutions_list.yaml'

  /nodes/{node_id}/forks/:
    $ref: 'nodes/forks_list.yaml'

  /nodes/{node_id}/linked_nodes/:
    $ref: 'nodes/linked_nodes_list.yaml'

  /nodes/{node_id}/logs/:
    $ref: 'nodes/logs_list.yaml'

  /nodes/{node_id}/preprints/:
    $ref: 'nodes/preprints_list.yaml'

  /nodes/{node_id}/registrations/:
    $ref: 'nodes/registrations_list.yaml'

  /nodes/{node_id}/view_only_links/:
    $ref: 'nodes/view_only_links_list.yaml'

  /nodes/{node_id}/view_only_links/{link_id}/:
    $ref: 'nodes/view_only_link_detail.yaml'

  /nodes/{node_id}/wikis/:
    $ref: 'nodes/wikis_list.yaml'


  #################
  #   PREPRINTS   #
  #################

  /preprints/:
    $ref: 'preprints/list.yaml'

  /preprints/{preprint_id}/versions/:
    $ref: 'preprints/versioned_preprints_list.yaml'

  /preprints/{preprint_id}/:
    $ref: 'preprints/detail.yaml'

  /preprints/{preprint_id}/citation/:
    $ref: 'preprints/citation_detail.yaml'

  /preprints/{preprint_id}/citation/{style_id}/:
    $ref: 'preprints/citation_style_detail.yaml'

  /preprints/{preprint_id}/contributors/:
    $ref: 'preprints/contributors_list.yaml'

  /preprints/{preprint_id}/contributors/{user_id}/:
    $ref: 'preprints/contributor_detail.yaml'

  /preprints/{preprint_id}/bibliographic_contributors/:
    $ref: 'preprints/bibliographic_contributors_list.yaml'

  /preprints/{preprint_id}/institutions/:
    $ref: 'preprints/institutions_list.yaml'

  /preprints/{preprint_id}/relationships/institutions/:
    $ref: 'preprints/institutions_relationship_list.yaml'



  ##########################
  #   PREPRINT PROVIDERS   #
  ##########################

  /preprint_providers/:
    $ref: 'preprint_providers/list.yaml'

  /preprint_providers/{preprint_provider_id}/:
    $ref: 'preprint_providers/detail.yaml'

  /preprint_providers/{preprint_provider_id}/preprints/:
    $ref: 'preprint_providers/preprints_list.yaml'

  /preprint_providers/{preprint_provider_id}/taxonomies/:
    $ref: 'preprint_providers/taxonomies_list.yaml'

  /preprint_providers/{preprint_provider_id}/licenses/:
    $ref: 'preprint_providers/licenses_list.yaml'

  #####################
  #   REGISTRATIONS   #
  #####################

  /registrations/:
    $ref: 'registrations/list.yaml'

  /registrations/{registration_id}/:
    $ref: 'registrations/detail.yaml'

  /registrations/{registration_id}/citations/:
    $ref: 'registrations/style_list.yaml'

  /registrations/{registration_id}/citations/{citation_id}/:
    $ref: 'registrations/style_detail.yaml'

  /registrations/{registration_id}/children/:
    $ref: 'registrations/children_list.yaml'

  /registrations/{registration_id}/comments/:
    $ref: 'registrations/comments_list.yaml'

  /registrations/{registration_id}/contributors/:
    $ref: 'registrations/contributors_list.yaml'

  /registrations/{registration_id}/contributors/{user_id}/:
    $ref: 'registrations/contributor_detail.yaml'

  /registrations/{registration_id}/files/:
    $ref: 'registrations/providers_list.yaml'

  /registrations/{registration_id}/files/{provider}/:
    $ref: 'registrations/files_list.yaml'

  /registrations/{registration_id}/files/{provider}/{path}/:
    $ref: 'registrations/file_detail.yaml'

  /registrations/{registration_id}/forks/:
    $ref: 'registrations/forks_list.yaml'

  /registrations/{registration_id}/identifiers/:
    $ref: 'registrations/identifiers_list.yaml'

  /registrations/{registration_id}/institutions/:
    $ref: 'registrations/institutions_list.yaml'

  /registrations/{registration_id}/linked_nodes/:
    $ref: 'registrations/linked_nodes_list.yaml'

  /registrations/{registration_id}/logs/:
    $ref: 'registrations/logs_list.yaml'

  /registrations/{registration_id}/view_only_links/:
    $ref: 'registrations/view_only_links_list.yaml'

  /registrations/{registration_id}/view_only_links/{link_id}/:
    $ref: 'registrations/view_only_link_detail.yaml'

  /registrations/{registration_id}/wikis/:
    $ref: 'registrations/wikis_list.yaml'

  ##########################
  #  DRAFT REGISTRATIONS   #
  ##########################

  /draft_registrations/:
    $ref: 'draft_registrations/draft_registrations_list.yaml'

  /draft_registrations/{draft_id}/:
    $ref: 'draft_registrations/draft_registration_detail.yaml'

  /draft_registrations/{draft_id}/contributors/:
    $ref: 'draft_registrations/draft_registrations_contributors_list.yaml'

  /draft_registrations/{draft_id}/contributors/{user_id}/:
    $ref: 'draft_registrations/draft_registrations_contributors_detail.yaml'

  /draft_registrations/{draft_id}/institutions/:
    $ref: 'draft_registrations/draft_registrations_institutions_list.yaml'

  /draft_registrations/{draft_id}/subjects/:
    $ref: 'draft_registrations/draft_registrations_subjects_list.yaml'

  /draft_registrations/{draft_id}/bibliographic_contributors/:
    $ref: 'draft_registrations/bibliographic_contributor_list.yaml'

  /draft_registrations/{draft_id}/relationships/institutions/:
    $ref: 'draft_registrations/relationships_institutions_list.yaml'

  /draft_registrations/{draft_id}/relationships/subjects/:
    $ref: 'draft_registrations/relationships_subjects_list.yaml'

  ##################
  #   TAXONOMIES   #
  ##################

  /taxonomies/:
    $ref: 'taxonomies/list.yaml'

  /taxonomies/{taxonomy_id}/:
    $ref: 'taxonomies/detail.yaml'

  #############
  #   USERS   #
  #############

  /users/:
    $ref: 'users/list.yaml'

  /users/{user_id}/:
    $ref: 'users/detail.yaml'

  /users/{user_id}/institutions/:
    $ref: 'users/institutions_list.yaml'

  /users/{user_id}/nodes/:
    $ref: 'users/nodes_list.yaml'

  /users/{user_id}/preprints/:
    $ref: 'users/preprints_list.yaml'

  /users/{user_id}/registrations/:
    $ref: 'users/registrations_list.yaml'

  /users/{user_id}/addons/:
    $ref: 'users/addons_list.yaml'

  /users/{user_id}/addons/{provider}/:
    $ref: 'users/addon_detail.yaml'

  /users/{user_id}/addons/{provider}/accounts/:
    $ref: 'users/addon_accounts_list.yaml'

  /users/{user_id}/addons/{provider}/accounts/{account_id}/:
    $ref: 'users/addon_account_detail.yaml'

  /users/{user_id}/claim/:
    $ref: 'users/user_claim.yaml'

  /users/{user_id}/draft_preprints/:
    $ref: 'users/user_draft_preprints_list.yaml'

  /users/{user_id}/draft_registrations/:
    $ref: 'users/user_draft_registrations_list.yaml'

  /users/{user_id}/relationships/institutions/:
    $ref: 'users/user_relationships_institutions.yaml'

  /users/{user_id}/settings/:
   $ref: 'users/user_settings.yaml'

  /users/{user_id}/settings/emails/:
    $ref: 'users/user_settings_emails_list.yaml'

  /users/{user_id}/settings/emails/{email_id}/:
    $ref: 'users/user_settings_email_detail.yaml'

  /users/{user_id}/settings/export/:
    $ref: 'users/user_settings_export.yaml'

  /users/{user_id}/settings/identities/:
    $ref: 'users/user_settings_identities_list.yaml'

  /users/{user_id}/settings/identities/{identity_id}:
    $ref: 'users/user_settings_identities_detail.yaml'

  /users/{user_id}/settings/password/:
    $ref: 'users/user_password.yaml'

  ######################
  #   View Only Links  #
  ######################

  /view_only_links/{link_id}/:
    $ref: 'view_only_links/detail.yaml'

  /view_only_links/{link_id}/nodes/:
    $ref: 'view_only_links/nodes.yaml'

  #############
  #   WIKIS   #
  #############

  /wikis/{wiki_id}/:
    $ref: 'wikis/detail.yaml'

  /wikis/{wiki_id}/content/:
    $ref: 'wikis/content.yaml'

  /wikis/{wiki_id}/versions/:
    $ref: 'wikis/versions_list.yaml'

  /wikis/{wiki_id}/versions/{version_id}/:
    $ref: 'wikis/versions_detail.yaml'

  /wikis/{wiki_id}/versions/{version_id}/content/:
    $ref: 'wikis/versions_content_list.yaml'

  ###################
  #   COLLECTIONS   #
  ###################

  /collections/:
    $ref: 'collections/list.yaml'

  /collections/{collection_id}/:
    $ref: 'collections/detail.yaml'

  /collections/{collection_id}/linked_nodes:
    $ref: 'collections/linked_nodes_list.yaml'

  /collections/{collection_id}/linked_nodes/relationships/:
    $ref: 'collections/linked_nodes_relationships.yaml'

  /collections/{collection_id}/linked_registrations/:
    $ref: 'collections/linked_registrations_list.yaml'

  /collections/{collection_id}/linked_registrations/relationships/:
    $ref: 'collections/linked_registrations_relationships.yaml'

  /collections/{collection_id}/linked_preprints/:
    $ref: 'collections/linked_preprints_list.yaml'

  /collections/{collection_id}/collected_metadata/:
    $ref: 'collections/collected_metadata_list.yaml'

  /collections/{collection_id}/collected_metadata/{cgm_id}:
    $ref: 'collections/collected_metadata_detail.yaml'

  /collections/{collection_id}/collected_metadata/{cgm_id}/subjects/:
    $ref: 'collections/collected_metadata_subjects.yaml'

  /collections/{collection_id}/collected_metadata/{cgm_id}/relationships/subjects/:
    $ref: 'collections/collected_metadata_subjects_relationships.yaml'

  ###############################
  #   COLLECTIONS SUBMISSIONS   #
  ###############################

  /collection_submissions/{collection_submission_id}/actions/:
    $ref: 'collection_submissions/list.yaml'

  #######################################
  #   COLLECTIONS SUBMISSIONS ACTIONS   #
  #######################################

  /collection_submission_actions/{collection_submission_id}/:
    $ref: 'collection_submission_actions/detail.yaml'

  /collection_submission_actions/:
    $ref: 'collection_submission_actions/list.yaml'

  ############################
  #   COLLECTIONS PROVIDER   #
  ############################

  /provider/collections/:
    $ref: 'collection_provider/list.yaml'

  /provider/collections/{collection_id}/:
    $ref: 'collection_provider/detail.yaml'

  /provider/collections/{collection_id}/licenses/:
    $ref: 'collection_provider/licenses.yaml'

  /provider/collections/{collection_id}/submissions/:
    $ref: 'collection_provider/submissions.yaml'

  /provider/collections/{collection_id}/subjects/:
    $ref: 'collection_provider/subjects.yaml'

  /provider/collections/{collection_id}/subjects/highlighted/:
    $ref: 'collection_provider/subjects_highlighted.yaml'

  /provider/collections/{collection_id}/moderators/:
    $ref: 'collection_provider/moderators_list.yaml'

  /provider/collections/{collection_id}/moderators/{moderator_id}/:
    $ref: 'collection_provider/moderators_detail.yaml'

#######################################
#              REQUESTS               #
#######################################

  /requests/{request_id}/:
    $ref: 'requests/detail.yaml'

  /requests/{request_id}/actions/:
    $ref: 'requests/actions_list.yaml'

#######################################
#              REQUESTS               #
#######################################

  /resources/:
    $ref: 'resources/list.yaml'

  /resources/{resource_id}/:
    $ref: 'resources/detail.yaml'

#######################################
#              SUBJECTS               #
#######################################

  /subjects/:
    $ref: 'subjects/list.yaml'

  /subjects/{subject_id}/:
    $ref: 'subjects/detail.yaml'

  /subjects/{subject_id}/children/:
    $ref: 'subjects/children_list.yaml'

#######################################
#              GUIDS                  #
#######################################

  /guids/{guid_id}/:
    $ref: 'guids/detail.yaml'

#######################################
#          CEDAR Metadata             #
#######################################

  /files/{file_id}/cedar_metadata_records/:
    $ref: 'cedar_metadata/files_list.yaml'

  /nodes/{node_id}/cedar_metadata_records/:
    $ref: 'cedar_metadata/nodes_list.yaml'

#######################################
#          Custom Metadata            #
#######################################

  /custom_file_metadata_records/{file_id}/:
    $ref: 'custom_metadata/files_list.yaml'

  /custom_item_metadata_records/{guid_id}/:
    $ref: 'custom_metadata/nodes_list.yaml'

  ################################
  #   NOTIFICATION SUBSCRIPTIONS #
  ################################

  /subscriptions/:
    $ref: 'subscriptions/subscription_list.yaml'

  /subscriptions/{subscription_id}/:
    $ref: 'subscriptions/subscription_detail.yaml'

  /providers/collections/{provider_id}/subscriptions/:
    $ref: 'subscriptions/collection_provider_subscription_list.yaml'

  /providers/collections/{provider_id}/subscriptions/{subscription_id}/:
    $ref: 'subscriptions/collection_provider_subscription_detail.yaml'

  /providers/preprints/{provider_id}/subscriptions/:
    $ref: 'subscriptions/preprint_provider_subscription_list.yaml'

  /providers/preprints/{provider_id}/subscriptions/{subscription_id}/:
    $ref: 'subscriptions/preprint_provider_subscription_detail.yaml'

  /providers/registrations/{provider_id}/subscriptions/:
    $ref: 'subscriptions/registration_provider_subscription_list.yaml'

  /providers/registrations/{provider_id}/subscriptions/{subscription_id}/:
    $ref: 'subscriptions/registration_provider_subscription_detail.yaml'

  /registration_subscriptions/{subscription_id}/:
    $ref: 'subscriptions/registration_subscription_detail.yaml'

  /collection_subscriptions/{subscription_id}/:
    $ref: 'subscriptions/collection_subscription_detail.yaml'

  #######################################
  #               REGIONS              #
  #######################################

  /regions/:
    $ref: 'region/region_list.yaml'

  /regions/{region_id}/:
    $ref: 'region/region_detail.yaml'

  ############################
  #         TOKENS           #
  ############################

  /tokens/:
    $ref: 'tokens/token_list.yaml'

  /tokens/{_id}/:
    $ref: 'tokens/token_detail.yaml'

  /tokens/{_id}/scopes/:
    $ref: 'tokens/token_scopes_list.yaml'

  #######################################
  #            APPLICATIONS             #
  #######################################

  /applications/:
    $ref: 'applications/application_list.yaml'

  /applications/{client_id}/:
    $ref: 'applications/application_detail.yaml'

  /applications/{client_id}/reset/:
    $ref: 'applications/application_reset.yaml'

#######################################
#              OAUTH SCOPES           #
#######################################

  /scopes/:
    $ref: 'scopes/scope_list.yaml'

  /scopes/{scope_id}/:
    $ref: 'scopes/scope_detail.yaml'
    
  ############################
  #        ACTIONS          #
  ############################

  /actions/reviews/:
    $ref: 'actions/review_action_list.yaml'

  /actions/requests/nodes/:
    $ref: 'actions/node_request_action_list.yaml'

  /actions/requests/preprints/:
    $ref: 'actions/preprint_request_action_list.yaml'

  /actions/{action_id}/:
    $ref: 'actions/action_detail.yaml'

  ######################
  #   IDENTIFIERS      #
  ######################

  /identifiers/{identifier_id}/:
    $ref: 'identifiers/detail.yaml'

  /identifiers/{node_id}/identifiers/:
    $ref: 'identifiers/node_list.yaml'
